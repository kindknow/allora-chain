// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/v7/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_allora_network_allora_chain_math "github.com/allora-network/allora-chain/math"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IsWhitelistedGlobalWorkerRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsWhitelistedGlobalWorkerRequest) Reset()         { *m = IsWhitelistedGlobalWorkerRequest{} }
func (m *IsWhitelistedGlobalWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedGlobalWorkerRequest) ProtoMessage()    {}
func (*IsWhitelistedGlobalWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{0}
}
func (m *IsWhitelistedGlobalWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedGlobalWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedGlobalWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedGlobalWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedGlobalWorkerRequest.Merge(m, src)
}
func (m *IsWhitelistedGlobalWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedGlobalWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedGlobalWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedGlobalWorkerRequest proto.InternalMessageInfo

func (m *IsWhitelistedGlobalWorkerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsWhitelistedGlobalWorkerResponse struct {
	IsWhitelistedGlobalWorker bool `protobuf:"varint,1,opt,name=is_whitelisted_global_worker,json=isWhitelistedGlobalWorker,proto3" json:"is_whitelisted_global_worker,omitempty"`
}

func (m *IsWhitelistedGlobalWorkerResponse) Reset()         { *m = IsWhitelistedGlobalWorkerResponse{} }
func (m *IsWhitelistedGlobalWorkerResponse) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedGlobalWorkerResponse) ProtoMessage()    {}
func (*IsWhitelistedGlobalWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{1}
}
func (m *IsWhitelistedGlobalWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedGlobalWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedGlobalWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedGlobalWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedGlobalWorkerResponse.Merge(m, src)
}
func (m *IsWhitelistedGlobalWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedGlobalWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedGlobalWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedGlobalWorkerResponse proto.InternalMessageInfo

func (m *IsWhitelistedGlobalWorkerResponse) GetIsWhitelistedGlobalWorker() bool {
	if m != nil {
		return m.IsWhitelistedGlobalWorker
	}
	return false
}

type IsWhitelistedGlobalReputerRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsWhitelistedGlobalReputerRequest) Reset()         { *m = IsWhitelistedGlobalReputerRequest{} }
func (m *IsWhitelistedGlobalReputerRequest) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedGlobalReputerRequest) ProtoMessage()    {}
func (*IsWhitelistedGlobalReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{2}
}
func (m *IsWhitelistedGlobalReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedGlobalReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedGlobalReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedGlobalReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedGlobalReputerRequest.Merge(m, src)
}
func (m *IsWhitelistedGlobalReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedGlobalReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedGlobalReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedGlobalReputerRequest proto.InternalMessageInfo

func (m *IsWhitelistedGlobalReputerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsWhitelistedGlobalReputerResponse struct {
	IsWhitelistedGlobalReputer bool `protobuf:"varint,1,opt,name=is_whitelisted_global_reputer,json=isWhitelistedGlobalReputer,proto3" json:"is_whitelisted_global_reputer,omitempty"`
}

func (m *IsWhitelistedGlobalReputerResponse) Reset()         { *m = IsWhitelistedGlobalReputerResponse{} }
func (m *IsWhitelistedGlobalReputerResponse) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedGlobalReputerResponse) ProtoMessage()    {}
func (*IsWhitelistedGlobalReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{3}
}
func (m *IsWhitelistedGlobalReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedGlobalReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedGlobalReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedGlobalReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedGlobalReputerResponse.Merge(m, src)
}
func (m *IsWhitelistedGlobalReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedGlobalReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedGlobalReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedGlobalReputerResponse proto.InternalMessageInfo

func (m *IsWhitelistedGlobalReputerResponse) GetIsWhitelistedGlobalReputer() bool {
	if m != nil {
		return m.IsWhitelistedGlobalReputer
	}
	return false
}

type IsWhitelistedGlobalAdminRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsWhitelistedGlobalAdminRequest) Reset()         { *m = IsWhitelistedGlobalAdminRequest{} }
func (m *IsWhitelistedGlobalAdminRequest) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedGlobalAdminRequest) ProtoMessage()    {}
func (*IsWhitelistedGlobalAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{4}
}
func (m *IsWhitelistedGlobalAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedGlobalAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedGlobalAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedGlobalAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedGlobalAdminRequest.Merge(m, src)
}
func (m *IsWhitelistedGlobalAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedGlobalAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedGlobalAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedGlobalAdminRequest proto.InternalMessageInfo

func (m *IsWhitelistedGlobalAdminRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsWhitelistedGlobalAdminResponse struct {
	IsWhitelistedGlobalAdmin bool `protobuf:"varint,1,opt,name=is_whitelisted_global_admin,json=isWhitelistedGlobalAdmin,proto3" json:"is_whitelisted_global_admin,omitempty"`
}

func (m *IsWhitelistedGlobalAdminResponse) Reset()         { *m = IsWhitelistedGlobalAdminResponse{} }
func (m *IsWhitelistedGlobalAdminResponse) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedGlobalAdminResponse) ProtoMessage()    {}
func (*IsWhitelistedGlobalAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{5}
}
func (m *IsWhitelistedGlobalAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedGlobalAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedGlobalAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedGlobalAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedGlobalAdminResponse.Merge(m, src)
}
func (m *IsWhitelistedGlobalAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedGlobalAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedGlobalAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedGlobalAdminResponse proto.InternalMessageInfo

func (m *IsWhitelistedGlobalAdminResponse) GetIsWhitelistedGlobalAdmin() bool {
	if m != nil {
		return m.IsWhitelistedGlobalAdmin
	}
	return false
}

type IsTopicWorkerWhitelistEnabledRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *IsTopicWorkerWhitelistEnabledRequest) Reset()         { *m = IsTopicWorkerWhitelistEnabledRequest{} }
func (m *IsTopicWorkerWhitelistEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*IsTopicWorkerWhitelistEnabledRequest) ProtoMessage()    {}
func (*IsTopicWorkerWhitelistEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{6}
}
func (m *IsTopicWorkerWhitelistEnabledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTopicWorkerWhitelistEnabledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTopicWorkerWhitelistEnabledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTopicWorkerWhitelistEnabledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTopicWorkerWhitelistEnabledRequest.Merge(m, src)
}
func (m *IsTopicWorkerWhitelistEnabledRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsTopicWorkerWhitelistEnabledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTopicWorkerWhitelistEnabledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsTopicWorkerWhitelistEnabledRequest proto.InternalMessageInfo

func (m *IsTopicWorkerWhitelistEnabledRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type IsTopicWorkerWhitelistEnabledResponse struct {
	IsTopicWorkerWhitelistEnabled bool `protobuf:"varint,1,opt,name=is_topic_worker_whitelist_enabled,json=isTopicWorkerWhitelistEnabled,proto3" json:"is_topic_worker_whitelist_enabled,omitempty"`
}

func (m *IsTopicWorkerWhitelistEnabledResponse) Reset()         { *m = IsTopicWorkerWhitelistEnabledResponse{} }
func (m *IsTopicWorkerWhitelistEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*IsTopicWorkerWhitelistEnabledResponse) ProtoMessage()    {}
func (*IsTopicWorkerWhitelistEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{7}
}
func (m *IsTopicWorkerWhitelistEnabledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTopicWorkerWhitelistEnabledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTopicWorkerWhitelistEnabledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTopicWorkerWhitelistEnabledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTopicWorkerWhitelistEnabledResponse.Merge(m, src)
}
func (m *IsTopicWorkerWhitelistEnabledResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsTopicWorkerWhitelistEnabledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTopicWorkerWhitelistEnabledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsTopicWorkerWhitelistEnabledResponse proto.InternalMessageInfo

func (m *IsTopicWorkerWhitelistEnabledResponse) GetIsTopicWorkerWhitelistEnabled() bool {
	if m != nil {
		return m.IsTopicWorkerWhitelistEnabled
	}
	return false
}

type IsTopicReputerWhitelistEnabledRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *IsTopicReputerWhitelistEnabledRequest) Reset()         { *m = IsTopicReputerWhitelistEnabledRequest{} }
func (m *IsTopicReputerWhitelistEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*IsTopicReputerWhitelistEnabledRequest) ProtoMessage()    {}
func (*IsTopicReputerWhitelistEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{8}
}
func (m *IsTopicReputerWhitelistEnabledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTopicReputerWhitelistEnabledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTopicReputerWhitelistEnabledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTopicReputerWhitelistEnabledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTopicReputerWhitelistEnabledRequest.Merge(m, src)
}
func (m *IsTopicReputerWhitelistEnabledRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsTopicReputerWhitelistEnabledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTopicReputerWhitelistEnabledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsTopicReputerWhitelistEnabledRequest proto.InternalMessageInfo

func (m *IsTopicReputerWhitelistEnabledRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type IsTopicReputerWhitelistEnabledResponse struct {
	IsTopicReputerWhitelistEnabled bool `protobuf:"varint,1,opt,name=is_topic_reputer_whitelist_enabled,json=isTopicReputerWhitelistEnabled,proto3" json:"is_topic_reputer_whitelist_enabled,omitempty"`
}

func (m *IsTopicReputerWhitelistEnabledResponse) Reset() {
	*m = IsTopicReputerWhitelistEnabledResponse{}
}
func (m *IsTopicReputerWhitelistEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*IsTopicReputerWhitelistEnabledResponse) ProtoMessage()    {}
func (*IsTopicReputerWhitelistEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{9}
}
func (m *IsTopicReputerWhitelistEnabledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTopicReputerWhitelistEnabledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTopicReputerWhitelistEnabledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTopicReputerWhitelistEnabledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTopicReputerWhitelistEnabledResponse.Merge(m, src)
}
func (m *IsTopicReputerWhitelistEnabledResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsTopicReputerWhitelistEnabledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTopicReputerWhitelistEnabledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsTopicReputerWhitelistEnabledResponse proto.InternalMessageInfo

func (m *IsTopicReputerWhitelistEnabledResponse) GetIsTopicReputerWhitelistEnabled() bool {
	if m != nil {
		return m.IsTopicReputerWhitelistEnabled
	}
	return false
}

type IsWhitelistedTopicCreatorRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsWhitelistedTopicCreatorRequest) Reset()         { *m = IsWhitelistedTopicCreatorRequest{} }
func (m *IsWhitelistedTopicCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedTopicCreatorRequest) ProtoMessage()    {}
func (*IsWhitelistedTopicCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{10}
}
func (m *IsWhitelistedTopicCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedTopicCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedTopicCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedTopicCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedTopicCreatorRequest.Merge(m, src)
}
func (m *IsWhitelistedTopicCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedTopicCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedTopicCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedTopicCreatorRequest proto.InternalMessageInfo

func (m *IsWhitelistedTopicCreatorRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsWhitelistedTopicCreatorResponse struct {
	IsWhitelistedTopicCreator bool `protobuf:"varint,1,opt,name=is_whitelisted_topic_creator,json=isWhitelistedTopicCreator,proto3" json:"is_whitelisted_topic_creator,omitempty"`
}

func (m *IsWhitelistedTopicCreatorResponse) Reset()         { *m = IsWhitelistedTopicCreatorResponse{} }
func (m *IsWhitelistedTopicCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedTopicCreatorResponse) ProtoMessage()    {}
func (*IsWhitelistedTopicCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{11}
}
func (m *IsWhitelistedTopicCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedTopicCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedTopicCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedTopicCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedTopicCreatorResponse.Merge(m, src)
}
func (m *IsWhitelistedTopicCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedTopicCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedTopicCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedTopicCreatorResponse proto.InternalMessageInfo

func (m *IsWhitelistedTopicCreatorResponse) GetIsWhitelistedTopicCreator() bool {
	if m != nil {
		return m.IsWhitelistedTopicCreator
	}
	return false
}

type IsWhitelistedGlobalActorRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsWhitelistedGlobalActorRequest) Reset()         { *m = IsWhitelistedGlobalActorRequest{} }
func (m *IsWhitelistedGlobalActorRequest) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedGlobalActorRequest) ProtoMessage()    {}
func (*IsWhitelistedGlobalActorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{12}
}
func (m *IsWhitelistedGlobalActorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedGlobalActorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedGlobalActorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedGlobalActorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedGlobalActorRequest.Merge(m, src)
}
func (m *IsWhitelistedGlobalActorRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedGlobalActorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedGlobalActorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedGlobalActorRequest proto.InternalMessageInfo

func (m *IsWhitelistedGlobalActorRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsWhitelistedGlobalActorResponse struct {
	IsWhitelistedGlobalActor bool `protobuf:"varint,1,opt,name=is_whitelisted_global_actor,json=isWhitelistedGlobalActor,proto3" json:"is_whitelisted_global_actor,omitempty"`
}

func (m *IsWhitelistedGlobalActorResponse) Reset()         { *m = IsWhitelistedGlobalActorResponse{} }
func (m *IsWhitelistedGlobalActorResponse) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedGlobalActorResponse) ProtoMessage()    {}
func (*IsWhitelistedGlobalActorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{13}
}
func (m *IsWhitelistedGlobalActorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedGlobalActorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedGlobalActorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedGlobalActorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedGlobalActorResponse.Merge(m, src)
}
func (m *IsWhitelistedGlobalActorResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedGlobalActorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedGlobalActorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedGlobalActorResponse proto.InternalMessageInfo

func (m *IsWhitelistedGlobalActorResponse) GetIsWhitelistedGlobalActor() bool {
	if m != nil {
		return m.IsWhitelistedGlobalActor
	}
	return false
}

type IsWhitelistedTopicWorkerRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsWhitelistedTopicWorkerRequest) Reset()         { *m = IsWhitelistedTopicWorkerRequest{} }
func (m *IsWhitelistedTopicWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedTopicWorkerRequest) ProtoMessage()    {}
func (*IsWhitelistedTopicWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{14}
}
func (m *IsWhitelistedTopicWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedTopicWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedTopicWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedTopicWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedTopicWorkerRequest.Merge(m, src)
}
func (m *IsWhitelistedTopicWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedTopicWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedTopicWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedTopicWorkerRequest proto.InternalMessageInfo

func (m *IsWhitelistedTopicWorkerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *IsWhitelistedTopicWorkerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsWhitelistedTopicWorkerResponse struct {
	IsWhitelistedTopicWorker bool `protobuf:"varint,1,opt,name=is_whitelisted_topic_worker,json=isWhitelistedTopicWorker,proto3" json:"is_whitelisted_topic_worker,omitempty"`
}

func (m *IsWhitelistedTopicWorkerResponse) Reset()         { *m = IsWhitelistedTopicWorkerResponse{} }
func (m *IsWhitelistedTopicWorkerResponse) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedTopicWorkerResponse) ProtoMessage()    {}
func (*IsWhitelistedTopicWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{15}
}
func (m *IsWhitelistedTopicWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedTopicWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedTopicWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedTopicWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedTopicWorkerResponse.Merge(m, src)
}
func (m *IsWhitelistedTopicWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedTopicWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedTopicWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedTopicWorkerResponse proto.InternalMessageInfo

func (m *IsWhitelistedTopicWorkerResponse) GetIsWhitelistedTopicWorker() bool {
	if m != nil {
		return m.IsWhitelistedTopicWorker
	}
	return false
}

type IsWhitelistedTopicReputerRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsWhitelistedTopicReputerRequest) Reset()         { *m = IsWhitelistedTopicReputerRequest{} }
func (m *IsWhitelistedTopicReputerRequest) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedTopicReputerRequest) ProtoMessage()    {}
func (*IsWhitelistedTopicReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{16}
}
func (m *IsWhitelistedTopicReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedTopicReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedTopicReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedTopicReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedTopicReputerRequest.Merge(m, src)
}
func (m *IsWhitelistedTopicReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedTopicReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedTopicReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedTopicReputerRequest proto.InternalMessageInfo

func (m *IsWhitelistedTopicReputerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *IsWhitelistedTopicReputerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsWhitelistedTopicReputerResponse struct {
	IsWhitelistedTopicReputer bool `protobuf:"varint,1,opt,name=is_whitelisted_topic_reputer,json=isWhitelistedTopicReputer,proto3" json:"is_whitelisted_topic_reputer,omitempty"`
}

func (m *IsWhitelistedTopicReputerResponse) Reset()         { *m = IsWhitelistedTopicReputerResponse{} }
func (m *IsWhitelistedTopicReputerResponse) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistedTopicReputerResponse) ProtoMessage()    {}
func (*IsWhitelistedTopicReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{17}
}
func (m *IsWhitelistedTopicReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistedTopicReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistedTopicReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistedTopicReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistedTopicReputerResponse.Merge(m, src)
}
func (m *IsWhitelistedTopicReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistedTopicReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistedTopicReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistedTopicReputerResponse proto.InternalMessageInfo

func (m *IsWhitelistedTopicReputerResponse) GetIsWhitelistedTopicReputer() bool {
	if m != nil {
		return m.IsWhitelistedTopicReputer
	}
	return false
}

type CanUpdateAllGlobalWhitelistsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CanUpdateAllGlobalWhitelistsRequest) Reset()         { *m = CanUpdateAllGlobalWhitelistsRequest{} }
func (m *CanUpdateAllGlobalWhitelistsRequest) String() string { return proto.CompactTextString(m) }
func (*CanUpdateAllGlobalWhitelistsRequest) ProtoMessage()    {}
func (*CanUpdateAllGlobalWhitelistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{18}
}
func (m *CanUpdateAllGlobalWhitelistsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateAllGlobalWhitelistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateAllGlobalWhitelistsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateAllGlobalWhitelistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateAllGlobalWhitelistsRequest.Merge(m, src)
}
func (m *CanUpdateAllGlobalWhitelistsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateAllGlobalWhitelistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateAllGlobalWhitelistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateAllGlobalWhitelistsRequest proto.InternalMessageInfo

func (m *CanUpdateAllGlobalWhitelistsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CanUpdateAllGlobalWhitelistsResponse struct {
	CanUpdateAllGlobalWhitelists bool `protobuf:"varint,1,opt,name=can_update_all_global_whitelists,json=canUpdateAllGlobalWhitelists,proto3" json:"can_update_all_global_whitelists,omitempty"`
}

func (m *CanUpdateAllGlobalWhitelistsResponse) Reset()         { *m = CanUpdateAllGlobalWhitelistsResponse{} }
func (m *CanUpdateAllGlobalWhitelistsResponse) String() string { return proto.CompactTextString(m) }
func (*CanUpdateAllGlobalWhitelistsResponse) ProtoMessage()    {}
func (*CanUpdateAllGlobalWhitelistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{19}
}
func (m *CanUpdateAllGlobalWhitelistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateAllGlobalWhitelistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateAllGlobalWhitelistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateAllGlobalWhitelistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateAllGlobalWhitelistsResponse.Merge(m, src)
}
func (m *CanUpdateAllGlobalWhitelistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateAllGlobalWhitelistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateAllGlobalWhitelistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateAllGlobalWhitelistsResponse proto.InternalMessageInfo

func (m *CanUpdateAllGlobalWhitelistsResponse) GetCanUpdateAllGlobalWhitelists() bool {
	if m != nil {
		return m.CanUpdateAllGlobalWhitelists
	}
	return false
}

type CanUpdateGlobalWorkerWhitelistRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CanUpdateGlobalWorkerWhitelistRequest) Reset()         { *m = CanUpdateGlobalWorkerWhitelistRequest{} }
func (m *CanUpdateGlobalWorkerWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*CanUpdateGlobalWorkerWhitelistRequest) ProtoMessage()    {}
func (*CanUpdateGlobalWorkerWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{20}
}
func (m *CanUpdateGlobalWorkerWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateGlobalWorkerWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateGlobalWorkerWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateGlobalWorkerWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateGlobalWorkerWhitelistRequest.Merge(m, src)
}
func (m *CanUpdateGlobalWorkerWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateGlobalWorkerWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateGlobalWorkerWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateGlobalWorkerWhitelistRequest proto.InternalMessageInfo

func (m *CanUpdateGlobalWorkerWhitelistRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CanUpdateGlobalWorkerWhitelistResponse struct {
	CanUpdateGlobalWorkerWhitelist bool `protobuf:"varint,1,opt,name=can_update_global_worker_whitelist,json=canUpdateGlobalWorkerWhitelist,proto3" json:"can_update_global_worker_whitelist,omitempty"`
}

func (m *CanUpdateGlobalWorkerWhitelistResponse) Reset() {
	*m = CanUpdateGlobalWorkerWhitelistResponse{}
}
func (m *CanUpdateGlobalWorkerWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*CanUpdateGlobalWorkerWhitelistResponse) ProtoMessage()    {}
func (*CanUpdateGlobalWorkerWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{21}
}
func (m *CanUpdateGlobalWorkerWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateGlobalWorkerWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateGlobalWorkerWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateGlobalWorkerWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateGlobalWorkerWhitelistResponse.Merge(m, src)
}
func (m *CanUpdateGlobalWorkerWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateGlobalWorkerWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateGlobalWorkerWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateGlobalWorkerWhitelistResponse proto.InternalMessageInfo

func (m *CanUpdateGlobalWorkerWhitelistResponse) GetCanUpdateGlobalWorkerWhitelist() bool {
	if m != nil {
		return m.CanUpdateGlobalWorkerWhitelist
	}
	return false
}

type CanUpdateGlobalReputerWhitelistRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CanUpdateGlobalReputerWhitelistRequest) Reset() {
	*m = CanUpdateGlobalReputerWhitelistRequest{}
}
func (m *CanUpdateGlobalReputerWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*CanUpdateGlobalReputerWhitelistRequest) ProtoMessage()    {}
func (*CanUpdateGlobalReputerWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{22}
}
func (m *CanUpdateGlobalReputerWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateGlobalReputerWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateGlobalReputerWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateGlobalReputerWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateGlobalReputerWhitelistRequest.Merge(m, src)
}
func (m *CanUpdateGlobalReputerWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateGlobalReputerWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateGlobalReputerWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateGlobalReputerWhitelistRequest proto.InternalMessageInfo

func (m *CanUpdateGlobalReputerWhitelistRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CanUpdateGlobalReputerWhitelistResponse struct {
	CanUpdateGlobalReputerWhitelist bool `protobuf:"varint,1,opt,name=can_update_global_reputer_whitelist,json=canUpdateGlobalReputerWhitelist,proto3" json:"can_update_global_reputer_whitelist,omitempty"`
}

func (m *CanUpdateGlobalReputerWhitelistResponse) Reset() {
	*m = CanUpdateGlobalReputerWhitelistResponse{}
}
func (m *CanUpdateGlobalReputerWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*CanUpdateGlobalReputerWhitelistResponse) ProtoMessage()    {}
func (*CanUpdateGlobalReputerWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{23}
}
func (m *CanUpdateGlobalReputerWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateGlobalReputerWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateGlobalReputerWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateGlobalReputerWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateGlobalReputerWhitelistResponse.Merge(m, src)
}
func (m *CanUpdateGlobalReputerWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateGlobalReputerWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateGlobalReputerWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateGlobalReputerWhitelistResponse proto.InternalMessageInfo

func (m *CanUpdateGlobalReputerWhitelistResponse) GetCanUpdateGlobalReputerWhitelist() bool {
	if m != nil {
		return m.CanUpdateGlobalReputerWhitelist
	}
	return false
}

type CanUpdateParamsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CanUpdateParamsRequest) Reset()         { *m = CanUpdateParamsRequest{} }
func (m *CanUpdateParamsRequest) String() string { return proto.CompactTextString(m) }
func (*CanUpdateParamsRequest) ProtoMessage()    {}
func (*CanUpdateParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{24}
}
func (m *CanUpdateParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateParamsRequest.Merge(m, src)
}
func (m *CanUpdateParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateParamsRequest proto.InternalMessageInfo

func (m *CanUpdateParamsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CanUpdateParamsResponse struct {
	CanUpdateParams bool `protobuf:"varint,1,opt,name=can_update_params,json=canUpdateParams,proto3" json:"can_update_params,omitempty"`
}

func (m *CanUpdateParamsResponse) Reset()         { *m = CanUpdateParamsResponse{} }
func (m *CanUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*CanUpdateParamsResponse) ProtoMessage()    {}
func (*CanUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{25}
}
func (m *CanUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateParamsResponse.Merge(m, src)
}
func (m *CanUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateParamsResponse proto.InternalMessageInfo

func (m *CanUpdateParamsResponse) GetCanUpdateParams() bool {
	if m != nil {
		return m.CanUpdateParams
	}
	return false
}

type CanUpdateTopicWhitelistRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CanUpdateTopicWhitelistRequest) Reset()         { *m = CanUpdateTopicWhitelistRequest{} }
func (m *CanUpdateTopicWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*CanUpdateTopicWhitelistRequest) ProtoMessage()    {}
func (*CanUpdateTopicWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{26}
}
func (m *CanUpdateTopicWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateTopicWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateTopicWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateTopicWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateTopicWhitelistRequest.Merge(m, src)
}
func (m *CanUpdateTopicWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateTopicWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateTopicWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateTopicWhitelistRequest proto.InternalMessageInfo

func (m *CanUpdateTopicWhitelistRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *CanUpdateTopicWhitelistRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CanUpdateTopicWhitelistResponse struct {
	CanUpdateTopicWhitelist bool `protobuf:"varint,1,opt,name=can_update_topic_whitelist,json=canUpdateTopicWhitelist,proto3" json:"can_update_topic_whitelist,omitempty"`
}

func (m *CanUpdateTopicWhitelistResponse) Reset()         { *m = CanUpdateTopicWhitelistResponse{} }
func (m *CanUpdateTopicWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*CanUpdateTopicWhitelistResponse) ProtoMessage()    {}
func (*CanUpdateTopicWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{27}
}
func (m *CanUpdateTopicWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpdateTopicWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpdateTopicWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpdateTopicWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpdateTopicWhitelistResponse.Merge(m, src)
}
func (m *CanUpdateTopicWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *CanUpdateTopicWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpdateTopicWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpdateTopicWhitelistResponse proto.InternalMessageInfo

func (m *CanUpdateTopicWhitelistResponse) GetCanUpdateTopicWhitelist() bool {
	if m != nil {
		return m.CanUpdateTopicWhitelist
	}
	return false
}

type CanCreateTopicRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CanCreateTopicRequest) Reset()         { *m = CanCreateTopicRequest{} }
func (m *CanCreateTopicRequest) String() string { return proto.CompactTextString(m) }
func (*CanCreateTopicRequest) ProtoMessage()    {}
func (*CanCreateTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{28}
}
func (m *CanCreateTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanCreateTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanCreateTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanCreateTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanCreateTopicRequest.Merge(m, src)
}
func (m *CanCreateTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *CanCreateTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CanCreateTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CanCreateTopicRequest proto.InternalMessageInfo

func (m *CanCreateTopicRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CanCreateTopicResponse struct {
	CanCreateTopic bool `protobuf:"varint,1,opt,name=can_create_topic,json=canCreateTopic,proto3" json:"can_create_topic,omitempty"`
}

func (m *CanCreateTopicResponse) Reset()         { *m = CanCreateTopicResponse{} }
func (m *CanCreateTopicResponse) String() string { return proto.CompactTextString(m) }
func (*CanCreateTopicResponse) ProtoMessage()    {}
func (*CanCreateTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{29}
}
func (m *CanCreateTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanCreateTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanCreateTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanCreateTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanCreateTopicResponse.Merge(m, src)
}
func (m *CanCreateTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *CanCreateTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CanCreateTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CanCreateTopicResponse proto.InternalMessageInfo

func (m *CanCreateTopicResponse) GetCanCreateTopic() bool {
	if m != nil {
		return m.CanCreateTopic
	}
	return false
}

type CanSubmitWorkerPayloadRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CanSubmitWorkerPayloadRequest) Reset()         { *m = CanSubmitWorkerPayloadRequest{} }
func (m *CanSubmitWorkerPayloadRequest) String() string { return proto.CompactTextString(m) }
func (*CanSubmitWorkerPayloadRequest) ProtoMessage()    {}
func (*CanSubmitWorkerPayloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{30}
}
func (m *CanSubmitWorkerPayloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanSubmitWorkerPayloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanSubmitWorkerPayloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanSubmitWorkerPayloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanSubmitWorkerPayloadRequest.Merge(m, src)
}
func (m *CanSubmitWorkerPayloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *CanSubmitWorkerPayloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CanSubmitWorkerPayloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CanSubmitWorkerPayloadRequest proto.InternalMessageInfo

func (m *CanSubmitWorkerPayloadRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *CanSubmitWorkerPayloadRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CanSubmitWorkerPayloadResponse struct {
	CanSubmitWorkerPayload bool `protobuf:"varint,1,opt,name=can_submit_worker_payload,json=canSubmitWorkerPayload,proto3" json:"can_submit_worker_payload,omitempty"`
}

func (m *CanSubmitWorkerPayloadResponse) Reset()         { *m = CanSubmitWorkerPayloadResponse{} }
func (m *CanSubmitWorkerPayloadResponse) String() string { return proto.CompactTextString(m) }
func (*CanSubmitWorkerPayloadResponse) ProtoMessage()    {}
func (*CanSubmitWorkerPayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{31}
}
func (m *CanSubmitWorkerPayloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanSubmitWorkerPayloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanSubmitWorkerPayloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanSubmitWorkerPayloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanSubmitWorkerPayloadResponse.Merge(m, src)
}
func (m *CanSubmitWorkerPayloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *CanSubmitWorkerPayloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CanSubmitWorkerPayloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CanSubmitWorkerPayloadResponse proto.InternalMessageInfo

func (m *CanSubmitWorkerPayloadResponse) GetCanSubmitWorkerPayload() bool {
	if m != nil {
		return m.CanSubmitWorkerPayload
	}
	return false
}

type CanSubmitReputerPayloadRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CanSubmitReputerPayloadRequest) Reset()         { *m = CanSubmitReputerPayloadRequest{} }
func (m *CanSubmitReputerPayloadRequest) String() string { return proto.CompactTextString(m) }
func (*CanSubmitReputerPayloadRequest) ProtoMessage()    {}
func (*CanSubmitReputerPayloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{32}
}
func (m *CanSubmitReputerPayloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanSubmitReputerPayloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanSubmitReputerPayloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanSubmitReputerPayloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanSubmitReputerPayloadRequest.Merge(m, src)
}
func (m *CanSubmitReputerPayloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *CanSubmitReputerPayloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CanSubmitReputerPayloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CanSubmitReputerPayloadRequest proto.InternalMessageInfo

func (m *CanSubmitReputerPayloadRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *CanSubmitReputerPayloadRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CanSubmitReputerPayloadResponse struct {
	CanSubmitReputerPayload bool `protobuf:"varint,1,opt,name=can_submit_reputer_payload,json=canSubmitReputerPayload,proto3" json:"can_submit_reputer_payload,omitempty"`
}

func (m *CanSubmitReputerPayloadResponse) Reset()         { *m = CanSubmitReputerPayloadResponse{} }
func (m *CanSubmitReputerPayloadResponse) String() string { return proto.CompactTextString(m) }
func (*CanSubmitReputerPayloadResponse) ProtoMessage()    {}
func (*CanSubmitReputerPayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{33}
}
func (m *CanSubmitReputerPayloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanSubmitReputerPayloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanSubmitReputerPayloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanSubmitReputerPayloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanSubmitReputerPayloadResponse.Merge(m, src)
}
func (m *CanSubmitReputerPayloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *CanSubmitReputerPayloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CanSubmitReputerPayloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CanSubmitReputerPayloadResponse proto.InternalMessageInfo

func (m *CanSubmitReputerPayloadResponse) GetCanSubmitReputerPayload() bool {
	if m != nil {
		return m.CanSubmitReputerPayload
	}
	return false
}

type GetCountInfererInclusionsInTopicRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Inferer string `protobuf:"bytes,2,opt,name=inferer,proto3" json:"inferer,omitempty"`
}

func (m *GetCountInfererInclusionsInTopicRequest) Reset() {
	*m = GetCountInfererInclusionsInTopicRequest{}
}
func (m *GetCountInfererInclusionsInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*GetCountInfererInclusionsInTopicRequest) ProtoMessage()    {}
func (*GetCountInfererInclusionsInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{34}
}
func (m *GetCountInfererInclusionsInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCountInfererInclusionsInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCountInfererInclusionsInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCountInfererInclusionsInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountInfererInclusionsInTopicRequest.Merge(m, src)
}
func (m *GetCountInfererInclusionsInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCountInfererInclusionsInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountInfererInclusionsInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountInfererInclusionsInTopicRequest proto.InternalMessageInfo

func (m *GetCountInfererInclusionsInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetCountInfererInclusionsInTopicRequest) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

type GetCountInfererInclusionsInTopicResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GetCountInfererInclusionsInTopicResponse) Reset() {
	*m = GetCountInfererInclusionsInTopicResponse{}
}
func (m *GetCountInfererInclusionsInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*GetCountInfererInclusionsInTopicResponse) ProtoMessage()    {}
func (*GetCountInfererInclusionsInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{35}
}
func (m *GetCountInfererInclusionsInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCountInfererInclusionsInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCountInfererInclusionsInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCountInfererInclusionsInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountInfererInclusionsInTopicResponse.Merge(m, src)
}
func (m *GetCountInfererInclusionsInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCountInfererInclusionsInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountInfererInclusionsInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountInfererInclusionsInTopicResponse proto.InternalMessageInfo

func (m *GetCountInfererInclusionsInTopicResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetCountForecasterInclusionsInTopicRequest struct {
	TopicId    uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Forecaster string `protobuf:"bytes,2,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
}

func (m *GetCountForecasterInclusionsInTopicRequest) Reset() {
	*m = GetCountForecasterInclusionsInTopicRequest{}
}
func (m *GetCountForecasterInclusionsInTopicRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetCountForecasterInclusionsInTopicRequest) ProtoMessage() {}
func (*GetCountForecasterInclusionsInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{36}
}
func (m *GetCountForecasterInclusionsInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCountForecasterInclusionsInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCountForecasterInclusionsInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCountForecasterInclusionsInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountForecasterInclusionsInTopicRequest.Merge(m, src)
}
func (m *GetCountForecasterInclusionsInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCountForecasterInclusionsInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountForecasterInclusionsInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountForecasterInclusionsInTopicRequest proto.InternalMessageInfo

func (m *GetCountForecasterInclusionsInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetCountForecasterInclusionsInTopicRequest) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

type GetCountForecasterInclusionsInTopicResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GetCountForecasterInclusionsInTopicResponse) Reset() {
	*m = GetCountForecasterInclusionsInTopicResponse{}
}
func (m *GetCountForecasterInclusionsInTopicResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetCountForecasterInclusionsInTopicResponse) ProtoMessage() {}
func (*GetCountForecasterInclusionsInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{37}
}
func (m *GetCountForecasterInclusionsInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCountForecasterInclusionsInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCountForecasterInclusionsInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCountForecasterInclusionsInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountForecasterInclusionsInTopicResponse.Merge(m, src)
}
func (m *GetCountForecasterInclusionsInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCountForecasterInclusionsInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountForecasterInclusionsInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountForecasterInclusionsInTopicResponse proto.InternalMessageInfo

func (m *GetCountForecasterInclusionsInTopicResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetNaiveInfererNetworkRegretRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Inferer string `protobuf:"bytes,2,opt,name=inferer,proto3" json:"inferer,omitempty"`
}

func (m *GetNaiveInfererNetworkRegretRequest) Reset()         { *m = GetNaiveInfererNetworkRegretRequest{} }
func (m *GetNaiveInfererNetworkRegretRequest) String() string { return proto.CompactTextString(m) }
func (*GetNaiveInfererNetworkRegretRequest) ProtoMessage()    {}
func (*GetNaiveInfererNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{38}
}
func (m *GetNaiveInfererNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNaiveInfererNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNaiveInfererNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNaiveInfererNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNaiveInfererNetworkRegretRequest.Merge(m, src)
}
func (m *GetNaiveInfererNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNaiveInfererNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNaiveInfererNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNaiveInfererNetworkRegretRequest proto.InternalMessageInfo

func (m *GetNaiveInfererNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetNaiveInfererNetworkRegretRequest) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

type GetNaiveInfererNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *GetNaiveInfererNetworkRegretResponse) Reset()         { *m = GetNaiveInfererNetworkRegretResponse{} }
func (m *GetNaiveInfererNetworkRegretResponse) String() string { return proto.CompactTextString(m) }
func (*GetNaiveInfererNetworkRegretResponse) ProtoMessage()    {}
func (*GetNaiveInfererNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{39}
}
func (m *GetNaiveInfererNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNaiveInfererNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNaiveInfererNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNaiveInfererNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNaiveInfererNetworkRegretResponse.Merge(m, src)
}
func (m *GetNaiveInfererNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNaiveInfererNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNaiveInfererNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNaiveInfererNetworkRegretResponse proto.InternalMessageInfo

func (m *GetNaiveInfererNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type GetOneOutInfererInfererNetworkRegretRequest struct {
	TopicId       uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	OneOutInferer string `protobuf:"bytes,2,opt,name=one_out_inferer,json=oneOutInferer,proto3" json:"one_out_inferer,omitempty"`
	Inferer       string `protobuf:"bytes,3,opt,name=inferer,proto3" json:"inferer,omitempty"`
}

func (m *GetOneOutInfererInfererNetworkRegretRequest) Reset() {
	*m = GetOneOutInfererInfererNetworkRegretRequest{}
}
func (m *GetOneOutInfererInfererNetworkRegretRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetOneOutInfererInfererNetworkRegretRequest) ProtoMessage() {}
func (*GetOneOutInfererInfererNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{40}
}
func (m *GetOneOutInfererInfererNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneOutInfererInfererNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneOutInfererInfererNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneOutInfererInfererNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneOutInfererInfererNetworkRegretRequest.Merge(m, src)
}
func (m *GetOneOutInfererInfererNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOneOutInfererInfererNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneOutInfererInfererNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneOutInfererInfererNetworkRegretRequest proto.InternalMessageInfo

func (m *GetOneOutInfererInfererNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetOneOutInfererInfererNetworkRegretRequest) GetOneOutInferer() string {
	if m != nil {
		return m.OneOutInferer
	}
	return ""
}

func (m *GetOneOutInfererInfererNetworkRegretRequest) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

type GetOneOutInfererInfererNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *GetOneOutInfererInfererNetworkRegretResponse) Reset() {
	*m = GetOneOutInfererInfererNetworkRegretResponse{}
}
func (m *GetOneOutInfererInfererNetworkRegretResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetOneOutInfererInfererNetworkRegretResponse) ProtoMessage() {}
func (*GetOneOutInfererInfererNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{41}
}
func (m *GetOneOutInfererInfererNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneOutInfererInfererNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneOutInfererInfererNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneOutInfererInfererNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneOutInfererInfererNetworkRegretResponse.Merge(m, src)
}
func (m *GetOneOutInfererInfererNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOneOutInfererInfererNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneOutInfererInfererNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneOutInfererInfererNetworkRegretResponse proto.InternalMessageInfo

func (m *GetOneOutInfererInfererNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type GetOneOutInfererForecasterNetworkRegretRequest struct {
	TopicId       uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	OneOutInferer string `protobuf:"bytes,2,opt,name=one_out_inferer,json=oneOutInferer,proto3" json:"one_out_inferer,omitempty"`
	Forecaster    string `protobuf:"bytes,3,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
}

func (m *GetOneOutInfererForecasterNetworkRegretRequest) Reset() {
	*m = GetOneOutInfererForecasterNetworkRegretRequest{}
}
func (m *GetOneOutInfererForecasterNetworkRegretRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetOneOutInfererForecasterNetworkRegretRequest) ProtoMessage() {}
func (*GetOneOutInfererForecasterNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{42}
}
func (m *GetOneOutInfererForecasterNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneOutInfererForecasterNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneOutInfererForecasterNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneOutInfererForecasterNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneOutInfererForecasterNetworkRegretRequest.Merge(m, src)
}
func (m *GetOneOutInfererForecasterNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOneOutInfererForecasterNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneOutInfererForecasterNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneOutInfererForecasterNetworkRegretRequest proto.InternalMessageInfo

func (m *GetOneOutInfererForecasterNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetOneOutInfererForecasterNetworkRegretRequest) GetOneOutInferer() string {
	if m != nil {
		return m.OneOutInferer
	}
	return ""
}

func (m *GetOneOutInfererForecasterNetworkRegretRequest) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

type GetOneOutInfererForecasterNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *GetOneOutInfererForecasterNetworkRegretResponse) Reset() {
	*m = GetOneOutInfererForecasterNetworkRegretResponse{}
}
func (m *GetOneOutInfererForecasterNetworkRegretResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetOneOutInfererForecasterNetworkRegretResponse) ProtoMessage() {}
func (*GetOneOutInfererForecasterNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{43}
}
func (m *GetOneOutInfererForecasterNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneOutInfererForecasterNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneOutInfererForecasterNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneOutInfererForecasterNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneOutInfererForecasterNetworkRegretResponse.Merge(m, src)
}
func (m *GetOneOutInfererForecasterNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOneOutInfererForecasterNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneOutInfererForecasterNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneOutInfererForecasterNetworkRegretResponse proto.InternalMessageInfo

func (m *GetOneOutInfererForecasterNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type GetOneOutForecasterInfererNetworkRegretRequest struct {
	TopicId          uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	OneOutForecaster string `protobuf:"bytes,2,opt,name=one_out_forecaster,json=oneOutForecaster,proto3" json:"one_out_forecaster,omitempty"`
	Inferer          string `protobuf:"bytes,3,opt,name=inferer,proto3" json:"inferer,omitempty"`
}

func (m *GetOneOutForecasterInfererNetworkRegretRequest) Reset() {
	*m = GetOneOutForecasterInfererNetworkRegretRequest{}
}
func (m *GetOneOutForecasterInfererNetworkRegretRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetOneOutForecasterInfererNetworkRegretRequest) ProtoMessage() {}
func (*GetOneOutForecasterInfererNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{44}
}
func (m *GetOneOutForecasterInfererNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneOutForecasterInfererNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneOutForecasterInfererNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneOutForecasterInfererNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneOutForecasterInfererNetworkRegretRequest.Merge(m, src)
}
func (m *GetOneOutForecasterInfererNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOneOutForecasterInfererNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneOutForecasterInfererNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneOutForecasterInfererNetworkRegretRequest proto.InternalMessageInfo

func (m *GetOneOutForecasterInfererNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetOneOutForecasterInfererNetworkRegretRequest) GetOneOutForecaster() string {
	if m != nil {
		return m.OneOutForecaster
	}
	return ""
}

func (m *GetOneOutForecasterInfererNetworkRegretRequest) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

type GetOneOutForecasterInfererNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *GetOneOutForecasterInfererNetworkRegretResponse) Reset() {
	*m = GetOneOutForecasterInfererNetworkRegretResponse{}
}
func (m *GetOneOutForecasterInfererNetworkRegretResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetOneOutForecasterInfererNetworkRegretResponse) ProtoMessage() {}
func (*GetOneOutForecasterInfererNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{45}
}
func (m *GetOneOutForecasterInfererNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneOutForecasterInfererNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneOutForecasterInfererNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneOutForecasterInfererNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneOutForecasterInfererNetworkRegretResponse.Merge(m, src)
}
func (m *GetOneOutForecasterInfererNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOneOutForecasterInfererNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneOutForecasterInfererNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneOutForecasterInfererNetworkRegretResponse proto.InternalMessageInfo

func (m *GetOneOutForecasterInfererNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type GetOneOutForecasterForecasterNetworkRegretRequest struct {
	TopicId          uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	OneOutForecaster string `protobuf:"bytes,2,opt,name=one_out_forecaster,json=oneOutForecaster,proto3" json:"one_out_forecaster,omitempty"`
	Forecaster       string `protobuf:"bytes,3,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
}

func (m *GetOneOutForecasterForecasterNetworkRegretRequest) Reset() {
	*m = GetOneOutForecasterForecasterNetworkRegretRequest{}
}
func (m *GetOneOutForecasterForecasterNetworkRegretRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetOneOutForecasterForecasterNetworkRegretRequest) ProtoMessage() {}
func (*GetOneOutForecasterForecasterNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{46}
}
func (m *GetOneOutForecasterForecasterNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneOutForecasterForecasterNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneOutForecasterForecasterNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneOutForecasterForecasterNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneOutForecasterForecasterNetworkRegretRequest.Merge(m, src)
}
func (m *GetOneOutForecasterForecasterNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOneOutForecasterForecasterNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneOutForecasterForecasterNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneOutForecasterForecasterNetworkRegretRequest proto.InternalMessageInfo

func (m *GetOneOutForecasterForecasterNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetOneOutForecasterForecasterNetworkRegretRequest) GetOneOutForecaster() string {
	if m != nil {
		return m.OneOutForecaster
	}
	return ""
}

func (m *GetOneOutForecasterForecasterNetworkRegretRequest) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

type GetOneOutForecasterForecasterNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *GetOneOutForecasterForecasterNetworkRegretResponse) Reset() {
	*m = GetOneOutForecasterForecasterNetworkRegretResponse{}
}
func (m *GetOneOutForecasterForecasterNetworkRegretResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetOneOutForecasterForecasterNetworkRegretResponse) ProtoMessage() {}
func (*GetOneOutForecasterForecasterNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{47}
}
func (m *GetOneOutForecasterForecasterNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneOutForecasterForecasterNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneOutForecasterForecasterNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneOutForecasterForecasterNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneOutForecasterForecasterNetworkRegretResponse.Merge(m, src)
}
func (m *GetOneOutForecasterForecasterNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOneOutForecasterForecasterNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneOutForecasterForecasterNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneOutForecasterForecasterNetworkRegretResponse proto.InternalMessageInfo

func (m *GetOneOutForecasterForecasterNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

// GetParamsRequest is the request type for the Get/Params RPC method.
type GetParamsRequest struct {
}

func (m *GetParamsRequest) Reset()         { *m = GetParamsRequest{} }
func (m *GetParamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetParamsRequest) ProtoMessage()    {}
func (*GetParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{48}
}
func (m *GetParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetParamsRequest.Merge(m, src)
}
func (m *GetParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetParamsRequest proto.InternalMessageInfo

// GetParamsResponse is the response type for the Get/Params RPC method.
type GetParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *GetParamsResponse) Reset()         { *m = GetParamsResponse{} }
func (m *GetParamsResponse) String() string { return proto.CompactTextString(m) }
func (*GetParamsResponse) ProtoMessage()    {}
func (*GetParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{49}
}
func (m *GetParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetParamsResponse.Merge(m, src)
}
func (m *GetParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetParamsResponse proto.InternalMessageInfo

func (m *GetParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Total Stake returns the total amount of stake in the system
type GetTotalStakeRequest struct {
}

func (m *GetTotalStakeRequest) Reset()         { *m = GetTotalStakeRequest{} }
func (m *GetTotalStakeRequest) String() string { return proto.CompactTextString(m) }
func (*GetTotalStakeRequest) ProtoMessage()    {}
func (*GetTotalStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{50}
}
func (m *GetTotalStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalStakeRequest.Merge(m, src)
}
func (m *GetTotalStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalStakeRequest proto.InternalMessageInfo

// Total Stake returns the total amount of stake in the system
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
type GetTotalStakeResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *GetTotalStakeResponse) Reset()         { *m = GetTotalStakeResponse{} }
func (m *GetTotalStakeResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalStakeResponse) ProtoMessage()    {}
func (*GetTotalStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{51}
}
func (m *GetTotalStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalStakeResponse.Merge(m, src)
}
func (m *GetTotalStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalStakeResponse proto.InternalMessageInfo

type GetReputerStakeInTopicRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TopicId uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetReputerStakeInTopicRequest) Reset()         { *m = GetReputerStakeInTopicRequest{} }
func (m *GetReputerStakeInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*GetReputerStakeInTopicRequest) ProtoMessage()    {}
func (*GetReputerStakeInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{52}
}
func (m *GetReputerStakeInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputerStakeInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputerStakeInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputerStakeInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputerStakeInTopicRequest.Merge(m, src)
}
func (m *GetReputerStakeInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReputerStakeInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputerStakeInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputerStakeInTopicRequest proto.InternalMessageInfo

func (m *GetReputerStakeInTopicRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetReputerStakeInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetReputerStakeInTopicResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *GetReputerStakeInTopicResponse) Reset()         { *m = GetReputerStakeInTopicResponse{} }
func (m *GetReputerStakeInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*GetReputerStakeInTopicResponse) ProtoMessage()    {}
func (*GetReputerStakeInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{53}
}
func (m *GetReputerStakeInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputerStakeInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputerStakeInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputerStakeInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputerStakeInTopicResponse.Merge(m, src)
}
func (m *GetReputerStakeInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReputerStakeInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputerStakeInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputerStakeInTopicResponse proto.InternalMessageInfo

type GetMultiReputerStakeInTopicRequest struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	TopicId   uint64   `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetMultiReputerStakeInTopicRequest) Reset()         { *m = GetMultiReputerStakeInTopicRequest{} }
func (m *GetMultiReputerStakeInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*GetMultiReputerStakeInTopicRequest) ProtoMessage()    {}
func (*GetMultiReputerStakeInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{54}
}
func (m *GetMultiReputerStakeInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiReputerStakeInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiReputerStakeInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMultiReputerStakeInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiReputerStakeInTopicRequest.Merge(m, src)
}
func (m *GetMultiReputerStakeInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiReputerStakeInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiReputerStakeInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiReputerStakeInTopicRequest proto.InternalMessageInfo

func (m *GetMultiReputerStakeInTopicRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *GetMultiReputerStakeInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetMultiReputerStakeInTopicResponse struct {
	Amounts []*StakeInfo `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty"`
}

func (m *GetMultiReputerStakeInTopicResponse) Reset()         { *m = GetMultiReputerStakeInTopicResponse{} }
func (m *GetMultiReputerStakeInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*GetMultiReputerStakeInTopicResponse) ProtoMessage()    {}
func (*GetMultiReputerStakeInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{55}
}
func (m *GetMultiReputerStakeInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiReputerStakeInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiReputerStakeInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMultiReputerStakeInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiReputerStakeInTopicResponse.Merge(m, src)
}
func (m *GetMultiReputerStakeInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiReputerStakeInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiReputerStakeInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiReputerStakeInTopicResponse proto.InternalMessageInfo

func (m *GetMultiReputerStakeInTopicResponse) GetAmounts() []*StakeInfo {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type GetStakeFromReputerInTopicInSelfRequest struct {
	ReputerAddress string `protobuf:"bytes,1,opt,name=reputer_address,json=reputerAddress,proto3" json:"reputer_address,omitempty"`
	TopicId        uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetStakeFromReputerInTopicInSelfRequest) Reset() {
	*m = GetStakeFromReputerInTopicInSelfRequest{}
}
func (m *GetStakeFromReputerInTopicInSelfRequest) String() string { return proto.CompactTextString(m) }
func (*GetStakeFromReputerInTopicInSelfRequest) ProtoMessage()    {}
func (*GetStakeFromReputerInTopicInSelfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{56}
}
func (m *GetStakeFromReputerInTopicInSelfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeFromReputerInTopicInSelfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeFromReputerInTopicInSelfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeFromReputerInTopicInSelfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeFromReputerInTopicInSelfRequest.Merge(m, src)
}
func (m *GetStakeFromReputerInTopicInSelfRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeFromReputerInTopicInSelfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeFromReputerInTopicInSelfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeFromReputerInTopicInSelfRequest proto.InternalMessageInfo

func (m *GetStakeFromReputerInTopicInSelfRequest) GetReputerAddress() string {
	if m != nil {
		return m.ReputerAddress
	}
	return ""
}

func (m *GetStakeFromReputerInTopicInSelfRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetStakeFromReputerInTopicInSelfResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *GetStakeFromReputerInTopicInSelfResponse) Reset() {
	*m = GetStakeFromReputerInTopicInSelfResponse{}
}
func (m *GetStakeFromReputerInTopicInSelfResponse) String() string { return proto.CompactTextString(m) }
func (*GetStakeFromReputerInTopicInSelfResponse) ProtoMessage()    {}
func (*GetStakeFromReputerInTopicInSelfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{57}
}
func (m *GetStakeFromReputerInTopicInSelfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeFromReputerInTopicInSelfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeFromReputerInTopicInSelfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeFromReputerInTopicInSelfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeFromReputerInTopicInSelfResponse.Merge(m, src)
}
func (m *GetStakeFromReputerInTopicInSelfResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeFromReputerInTopicInSelfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeFromReputerInTopicInSelfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeFromReputerInTopicInSelfResponse proto.InternalMessageInfo

type GetDelegateStakeInTopicInReputerRequest struct {
	ReputerAddress string `protobuf:"bytes,1,opt,name=reputer_address,json=reputerAddress,proto3" json:"reputer_address,omitempty"`
	TopicId        uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetDelegateStakeInTopicInReputerRequest) Reset() {
	*m = GetDelegateStakeInTopicInReputerRequest{}
}
func (m *GetDelegateStakeInTopicInReputerRequest) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakeInTopicInReputerRequest) ProtoMessage()    {}
func (*GetDelegateStakeInTopicInReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{58}
}
func (m *GetDelegateStakeInTopicInReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeInTopicInReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeInTopicInReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeInTopicInReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeInTopicInReputerRequest.Merge(m, src)
}
func (m *GetDelegateStakeInTopicInReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeInTopicInReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeInTopicInReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeInTopicInReputerRequest proto.InternalMessageInfo

func (m *GetDelegateStakeInTopicInReputerRequest) GetReputerAddress() string {
	if m != nil {
		return m.ReputerAddress
	}
	return ""
}

func (m *GetDelegateStakeInTopicInReputerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetDelegateStakeInTopicInReputerResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *GetDelegateStakeInTopicInReputerResponse) Reset() {
	*m = GetDelegateStakeInTopicInReputerResponse{}
}
func (m *GetDelegateStakeInTopicInReputerResponse) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakeInTopicInReputerResponse) ProtoMessage()    {}
func (*GetDelegateStakeInTopicInReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{59}
}
func (m *GetDelegateStakeInTopicInReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeInTopicInReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeInTopicInReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeInTopicInReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeInTopicInReputerResponse.Merge(m, src)
}
func (m *GetDelegateStakeInTopicInReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeInTopicInReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeInTopicInReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeInTopicInReputerResponse proto.InternalMessageInfo

type GetStakeFromDelegatorInTopicInReputerRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ReputerAddress   string `protobuf:"bytes,2,opt,name=reputer_address,json=reputerAddress,proto3" json:"reputer_address,omitempty"`
	TopicId          uint64 `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetStakeFromDelegatorInTopicInReputerRequest) Reset() {
	*m = GetStakeFromDelegatorInTopicInReputerRequest{}
}
func (m *GetStakeFromDelegatorInTopicInReputerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetStakeFromDelegatorInTopicInReputerRequest) ProtoMessage() {}
func (*GetStakeFromDelegatorInTopicInReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{60}
}
func (m *GetStakeFromDelegatorInTopicInReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeFromDelegatorInTopicInReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeFromDelegatorInTopicInReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeFromDelegatorInTopicInReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeFromDelegatorInTopicInReputerRequest.Merge(m, src)
}
func (m *GetStakeFromDelegatorInTopicInReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeFromDelegatorInTopicInReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeFromDelegatorInTopicInReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeFromDelegatorInTopicInReputerRequest proto.InternalMessageInfo

func (m *GetStakeFromDelegatorInTopicInReputerRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *GetStakeFromDelegatorInTopicInReputerRequest) GetReputerAddress() string {
	if m != nil {
		return m.ReputerAddress
	}
	return ""
}

func (m *GetStakeFromDelegatorInTopicInReputerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetStakeFromDelegatorInTopicInReputerResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *GetStakeFromDelegatorInTopicInReputerResponse) Reset() {
	*m = GetStakeFromDelegatorInTopicInReputerResponse{}
}
func (m *GetStakeFromDelegatorInTopicInReputerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetStakeFromDelegatorInTopicInReputerResponse) ProtoMessage() {}
func (*GetStakeFromDelegatorInTopicInReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{61}
}
func (m *GetStakeFromDelegatorInTopicInReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeFromDelegatorInTopicInReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeFromDelegatorInTopicInReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeFromDelegatorInTopicInReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeFromDelegatorInTopicInReputerResponse.Merge(m, src)
}
func (m *GetStakeFromDelegatorInTopicInReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeFromDelegatorInTopicInReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeFromDelegatorInTopicInReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeFromDelegatorInTopicInReputerResponse proto.InternalMessageInfo

type GetStakeFromDelegatorInTopicRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	TopicId          uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetStakeFromDelegatorInTopicRequest) Reset()         { *m = GetStakeFromDelegatorInTopicRequest{} }
func (m *GetStakeFromDelegatorInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*GetStakeFromDelegatorInTopicRequest) ProtoMessage()    {}
func (*GetStakeFromDelegatorInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{62}
}
func (m *GetStakeFromDelegatorInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeFromDelegatorInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeFromDelegatorInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeFromDelegatorInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeFromDelegatorInTopicRequest.Merge(m, src)
}
func (m *GetStakeFromDelegatorInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeFromDelegatorInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeFromDelegatorInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeFromDelegatorInTopicRequest proto.InternalMessageInfo

func (m *GetStakeFromDelegatorInTopicRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *GetStakeFromDelegatorInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetStakeFromDelegatorInTopicResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *GetStakeFromDelegatorInTopicResponse) Reset()         { *m = GetStakeFromDelegatorInTopicResponse{} }
func (m *GetStakeFromDelegatorInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*GetStakeFromDelegatorInTopicResponse) ProtoMessage()    {}
func (*GetStakeFromDelegatorInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{63}
}
func (m *GetStakeFromDelegatorInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeFromDelegatorInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeFromDelegatorInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeFromDelegatorInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeFromDelegatorInTopicResponse.Merge(m, src)
}
func (m *GetStakeFromDelegatorInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeFromDelegatorInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeFromDelegatorInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeFromDelegatorInTopicResponse proto.InternalMessageInfo

type GetTopicStakeRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetTopicStakeRequest) Reset()         { *m = GetTopicStakeRequest{} }
func (m *GetTopicStakeRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicStakeRequest) ProtoMessage()    {}
func (*GetTopicStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{64}
}
func (m *GetTopicStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicStakeRequest.Merge(m, src)
}
func (m *GetTopicStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicStakeRequest proto.InternalMessageInfo

func (m *GetTopicStakeRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetTopicStakeResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *GetTopicStakeResponse) Reset()         { *m = GetTopicStakeResponse{} }
func (m *GetTopicStakeResponse) String() string { return proto.CompactTextString(m) }
func (*GetTopicStakeResponse) ProtoMessage()    {}
func (*GetTopicStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{65}
}
func (m *GetTopicStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicStakeResponse.Merge(m, src)
}
func (m *GetTopicStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicStakeResponse proto.InternalMessageInfo

type GetNetworkLossBundleAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetNetworkLossBundleAtBlockRequest) Reset()         { *m = GetNetworkLossBundleAtBlockRequest{} }
func (m *GetNetworkLossBundleAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetNetworkLossBundleAtBlockRequest) ProtoMessage()    {}
func (*GetNetworkLossBundleAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{66}
}
func (m *GetNetworkLossBundleAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkLossBundleAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkLossBundleAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkLossBundleAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkLossBundleAtBlockRequest.Merge(m, src)
}
func (m *GetNetworkLossBundleAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkLossBundleAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkLossBundleAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkLossBundleAtBlockRequest proto.InternalMessageInfo

func (m *GetNetworkLossBundleAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetNetworkLossBundleAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetNetworkLossBundleAtBlockResponse struct {
	LossBundle *ValueBundle `protobuf:"bytes,1,opt,name=loss_bundle,json=lossBundle,proto3" json:"loss_bundle,omitempty"`
}

func (m *GetNetworkLossBundleAtBlockResponse) Reset()         { *m = GetNetworkLossBundleAtBlockResponse{} }
func (m *GetNetworkLossBundleAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetNetworkLossBundleAtBlockResponse) ProtoMessage()    {}
func (*GetNetworkLossBundleAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{67}
}
func (m *GetNetworkLossBundleAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkLossBundleAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkLossBundleAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkLossBundleAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkLossBundleAtBlockResponse.Merge(m, src)
}
func (m *GetNetworkLossBundleAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkLossBundleAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkLossBundleAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkLossBundleAtBlockResponse proto.InternalMessageInfo

func (m *GetNetworkLossBundleAtBlockResponse) GetLossBundle() *ValueBundle {
	if m != nil {
		return m.LossBundle
	}
	return nil
}

type GetNextTopicIdRequest struct {
}

func (m *GetNextTopicIdRequest) Reset()         { *m = GetNextTopicIdRequest{} }
func (m *GetNextTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetNextTopicIdRequest) ProtoMessage()    {}
func (*GetNextTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{68}
}
func (m *GetNextTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNextTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNextTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNextTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextTopicIdRequest.Merge(m, src)
}
func (m *GetNextTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNextTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextTopicIdRequest proto.InternalMessageInfo

type GetNextTopicIdResponse struct {
	NextTopicId uint64 `protobuf:"varint,1,opt,name=next_topic_id,json=nextTopicId,proto3" json:"next_topic_id,omitempty"`
}

func (m *GetNextTopicIdResponse) Reset()         { *m = GetNextTopicIdResponse{} }
func (m *GetNextTopicIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetNextTopicIdResponse) ProtoMessage()    {}
func (*GetNextTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{69}
}
func (m *GetNextTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNextTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNextTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNextTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextTopicIdResponse.Merge(m, src)
}
func (m *GetNextTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNextTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextTopicIdResponse proto.InternalMessageInfo

func (m *GetNextTopicIdResponse) GetNextTopicId() uint64 {
	if m != nil {
		return m.NextTopicId
	}
	return 0
}

type GetTopicRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetTopicRequest) Reset()         { *m = GetTopicRequest{} }
func (m *GetTopicRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicRequest) ProtoMessage()    {}
func (*GetTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{70}
}
func (m *GetTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicRequest.Merge(m, src)
}
func (m *GetTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicRequest proto.InternalMessageInfo

func (m *GetTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetTopicResponse struct {
	Topic            *Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Weight           string `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	EffectiveRevenue string `protobuf:"bytes,3,opt,name=effective_revenue,json=effectiveRevenue,proto3" json:"effective_revenue,omitempty"`
}

func (m *GetTopicResponse) Reset()         { *m = GetTopicResponse{} }
func (m *GetTopicResponse) String() string { return proto.CompactTextString(m) }
func (*GetTopicResponse) ProtoMessage()    {}
func (*GetTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{71}
}
func (m *GetTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicResponse.Merge(m, src)
}
func (m *GetTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicResponse proto.InternalMessageInfo

func (m *GetTopicResponse) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *GetTopicResponse) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *GetTopicResponse) GetEffectiveRevenue() string {
	if m != nil {
		return m.EffectiveRevenue
	}
	return ""
}

type GetActiveTopicsRequest struct {
	Pagination *SimpleCursorPaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetActiveTopicsRequest) Reset()         { *m = GetActiveTopicsRequest{} }
func (m *GetActiveTopicsRequest) String() string { return proto.CompactTextString(m) }
func (*GetActiveTopicsRequest) ProtoMessage()    {}
func (*GetActiveTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{72}
}
func (m *GetActiveTopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveTopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveTopicsRequest.Merge(m, src)
}
func (m *GetActiveTopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveTopicsRequest proto.InternalMessageInfo

func (m *GetActiveTopicsRequest) GetPagination() *SimpleCursorPaginationRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type GetActiveTopicsResponse struct {
	Topics     []*Topic                        `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	Pagination *SimpleCursorPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetActiveTopicsResponse) Reset()         { *m = GetActiveTopicsResponse{} }
func (m *GetActiveTopicsResponse) String() string { return proto.CompactTextString(m) }
func (*GetActiveTopicsResponse) ProtoMessage()    {}
func (*GetActiveTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{73}
}
func (m *GetActiveTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveTopicsResponse.Merge(m, src)
}
func (m *GetActiveTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveTopicsResponse proto.InternalMessageInfo

func (m *GetActiveTopicsResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *GetActiveTopicsResponse) GetPagination() *SimpleCursorPaginationResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Returns the inferences on a topic posted at a block height
type GetInferencesAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetInferencesAtBlockRequest) Reset()         { *m = GetInferencesAtBlockRequest{} }
func (m *GetInferencesAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetInferencesAtBlockRequest) ProtoMessage()    {}
func (*GetInferencesAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{74}
}
func (m *GetInferencesAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInferencesAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInferencesAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInferencesAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInferencesAtBlockRequest.Merge(m, src)
}
func (m *GetInferencesAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInferencesAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInferencesAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInferencesAtBlockRequest proto.InternalMessageInfo

func (m *GetInferencesAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetInferencesAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// Returns the inferences on a topic posted at a block height
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
type GetInferencesAtBlockResponse struct {
	Inferences *Inferences `protobuf:"bytes,1,opt,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *GetInferencesAtBlockResponse) Reset()         { *m = GetInferencesAtBlockResponse{} }
func (m *GetInferencesAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetInferencesAtBlockResponse) ProtoMessage()    {}
func (*GetInferencesAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{75}
}
func (m *GetInferencesAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInferencesAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInferencesAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInferencesAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInferencesAtBlockResponse.Merge(m, src)
}
func (m *GetInferencesAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInferencesAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInferencesAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInferencesAtBlockResponse proto.InternalMessageInfo

func (m *GetInferencesAtBlockResponse) GetInferences() *Inferences {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type GetLatestTopicInferencesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetLatestTopicInferencesRequest) Reset()         { *m = GetLatestTopicInferencesRequest{} }
func (m *GetLatestTopicInferencesRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestTopicInferencesRequest) ProtoMessage()    {}
func (*GetLatestTopicInferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{76}
}
func (m *GetLatestTopicInferencesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestTopicInferencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestTopicInferencesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestTopicInferencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestTopicInferencesRequest.Merge(m, src)
}
func (m *GetLatestTopicInferencesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestTopicInferencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestTopicInferencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestTopicInferencesRequest proto.InternalMessageInfo

func (m *GetLatestTopicInferencesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetLatestTopicInferencesResponse struct {
	Inferences  *Inferences `protobuf:"bytes,1,opt,name=inferences,proto3" json:"inferences,omitempty"`
	BlockHeight int64       `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetLatestTopicInferencesResponse) Reset()         { *m = GetLatestTopicInferencesResponse{} }
func (m *GetLatestTopicInferencesResponse) String() string { return proto.CompactTextString(m) }
func (*GetLatestTopicInferencesResponse) ProtoMessage()    {}
func (*GetLatestTopicInferencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{77}
}
func (m *GetLatestTopicInferencesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestTopicInferencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestTopicInferencesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestTopicInferencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestTopicInferencesResponse.Merge(m, src)
}
func (m *GetLatestTopicInferencesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestTopicInferencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestTopicInferencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestTopicInferencesResponse proto.InternalMessageInfo

func (m *GetLatestTopicInferencesResponse) GetInferences() *Inferences {
	if m != nil {
		return m.Inferences
	}
	return nil
}

func (m *GetLatestTopicInferencesResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// Returns the forecasts on a topic posted at a block height
type GetForecastsAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetForecastsAtBlockRequest) Reset()         { *m = GetForecastsAtBlockRequest{} }
func (m *GetForecastsAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetForecastsAtBlockRequest) ProtoMessage()    {}
func (*GetForecastsAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{78}
}
func (m *GetForecastsAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetForecastsAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetForecastsAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetForecastsAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetForecastsAtBlockRequest.Merge(m, src)
}
func (m *GetForecastsAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetForecastsAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetForecastsAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetForecastsAtBlockRequest proto.InternalMessageInfo

func (m *GetForecastsAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetForecastsAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// Returns the forecasts on a topic posted at a block height
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
type GetForecastsAtBlockResponse struct {
	Forecasts *Forecasts `protobuf:"bytes,1,opt,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (m *GetForecastsAtBlockResponse) Reset()         { *m = GetForecastsAtBlockResponse{} }
func (m *GetForecastsAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetForecastsAtBlockResponse) ProtoMessage()    {}
func (*GetForecastsAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{79}
}
func (m *GetForecastsAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetForecastsAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetForecastsAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetForecastsAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetForecastsAtBlockResponse.Merge(m, src)
}
func (m *GetForecastsAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetForecastsAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetForecastsAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetForecastsAtBlockResponse proto.InternalMessageInfo

func (m *GetForecastsAtBlockResponse) GetForecasts() *Forecasts {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

type GetWorkerLatestInferenceByTopicIdRequest struct {
	TopicId       uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	WorkerAddress string `protobuf:"bytes,2,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
}

func (m *GetWorkerLatestInferenceByTopicIdRequest) Reset() {
	*m = GetWorkerLatestInferenceByTopicIdRequest{}
}
func (m *GetWorkerLatestInferenceByTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkerLatestInferenceByTopicIdRequest) ProtoMessage()    {}
func (*GetWorkerLatestInferenceByTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{80}
}
func (m *GetWorkerLatestInferenceByTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerLatestInferenceByTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerLatestInferenceByTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerLatestInferenceByTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerLatestInferenceByTopicIdRequest.Merge(m, src)
}
func (m *GetWorkerLatestInferenceByTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerLatestInferenceByTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerLatestInferenceByTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerLatestInferenceByTopicIdRequest proto.InternalMessageInfo

func (m *GetWorkerLatestInferenceByTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetWorkerLatestInferenceByTopicIdRequest) GetWorkerAddress() string {
	if m != nil {
		return m.WorkerAddress
	}
	return ""
}

type GetWorkerLatestInferenceByTopicIdResponse struct {
	LatestInference *Inference `protobuf:"bytes,1,opt,name=latest_inference,json=latestInference,proto3" json:"latest_inference,omitempty"`
}

func (m *GetWorkerLatestInferenceByTopicIdResponse) Reset() {
	*m = GetWorkerLatestInferenceByTopicIdResponse{}
}
func (m *GetWorkerLatestInferenceByTopicIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetWorkerLatestInferenceByTopicIdResponse) ProtoMessage() {}
func (*GetWorkerLatestInferenceByTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{81}
}
func (m *GetWorkerLatestInferenceByTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerLatestInferenceByTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerLatestInferenceByTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerLatestInferenceByTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerLatestInferenceByTopicIdResponse.Merge(m, src)
}
func (m *GetWorkerLatestInferenceByTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerLatestInferenceByTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerLatestInferenceByTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerLatestInferenceByTopicIdResponse proto.InternalMessageInfo

func (m *GetWorkerLatestInferenceByTopicIdResponse) GetLatestInference() *Inference {
	if m != nil {
		return m.LatestInference
	}
	return nil
}

type GetWorkerNodeInfoRequest struct {
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetWorkerNodeInfoRequest) Reset()         { *m = GetWorkerNodeInfoRequest{} }
func (m *GetWorkerNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkerNodeInfoRequest) ProtoMessage()    {}
func (*GetWorkerNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{82}
}
func (m *GetWorkerNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerNodeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerNodeInfoRequest.Merge(m, src)
}
func (m *GetWorkerNodeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerNodeInfoRequest proto.InternalMessageInfo

func (m *GetWorkerNodeInfoRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetWorkerNodeInfoResponse struct {
	NodeInfo *OffchainNode `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
}

func (m *GetWorkerNodeInfoResponse) Reset()         { *m = GetWorkerNodeInfoResponse{} }
func (m *GetWorkerNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetWorkerNodeInfoResponse) ProtoMessage()    {}
func (*GetWorkerNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{83}
}
func (m *GetWorkerNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerNodeInfoResponse.Merge(m, src)
}
func (m *GetWorkerNodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerNodeInfoResponse proto.InternalMessageInfo

func (m *GetWorkerNodeInfoResponse) GetNodeInfo() *OffchainNode {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type GetReputerNodeInfoRequest struct {
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetReputerNodeInfoRequest) Reset()         { *m = GetReputerNodeInfoRequest{} }
func (m *GetReputerNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetReputerNodeInfoRequest) ProtoMessage()    {}
func (*GetReputerNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{84}
}
func (m *GetReputerNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputerNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputerNodeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputerNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputerNodeInfoRequest.Merge(m, src)
}
func (m *GetReputerNodeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReputerNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputerNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputerNodeInfoRequest proto.InternalMessageInfo

func (m *GetReputerNodeInfoRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetReputerNodeInfoResponse struct {
	NodeInfo *OffchainNode `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
}

func (m *GetReputerNodeInfoResponse) Reset()         { *m = GetReputerNodeInfoResponse{} }
func (m *GetReputerNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetReputerNodeInfoResponse) ProtoMessage()    {}
func (*GetReputerNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{85}
}
func (m *GetReputerNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputerNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputerNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputerNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputerNodeInfoResponse.Merge(m, src)
}
func (m *GetReputerNodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReputerNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputerNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputerNodeInfoResponse proto.InternalMessageInfo

func (m *GetReputerNodeInfoResponse) GetNodeInfo() *OffchainNode {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type GetNetworkInferencesAtBlockRequest struct {
	TopicId                  uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeightLastInference int64  `protobuf:"varint,2,opt,name=block_height_last_inference,json=blockHeightLastInference,proto3" json:"block_height_last_inference,omitempty"`
}

func (m *GetNetworkInferencesAtBlockRequest) Reset()         { *m = GetNetworkInferencesAtBlockRequest{} }
func (m *GetNetworkInferencesAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetNetworkInferencesAtBlockRequest) ProtoMessage()    {}
func (*GetNetworkInferencesAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{86}
}
func (m *GetNetworkInferencesAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkInferencesAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkInferencesAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkInferencesAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkInferencesAtBlockRequest.Merge(m, src)
}
func (m *GetNetworkInferencesAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkInferencesAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkInferencesAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkInferencesAtBlockRequest proto.InternalMessageInfo

func (m *GetNetworkInferencesAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetNetworkInferencesAtBlockRequest) GetBlockHeightLastInference() int64 {
	if m != nil {
		return m.BlockHeightLastInference
	}
	return 0
}

type GetNetworkInferencesAtBlockOutlierResistantRequest struct {
	TopicId                  uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeightLastInference int64  `protobuf:"varint,2,opt,name=block_height_last_inference,json=blockHeightLastInference,proto3" json:"block_height_last_inference,omitempty"`
}

func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) Reset() {
	*m = GetNetworkInferencesAtBlockOutlierResistantRequest{}
}
func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetNetworkInferencesAtBlockOutlierResistantRequest) ProtoMessage() {}
func (*GetNetworkInferencesAtBlockOutlierResistantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{87}
}
func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkInferencesAtBlockOutlierResistantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkInferencesAtBlockOutlierResistantRequest.Merge(m, src)
}
func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkInferencesAtBlockOutlierResistantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkInferencesAtBlockOutlierResistantRequest proto.InternalMessageInfo

func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) GetBlockHeightLastInference() int64 {
	if m != nil {
		return m.BlockHeightLastInference
	}
	return 0
}

type GetLatestNetworkInferencesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetLatestNetworkInferencesRequest) Reset()         { *m = GetLatestNetworkInferencesRequest{} }
func (m *GetLatestNetworkInferencesRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestNetworkInferencesRequest) ProtoMessage()    {}
func (*GetLatestNetworkInferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{88}
}
func (m *GetLatestNetworkInferencesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestNetworkInferencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestNetworkInferencesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestNetworkInferencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestNetworkInferencesRequest.Merge(m, src)
}
func (m *GetLatestNetworkInferencesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestNetworkInferencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestNetworkInferencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestNetworkInferencesRequest proto.InternalMessageInfo

func (m *GetLatestNetworkInferencesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetLatestNetworkInferencesOutlierResistantRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetLatestNetworkInferencesOutlierResistantRequest) Reset() {
	*m = GetLatestNetworkInferencesOutlierResistantRequest{}
}
func (m *GetLatestNetworkInferencesOutlierResistantRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetLatestNetworkInferencesOutlierResistantRequest) ProtoMessage() {}
func (*GetLatestNetworkInferencesOutlierResistantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{89}
}
func (m *GetLatestNetworkInferencesOutlierResistantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestNetworkInferencesOutlierResistantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestNetworkInferencesOutlierResistantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestNetworkInferencesOutlierResistantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestNetworkInferencesOutlierResistantRequest.Merge(m, src)
}
func (m *GetLatestNetworkInferencesOutlierResistantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestNetworkInferencesOutlierResistantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestNetworkInferencesOutlierResistantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestNetworkInferencesOutlierResistantRequest proto.InternalMessageInfo

func (m *GetLatestNetworkInferencesOutlierResistantRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetLatestAvailableNetworkInferencesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetLatestAvailableNetworkInferencesRequest) Reset() {
	*m = GetLatestAvailableNetworkInferencesRequest{}
}
func (m *GetLatestAvailableNetworkInferencesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetLatestAvailableNetworkInferencesRequest) ProtoMessage() {}
func (*GetLatestAvailableNetworkInferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{90}
}
func (m *GetLatestAvailableNetworkInferencesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestAvailableNetworkInferencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestAvailableNetworkInferencesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestAvailableNetworkInferencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestAvailableNetworkInferencesRequest.Merge(m, src)
}
func (m *GetLatestAvailableNetworkInferencesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestAvailableNetworkInferencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestAvailableNetworkInferencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestAvailableNetworkInferencesRequest proto.InternalMessageInfo

func (m *GetLatestAvailableNetworkInferencesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetLatestAvailableNetworkInferencesOutlierResistantRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) Reset() {
	*m = GetLatestAvailableNetworkInferencesOutlierResistantRequest{}
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetLatestAvailableNetworkInferencesOutlierResistantRequest) ProtoMessage() {}
func (*GetLatestAvailableNetworkInferencesOutlierResistantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{91}
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestAvailableNetworkInferencesOutlierResistantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestAvailableNetworkInferencesOutlierResistantRequest.Merge(m, src)
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestAvailableNetworkInferencesOutlierResistantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestAvailableNetworkInferencesOutlierResistantRequest proto.InternalMessageInfo

func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type IsWorkerNonceUnfulfilledRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *IsWorkerNonceUnfulfilledRequest) Reset()         { *m = IsWorkerNonceUnfulfilledRequest{} }
func (m *IsWorkerNonceUnfulfilledRequest) String() string { return proto.CompactTextString(m) }
func (*IsWorkerNonceUnfulfilledRequest) ProtoMessage()    {}
func (*IsWorkerNonceUnfulfilledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{92}
}
func (m *IsWorkerNonceUnfulfilledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWorkerNonceUnfulfilledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWorkerNonceUnfulfilledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWorkerNonceUnfulfilledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWorkerNonceUnfulfilledRequest.Merge(m, src)
}
func (m *IsWorkerNonceUnfulfilledRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWorkerNonceUnfulfilledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWorkerNonceUnfulfilledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWorkerNonceUnfulfilledRequest proto.InternalMessageInfo

func (m *IsWorkerNonceUnfulfilledRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *IsWorkerNonceUnfulfilledRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type IsWorkerNonceUnfulfilledResponse struct {
	IsWorkerNonceUnfulfilled bool `protobuf:"varint,1,opt,name=is_worker_nonce_unfulfilled,json=isWorkerNonceUnfulfilled,proto3" json:"is_worker_nonce_unfulfilled,omitempty"`
}

func (m *IsWorkerNonceUnfulfilledResponse) Reset()         { *m = IsWorkerNonceUnfulfilledResponse{} }
func (m *IsWorkerNonceUnfulfilledResponse) String() string { return proto.CompactTextString(m) }
func (*IsWorkerNonceUnfulfilledResponse) ProtoMessage()    {}
func (*IsWorkerNonceUnfulfilledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{93}
}
func (m *IsWorkerNonceUnfulfilledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWorkerNonceUnfulfilledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWorkerNonceUnfulfilledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWorkerNonceUnfulfilledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWorkerNonceUnfulfilledResponse.Merge(m, src)
}
func (m *IsWorkerNonceUnfulfilledResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWorkerNonceUnfulfilledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWorkerNonceUnfulfilledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWorkerNonceUnfulfilledResponse proto.InternalMessageInfo

func (m *IsWorkerNonceUnfulfilledResponse) GetIsWorkerNonceUnfulfilled() bool {
	if m != nil {
		return m.IsWorkerNonceUnfulfilled
	}
	return false
}

type GetUnfulfilledReputerNoncesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetUnfulfilledReputerNoncesRequest) Reset()         { *m = GetUnfulfilledReputerNoncesRequest{} }
func (m *GetUnfulfilledReputerNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*GetUnfulfilledReputerNoncesRequest) ProtoMessage()    {}
func (*GetUnfulfilledReputerNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{94}
}
func (m *GetUnfulfilledReputerNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUnfulfilledReputerNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUnfulfilledReputerNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUnfulfilledReputerNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUnfulfilledReputerNoncesRequest.Merge(m, src)
}
func (m *GetUnfulfilledReputerNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUnfulfilledReputerNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUnfulfilledReputerNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUnfulfilledReputerNoncesRequest proto.InternalMessageInfo

func (m *GetUnfulfilledReputerNoncesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetUnfulfilledReputerNoncesResponse struct {
	Nonces *ReputerRequestNonces `protobuf:"bytes,1,opt,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *GetUnfulfilledReputerNoncesResponse) Reset()         { *m = GetUnfulfilledReputerNoncesResponse{} }
func (m *GetUnfulfilledReputerNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*GetUnfulfilledReputerNoncesResponse) ProtoMessage()    {}
func (*GetUnfulfilledReputerNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{95}
}
func (m *GetUnfulfilledReputerNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUnfulfilledReputerNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUnfulfilledReputerNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUnfulfilledReputerNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUnfulfilledReputerNoncesResponse.Merge(m, src)
}
func (m *GetUnfulfilledReputerNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUnfulfilledReputerNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUnfulfilledReputerNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUnfulfilledReputerNoncesResponse proto.InternalMessageInfo

func (m *GetUnfulfilledReputerNoncesResponse) GetNonces() *ReputerRequestNonces {
	if m != nil {
		return m.Nonces
	}
	return nil
}

type GetUnfulfilledWorkerNoncesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetUnfulfilledWorkerNoncesRequest) Reset()         { *m = GetUnfulfilledWorkerNoncesRequest{} }
func (m *GetUnfulfilledWorkerNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*GetUnfulfilledWorkerNoncesRequest) ProtoMessage()    {}
func (*GetUnfulfilledWorkerNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{96}
}
func (m *GetUnfulfilledWorkerNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUnfulfilledWorkerNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUnfulfilledWorkerNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUnfulfilledWorkerNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUnfulfilledWorkerNoncesRequest.Merge(m, src)
}
func (m *GetUnfulfilledWorkerNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUnfulfilledWorkerNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUnfulfilledWorkerNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUnfulfilledWorkerNoncesRequest proto.InternalMessageInfo

func (m *GetUnfulfilledWorkerNoncesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetUnfulfilledWorkerNoncesResponse struct {
	Nonces *Nonces `protobuf:"bytes,1,opt,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *GetUnfulfilledWorkerNoncesResponse) Reset()         { *m = GetUnfulfilledWorkerNoncesResponse{} }
func (m *GetUnfulfilledWorkerNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*GetUnfulfilledWorkerNoncesResponse) ProtoMessage()    {}
func (*GetUnfulfilledWorkerNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{97}
}
func (m *GetUnfulfilledWorkerNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUnfulfilledWorkerNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUnfulfilledWorkerNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUnfulfilledWorkerNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUnfulfilledWorkerNoncesResponse.Merge(m, src)
}
func (m *GetUnfulfilledWorkerNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUnfulfilledWorkerNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUnfulfilledWorkerNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUnfulfilledWorkerNoncesResponse proto.InternalMessageInfo

func (m *GetUnfulfilledWorkerNoncesResponse) GetNonces() *Nonces {
	if m != nil {
		return m.Nonces
	}
	return nil
}

type GetInfererNetworkRegretRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	ActorId string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
}

func (m *GetInfererNetworkRegretRequest) Reset()         { *m = GetInfererNetworkRegretRequest{} }
func (m *GetInfererNetworkRegretRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfererNetworkRegretRequest) ProtoMessage()    {}
func (*GetInfererNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{98}
}
func (m *GetInfererNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfererNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfererNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfererNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfererNetworkRegretRequest.Merge(m, src)
}
func (m *GetInfererNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInfererNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfererNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfererNetworkRegretRequest proto.InternalMessageInfo

func (m *GetInfererNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetInfererNetworkRegretRequest) GetActorId() string {
	if m != nil {
		return m.ActorId
	}
	return ""
}

type GetInfererNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *GetInfererNetworkRegretResponse) Reset()         { *m = GetInfererNetworkRegretResponse{} }
func (m *GetInfererNetworkRegretResponse) String() string { return proto.CompactTextString(m) }
func (*GetInfererNetworkRegretResponse) ProtoMessage()    {}
func (*GetInfererNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{99}
}
func (m *GetInfererNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfererNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfererNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfererNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfererNetworkRegretResponse.Merge(m, src)
}
func (m *GetInfererNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInfererNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfererNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfererNetworkRegretResponse proto.InternalMessageInfo

func (m *GetInfererNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type GetForecasterNetworkRegretRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Worker  string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (m *GetForecasterNetworkRegretRequest) Reset()         { *m = GetForecasterNetworkRegretRequest{} }
func (m *GetForecasterNetworkRegretRequest) String() string { return proto.CompactTextString(m) }
func (*GetForecasterNetworkRegretRequest) ProtoMessage()    {}
func (*GetForecasterNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{100}
}
func (m *GetForecasterNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetForecasterNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetForecasterNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetForecasterNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetForecasterNetworkRegretRequest.Merge(m, src)
}
func (m *GetForecasterNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetForecasterNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetForecasterNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetForecasterNetworkRegretRequest proto.InternalMessageInfo

func (m *GetForecasterNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetForecasterNetworkRegretRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type GetForecasterNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *GetForecasterNetworkRegretResponse) Reset()         { *m = GetForecasterNetworkRegretResponse{} }
func (m *GetForecasterNetworkRegretResponse) String() string { return proto.CompactTextString(m) }
func (*GetForecasterNetworkRegretResponse) ProtoMessage()    {}
func (*GetForecasterNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{101}
}
func (m *GetForecasterNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetForecasterNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetForecasterNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetForecasterNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetForecasterNetworkRegretResponse.Merge(m, src)
}
func (m *GetForecasterNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetForecasterNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetForecasterNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetForecasterNetworkRegretResponse proto.InternalMessageInfo

func (m *GetForecasterNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type GetOneInForecasterNetworkRegretRequest struct {
	TopicId    uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Forecaster string `protobuf:"bytes,2,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
	Inferer    string `protobuf:"bytes,3,opt,name=inferer,proto3" json:"inferer,omitempty"`
}

func (m *GetOneInForecasterNetworkRegretRequest) Reset() {
	*m = GetOneInForecasterNetworkRegretRequest{}
}
func (m *GetOneInForecasterNetworkRegretRequest) String() string { return proto.CompactTextString(m) }
func (*GetOneInForecasterNetworkRegretRequest) ProtoMessage()    {}
func (*GetOneInForecasterNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{102}
}
func (m *GetOneInForecasterNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneInForecasterNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneInForecasterNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneInForecasterNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneInForecasterNetworkRegretRequest.Merge(m, src)
}
func (m *GetOneInForecasterNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOneInForecasterNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneInForecasterNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneInForecasterNetworkRegretRequest proto.InternalMessageInfo

func (m *GetOneInForecasterNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetOneInForecasterNetworkRegretRequest) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

func (m *GetOneInForecasterNetworkRegretRequest) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

type GetOneInForecasterNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *GetOneInForecasterNetworkRegretResponse) Reset() {
	*m = GetOneInForecasterNetworkRegretResponse{}
}
func (m *GetOneInForecasterNetworkRegretResponse) String() string { return proto.CompactTextString(m) }
func (*GetOneInForecasterNetworkRegretResponse) ProtoMessage()    {}
func (*GetOneInForecasterNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{103}
}
func (m *GetOneInForecasterNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOneInForecasterNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOneInForecasterNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOneInForecasterNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOneInForecasterNetworkRegretResponse.Merge(m, src)
}
func (m *GetOneInForecasterNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOneInForecasterNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOneInForecasterNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOneInForecasterNetworkRegretResponse proto.InternalMessageInfo

func (m *GetOneInForecasterNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type IsReputerNonceUnfulfilledRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *IsReputerNonceUnfulfilledRequest) Reset()         { *m = IsReputerNonceUnfulfilledRequest{} }
func (m *IsReputerNonceUnfulfilledRequest) String() string { return proto.CompactTextString(m) }
func (*IsReputerNonceUnfulfilledRequest) ProtoMessage()    {}
func (*IsReputerNonceUnfulfilledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{104}
}
func (m *IsReputerNonceUnfulfilledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsReputerNonceUnfulfilledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsReputerNonceUnfulfilledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsReputerNonceUnfulfilledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsReputerNonceUnfulfilledRequest.Merge(m, src)
}
func (m *IsReputerNonceUnfulfilledRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsReputerNonceUnfulfilledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsReputerNonceUnfulfilledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsReputerNonceUnfulfilledRequest proto.InternalMessageInfo

func (m *IsReputerNonceUnfulfilledRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *IsReputerNonceUnfulfilledRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type IsReputerNonceUnfulfilledResponse struct {
	IsReputerNonceUnfulfilled bool `protobuf:"varint,1,opt,name=is_reputer_nonce_unfulfilled,json=isReputerNonceUnfulfilled,proto3" json:"is_reputer_nonce_unfulfilled,omitempty"`
}

func (m *IsReputerNonceUnfulfilledResponse) Reset()         { *m = IsReputerNonceUnfulfilledResponse{} }
func (m *IsReputerNonceUnfulfilledResponse) String() string { return proto.CompactTextString(m) }
func (*IsReputerNonceUnfulfilledResponse) ProtoMessage()    {}
func (*IsReputerNonceUnfulfilledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{105}
}
func (m *IsReputerNonceUnfulfilledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsReputerNonceUnfulfilledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsReputerNonceUnfulfilledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsReputerNonceUnfulfilledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsReputerNonceUnfulfilledResponse.Merge(m, src)
}
func (m *IsReputerNonceUnfulfilledResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsReputerNonceUnfulfilledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsReputerNonceUnfulfilledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsReputerNonceUnfulfilledResponse proto.InternalMessageInfo

func (m *IsReputerNonceUnfulfilledResponse) GetIsReputerNonceUnfulfilled() bool {
	if m != nil {
		return m.IsReputerNonceUnfulfilled
	}
	return false
}

type GetNetworkInferencesAtBlockResponse struct {
	NetworkInferences *ValueBundle `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
}

func (m *GetNetworkInferencesAtBlockResponse) Reset()         { *m = GetNetworkInferencesAtBlockResponse{} }
func (m *GetNetworkInferencesAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetNetworkInferencesAtBlockResponse) ProtoMessage()    {}
func (*GetNetworkInferencesAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{106}
}
func (m *GetNetworkInferencesAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkInferencesAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkInferencesAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkInferencesAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkInferencesAtBlockResponse.Merge(m, src)
}
func (m *GetNetworkInferencesAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkInferencesAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkInferencesAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkInferencesAtBlockResponse proto.InternalMessageInfo

func (m *GetNetworkInferencesAtBlockResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

type GetNetworkInferencesAtBlockOutlierResistantResponse struct {
	NetworkInferences *ValueBundle `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
}

func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) Reset() {
	*m = GetNetworkInferencesAtBlockOutlierResistantResponse{}
}
func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetNetworkInferencesAtBlockOutlierResistantResponse) ProtoMessage() {}
func (*GetNetworkInferencesAtBlockOutlierResistantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{107}
}
func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkInferencesAtBlockOutlierResistantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkInferencesAtBlockOutlierResistantResponse.Merge(m, src)
}
func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkInferencesAtBlockOutlierResistantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkInferencesAtBlockOutlierResistantResponse proto.InternalMessageInfo

func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

type GetLatestNetworkInferencesResponse struct {
	NetworkInferences                *ValueBundle                                      `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
	InfererWeights                   []*RegretInformedWeight                           `protobuf:"bytes,2,rep,name=inferer_weights,json=infererWeights,proto3" json:"inferer_weights,omitempty"`
	ForecasterWeights                []*RegretInformedWeight                           `protobuf:"bytes,3,rep,name=forecaster_weights,json=forecasterWeights,proto3" json:"forecaster_weights,omitempty"`
	InferenceBlockHeight             int64                                             `protobuf:"varint,5,opt,name=inference_block_height,json=inferenceBlockHeight,proto3" json:"inference_block_height,omitempty"`
	LossBlockHeight                  int64                                             `protobuf:"varint,6,opt,name=loss_block_height,json=lossBlockHeight,proto3" json:"loss_block_height,omitempty"`
	ConfidenceIntervalRawPercentiles []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,7,rep,name=confidence_interval_raw_percentiles,json=confidenceIntervalRawPercentiles,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_raw_percentiles"`
	ConfidenceIntervalValues         []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,8,rep,name=confidence_interval_values,json=confidenceIntervalValues,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_values"`
}

func (m *GetLatestNetworkInferencesResponse) Reset()         { *m = GetLatestNetworkInferencesResponse{} }
func (m *GetLatestNetworkInferencesResponse) String() string { return proto.CompactTextString(m) }
func (*GetLatestNetworkInferencesResponse) ProtoMessage()    {}
func (*GetLatestNetworkInferencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{108}
}
func (m *GetLatestNetworkInferencesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestNetworkInferencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestNetworkInferencesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestNetworkInferencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestNetworkInferencesResponse.Merge(m, src)
}
func (m *GetLatestNetworkInferencesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestNetworkInferencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestNetworkInferencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestNetworkInferencesResponse proto.InternalMessageInfo

func (m *GetLatestNetworkInferencesResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

func (m *GetLatestNetworkInferencesResponse) GetInfererWeights() []*RegretInformedWeight {
	if m != nil {
		return m.InfererWeights
	}
	return nil
}

func (m *GetLatestNetworkInferencesResponse) GetForecasterWeights() []*RegretInformedWeight {
	if m != nil {
		return m.ForecasterWeights
	}
	return nil
}

func (m *GetLatestNetworkInferencesResponse) GetInferenceBlockHeight() int64 {
	if m != nil {
		return m.InferenceBlockHeight
	}
	return 0
}

func (m *GetLatestNetworkInferencesResponse) GetLossBlockHeight() int64 {
	if m != nil {
		return m.LossBlockHeight
	}
	return 0
}

type GetLatestNetworkInferencesOutlierResistantResponse struct {
	NetworkInferences                *ValueBundle                                      `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
	InfererWeights                   []*RegretInformedWeight                           `protobuf:"bytes,2,rep,name=inferer_weights,json=infererWeights,proto3" json:"inferer_weights,omitempty"`
	ForecasterWeights                []*RegretInformedWeight                           `protobuf:"bytes,3,rep,name=forecaster_weights,json=forecasterWeights,proto3" json:"forecaster_weights,omitempty"`
	InferenceBlockHeight             int64                                             `protobuf:"varint,5,opt,name=inference_block_height,json=inferenceBlockHeight,proto3" json:"inference_block_height,omitempty"`
	LossBlockHeight                  int64                                             `protobuf:"varint,6,opt,name=loss_block_height,json=lossBlockHeight,proto3" json:"loss_block_height,omitempty"`
	ConfidenceIntervalRawPercentiles []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,7,rep,name=confidence_interval_raw_percentiles,json=confidenceIntervalRawPercentiles,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_raw_percentiles"`
	ConfidenceIntervalValues         []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,8,rep,name=confidence_interval_values,json=confidenceIntervalValues,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_values"`
}

func (m *GetLatestNetworkInferencesOutlierResistantResponse) Reset() {
	*m = GetLatestNetworkInferencesOutlierResistantResponse{}
}
func (m *GetLatestNetworkInferencesOutlierResistantResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetLatestNetworkInferencesOutlierResistantResponse) ProtoMessage() {}
func (*GetLatestNetworkInferencesOutlierResistantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{109}
}
func (m *GetLatestNetworkInferencesOutlierResistantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestNetworkInferencesOutlierResistantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestNetworkInferencesOutlierResistantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestNetworkInferencesOutlierResistantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestNetworkInferencesOutlierResistantResponse.Merge(m, src)
}
func (m *GetLatestNetworkInferencesOutlierResistantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestNetworkInferencesOutlierResistantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestNetworkInferencesOutlierResistantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestNetworkInferencesOutlierResistantResponse proto.InternalMessageInfo

func (m *GetLatestNetworkInferencesOutlierResistantResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

func (m *GetLatestNetworkInferencesOutlierResistantResponse) GetInfererWeights() []*RegretInformedWeight {
	if m != nil {
		return m.InfererWeights
	}
	return nil
}

func (m *GetLatestNetworkInferencesOutlierResistantResponse) GetForecasterWeights() []*RegretInformedWeight {
	if m != nil {
		return m.ForecasterWeights
	}
	return nil
}

func (m *GetLatestNetworkInferencesOutlierResistantResponse) GetInferenceBlockHeight() int64 {
	if m != nil {
		return m.InferenceBlockHeight
	}
	return 0
}

func (m *GetLatestNetworkInferencesOutlierResistantResponse) GetLossBlockHeight() int64 {
	if m != nil {
		return m.LossBlockHeight
	}
	return 0
}

type GetLatestAvailableNetworkInferencesResponse struct {
	NetworkInferences                *ValueBundle                                      `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
	InfererWeights                   []*RegretInformedWeight                           `protobuf:"bytes,2,rep,name=inferer_weights,json=infererWeights,proto3" json:"inferer_weights,omitempty"`
	ForecasterWeights                []*RegretInformedWeight                           `protobuf:"bytes,3,rep,name=forecaster_weights,json=forecasterWeights,proto3" json:"forecaster_weights,omitempty"`
	InferenceBlockHeight             int64                                             `protobuf:"varint,5,opt,name=inference_block_height,json=inferenceBlockHeight,proto3" json:"inference_block_height,omitempty"`
	LossBlockHeight                  int64                                             `protobuf:"varint,6,opt,name=loss_block_height,json=lossBlockHeight,proto3" json:"loss_block_height,omitempty"`
	ConfidenceIntervalRawPercentiles []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,7,rep,name=confidence_interval_raw_percentiles,json=confidenceIntervalRawPercentiles,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_raw_percentiles"`
	ConfidenceIntervalValues         []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,8,rep,name=confidence_interval_values,json=confidenceIntervalValues,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_values"`
}

func (m *GetLatestAvailableNetworkInferencesResponse) Reset() {
	*m = GetLatestAvailableNetworkInferencesResponse{}
}
func (m *GetLatestAvailableNetworkInferencesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetLatestAvailableNetworkInferencesResponse) ProtoMessage() {}
func (*GetLatestAvailableNetworkInferencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{110}
}
func (m *GetLatestAvailableNetworkInferencesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestAvailableNetworkInferencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestAvailableNetworkInferencesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestAvailableNetworkInferencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestAvailableNetworkInferencesResponse.Merge(m, src)
}
func (m *GetLatestAvailableNetworkInferencesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestAvailableNetworkInferencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestAvailableNetworkInferencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestAvailableNetworkInferencesResponse proto.InternalMessageInfo

func (m *GetLatestAvailableNetworkInferencesResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

func (m *GetLatestAvailableNetworkInferencesResponse) GetInfererWeights() []*RegretInformedWeight {
	if m != nil {
		return m.InfererWeights
	}
	return nil
}

func (m *GetLatestAvailableNetworkInferencesResponse) GetForecasterWeights() []*RegretInformedWeight {
	if m != nil {
		return m.ForecasterWeights
	}
	return nil
}

func (m *GetLatestAvailableNetworkInferencesResponse) GetInferenceBlockHeight() int64 {
	if m != nil {
		return m.InferenceBlockHeight
	}
	return 0
}

func (m *GetLatestAvailableNetworkInferencesResponse) GetLossBlockHeight() int64 {
	if m != nil {
		return m.LossBlockHeight
	}
	return 0
}

type GetLatestAvailableNetworkInferencesOutlierResistantResponse struct {
	NetworkInferences                *ValueBundle                                      `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
	InfererWeights                   []*RegretInformedWeight                           `protobuf:"bytes,2,rep,name=inferer_weights,json=infererWeights,proto3" json:"inferer_weights,omitempty"`
	ForecasterWeights                []*RegretInformedWeight                           `protobuf:"bytes,3,rep,name=forecaster_weights,json=forecasterWeights,proto3" json:"forecaster_weights,omitempty"`
	InferenceBlockHeight             int64                                             `protobuf:"varint,5,opt,name=inference_block_height,json=inferenceBlockHeight,proto3" json:"inference_block_height,omitempty"`
	LossBlockHeight                  int64                                             `protobuf:"varint,6,opt,name=loss_block_height,json=lossBlockHeight,proto3" json:"loss_block_height,omitempty"`
	ConfidenceIntervalRawPercentiles []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,7,rep,name=confidence_interval_raw_percentiles,json=confidenceIntervalRawPercentiles,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_raw_percentiles"`
	ConfidenceIntervalValues         []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,8,rep,name=confidence_interval_values,json=confidenceIntervalValues,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_values"`
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) Reset() {
	*m = GetLatestAvailableNetworkInferencesOutlierResistantResponse{}
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetLatestAvailableNetworkInferencesOutlierResistantResponse) ProtoMessage() {}
func (*GetLatestAvailableNetworkInferencesOutlierResistantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{111}
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLatestAvailableNetworkInferencesOutlierResistantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestAvailableNetworkInferencesOutlierResistantResponse.Merge(m, src)
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestAvailableNetworkInferencesOutlierResistantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestAvailableNetworkInferencesOutlierResistantResponse proto.InternalMessageInfo

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) GetInfererWeights() []*RegretInformedWeight {
	if m != nil {
		return m.InfererWeights
	}
	return nil
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) GetForecasterWeights() []*RegretInformedWeight {
	if m != nil {
		return m.ForecasterWeights
	}
	return nil
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) GetInferenceBlockHeight() int64 {
	if m != nil {
		return m.InferenceBlockHeight
	}
	return 0
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) GetLossBlockHeight() int64 {
	if m != nil {
		return m.LossBlockHeight
	}
	return 0
}

type IsWorkerRegisteredInTopicIdRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsWorkerRegisteredInTopicIdRequest) Reset()         { *m = IsWorkerRegisteredInTopicIdRequest{} }
func (m *IsWorkerRegisteredInTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*IsWorkerRegisteredInTopicIdRequest) ProtoMessage()    {}
func (*IsWorkerRegisteredInTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{112}
}
func (m *IsWorkerRegisteredInTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWorkerRegisteredInTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWorkerRegisteredInTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWorkerRegisteredInTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWorkerRegisteredInTopicIdRequest.Merge(m, src)
}
func (m *IsWorkerRegisteredInTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWorkerRegisteredInTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWorkerRegisteredInTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWorkerRegisteredInTopicIdRequest proto.InternalMessageInfo

func (m *IsWorkerRegisteredInTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *IsWorkerRegisteredInTopicIdRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsWorkerRegisteredInTopicIdResponse struct {
	IsRegistered bool `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *IsWorkerRegisteredInTopicIdResponse) Reset()         { *m = IsWorkerRegisteredInTopicIdResponse{} }
func (m *IsWorkerRegisteredInTopicIdResponse) String() string { return proto.CompactTextString(m) }
func (*IsWorkerRegisteredInTopicIdResponse) ProtoMessage()    {}
func (*IsWorkerRegisteredInTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{113}
}
func (m *IsWorkerRegisteredInTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWorkerRegisteredInTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWorkerRegisteredInTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWorkerRegisteredInTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWorkerRegisteredInTopicIdResponse.Merge(m, src)
}
func (m *IsWorkerRegisteredInTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWorkerRegisteredInTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWorkerRegisteredInTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWorkerRegisteredInTopicIdResponse proto.InternalMessageInfo

func (m *IsWorkerRegisteredInTopicIdResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type IsReputerRegisteredInTopicIdRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsReputerRegisteredInTopicIdRequest) Reset()         { *m = IsReputerRegisteredInTopicIdRequest{} }
func (m *IsReputerRegisteredInTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*IsReputerRegisteredInTopicIdRequest) ProtoMessage()    {}
func (*IsReputerRegisteredInTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{114}
}
func (m *IsReputerRegisteredInTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsReputerRegisteredInTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsReputerRegisteredInTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsReputerRegisteredInTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsReputerRegisteredInTopicIdRequest.Merge(m, src)
}
func (m *IsReputerRegisteredInTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsReputerRegisteredInTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsReputerRegisteredInTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsReputerRegisteredInTopicIdRequest proto.InternalMessageInfo

func (m *IsReputerRegisteredInTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *IsReputerRegisteredInTopicIdRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsReputerRegisteredInTopicIdResponse struct {
	IsRegistered bool `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *IsReputerRegisteredInTopicIdResponse) Reset()         { *m = IsReputerRegisteredInTopicIdResponse{} }
func (m *IsReputerRegisteredInTopicIdResponse) String() string { return proto.CompactTextString(m) }
func (*IsReputerRegisteredInTopicIdResponse) ProtoMessage()    {}
func (*IsReputerRegisteredInTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{115}
}
func (m *IsReputerRegisteredInTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsReputerRegisteredInTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsReputerRegisteredInTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsReputerRegisteredInTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsReputerRegisteredInTopicIdResponse.Merge(m, src)
}
func (m *IsReputerRegisteredInTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsReputerRegisteredInTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsReputerRegisteredInTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsReputerRegisteredInTopicIdResponse proto.InternalMessageInfo

func (m *IsReputerRegisteredInTopicIdResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type IsWhitelistAdminRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IsWhitelistAdminRequest) Reset()         { *m = IsWhitelistAdminRequest{} }
func (m *IsWhitelistAdminRequest) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistAdminRequest) ProtoMessage()    {}
func (*IsWhitelistAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{116}
}
func (m *IsWhitelistAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistAdminRequest.Merge(m, src)
}
func (m *IsWhitelistAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistAdminRequest proto.InternalMessageInfo

func (m *IsWhitelistAdminRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type IsWhitelistAdminResponse struct {
	IsAdmin bool `protobuf:"varint,1,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
}

func (m *IsWhitelistAdminResponse) Reset()         { *m = IsWhitelistAdminResponse{} }
func (m *IsWhitelistAdminResponse) String() string { return proto.CompactTextString(m) }
func (*IsWhitelistAdminResponse) ProtoMessage()    {}
func (*IsWhitelistAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{117}
}
func (m *IsWhitelistAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsWhitelistAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsWhitelistAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsWhitelistAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsWhitelistAdminResponse.Merge(m, src)
}
func (m *IsWhitelistAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsWhitelistAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsWhitelistAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsWhitelistAdminResponse proto.InternalMessageInfo

func (m *IsWhitelistAdminResponse) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type GetStakeRemovalsUpUntilBlockRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetStakeRemovalsUpUntilBlockRequest) Reset()         { *m = GetStakeRemovalsUpUntilBlockRequest{} }
func (m *GetStakeRemovalsUpUntilBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetStakeRemovalsUpUntilBlockRequest) ProtoMessage()    {}
func (*GetStakeRemovalsUpUntilBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{118}
}
func (m *GetStakeRemovalsUpUntilBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeRemovalsUpUntilBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeRemovalsUpUntilBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeRemovalsUpUntilBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeRemovalsUpUntilBlockRequest.Merge(m, src)
}
func (m *GetStakeRemovalsUpUntilBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeRemovalsUpUntilBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeRemovalsUpUntilBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeRemovalsUpUntilBlockRequest proto.InternalMessageInfo

func (m *GetStakeRemovalsUpUntilBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetStakeRemovalsUpUntilBlockResponse struct {
	Removals []*StakeRemovalInfo `protobuf:"bytes,1,rep,name=removals,proto3" json:"removals,omitempty"`
}

func (m *GetStakeRemovalsUpUntilBlockResponse) Reset()         { *m = GetStakeRemovalsUpUntilBlockResponse{} }
func (m *GetStakeRemovalsUpUntilBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetStakeRemovalsUpUntilBlockResponse) ProtoMessage()    {}
func (*GetStakeRemovalsUpUntilBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{119}
}
func (m *GetStakeRemovalsUpUntilBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeRemovalsUpUntilBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeRemovalsUpUntilBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeRemovalsUpUntilBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeRemovalsUpUntilBlockResponse.Merge(m, src)
}
func (m *GetStakeRemovalsUpUntilBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeRemovalsUpUntilBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeRemovalsUpUntilBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeRemovalsUpUntilBlockResponse proto.InternalMessageInfo

func (m *GetStakeRemovalsUpUntilBlockResponse) GetRemovals() []*StakeRemovalInfo {
	if m != nil {
		return m.Removals
	}
	return nil
}

type GetDelegateStakeRemovalsUpUntilBlockRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) Reset() {
	*m = GetDelegateStakeRemovalsUpUntilBlockRequest{}
}
func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetDelegateStakeRemovalsUpUntilBlockRequest) ProtoMessage() {}
func (*GetDelegateStakeRemovalsUpUntilBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{120}
}
func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeRemovalsUpUntilBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeRemovalsUpUntilBlockRequest.Merge(m, src)
}
func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeRemovalsUpUntilBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeRemovalsUpUntilBlockRequest proto.InternalMessageInfo

func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetDelegateStakeRemovalsUpUntilBlockResponse struct {
	Removals []*DelegateStakeRemovalInfo `protobuf:"bytes,1,rep,name=removals,proto3" json:"removals,omitempty"`
}

func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) Reset() {
	*m = GetDelegateStakeRemovalsUpUntilBlockResponse{}
}
func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetDelegateStakeRemovalsUpUntilBlockResponse) ProtoMessage() {}
func (*GetDelegateStakeRemovalsUpUntilBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{121}
}
func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeRemovalsUpUntilBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeRemovalsUpUntilBlockResponse.Merge(m, src)
}
func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeRemovalsUpUntilBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeRemovalsUpUntilBlockResponse proto.InternalMessageInfo

func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) GetRemovals() []*DelegateStakeRemovalInfo {
	if m != nil {
		return m.Removals
	}
	return nil
}

type GetStakeRemovalInfoRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *GetStakeRemovalInfoRequest) Reset()         { *m = GetStakeRemovalInfoRequest{} }
func (m *GetStakeRemovalInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetStakeRemovalInfoRequest) ProtoMessage()    {}
func (*GetStakeRemovalInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{122}
}
func (m *GetStakeRemovalInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeRemovalInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeRemovalInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeRemovalInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeRemovalInfoRequest.Merge(m, src)
}
func (m *GetStakeRemovalInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeRemovalInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeRemovalInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeRemovalInfoRequest proto.InternalMessageInfo

func (m *GetStakeRemovalInfoRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetStakeRemovalInfoRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type GetStakeRemovalInfoResponse struct {
	Removal *StakeRemovalInfo `protobuf:"bytes,1,opt,name=removal,proto3" json:"removal,omitempty"`
}

func (m *GetStakeRemovalInfoResponse) Reset()         { *m = GetStakeRemovalInfoResponse{} }
func (m *GetStakeRemovalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetStakeRemovalInfoResponse) ProtoMessage()    {}
func (*GetStakeRemovalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{123}
}
func (m *GetStakeRemovalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeRemovalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeRemovalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeRemovalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeRemovalInfoResponse.Merge(m, src)
}
func (m *GetStakeRemovalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeRemovalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeRemovalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeRemovalInfoResponse proto.InternalMessageInfo

func (m *GetStakeRemovalInfoResponse) GetRemoval() *StakeRemovalInfo {
	if m != nil {
		return m.Removal
	}
	return nil
}

type GetDelegateStakeRemovalInfoRequest struct {
	TopicId   uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Delegator string `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Reputer   string `protobuf:"bytes,3,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *GetDelegateStakeRemovalInfoRequest) Reset()         { *m = GetDelegateStakeRemovalInfoRequest{} }
func (m *GetDelegateStakeRemovalInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakeRemovalInfoRequest) ProtoMessage()    {}
func (*GetDelegateStakeRemovalInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{124}
}
func (m *GetDelegateStakeRemovalInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeRemovalInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeRemovalInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeRemovalInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeRemovalInfoRequest.Merge(m, src)
}
func (m *GetDelegateStakeRemovalInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeRemovalInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeRemovalInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeRemovalInfoRequest proto.InternalMessageInfo

func (m *GetDelegateStakeRemovalInfoRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetDelegateStakeRemovalInfoRequest) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *GetDelegateStakeRemovalInfoRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type GetDelegateStakeRemovalInfoResponse struct {
	Removal *DelegateStakeRemovalInfo `protobuf:"bytes,1,opt,name=removal,proto3" json:"removal,omitempty"`
}

func (m *GetDelegateStakeRemovalInfoResponse) Reset()         { *m = GetDelegateStakeRemovalInfoResponse{} }
func (m *GetDelegateStakeRemovalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakeRemovalInfoResponse) ProtoMessage()    {}
func (*GetDelegateStakeRemovalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{125}
}
func (m *GetDelegateStakeRemovalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeRemovalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeRemovalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeRemovalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeRemovalInfoResponse.Merge(m, src)
}
func (m *GetDelegateStakeRemovalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeRemovalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeRemovalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeRemovalInfoResponse proto.InternalMessageInfo

func (m *GetDelegateStakeRemovalInfoResponse) GetRemoval() *DelegateStakeRemovalInfo {
	if m != nil {
		return m.Removal
	}
	return nil
}

type GetTopicLastWorkerCommitInfoRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetTopicLastWorkerCommitInfoRequest) Reset()         { *m = GetTopicLastWorkerCommitInfoRequest{} }
func (m *GetTopicLastWorkerCommitInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicLastWorkerCommitInfoRequest) ProtoMessage()    {}
func (*GetTopicLastWorkerCommitInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{126}
}
func (m *GetTopicLastWorkerCommitInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicLastWorkerCommitInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicLastWorkerCommitInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicLastWorkerCommitInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicLastWorkerCommitInfoRequest.Merge(m, src)
}
func (m *GetTopicLastWorkerCommitInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicLastWorkerCommitInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicLastWorkerCommitInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicLastWorkerCommitInfoRequest proto.InternalMessageInfo

func (m *GetTopicLastWorkerCommitInfoRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetTopicLastWorkerCommitInfoResponse struct {
	LastCommit *TimestampedActorNonce `protobuf:"bytes,1,opt,name=last_commit,json=lastCommit,proto3" json:"last_commit,omitempty"`
}

func (m *GetTopicLastWorkerCommitInfoResponse) Reset()         { *m = GetTopicLastWorkerCommitInfoResponse{} }
func (m *GetTopicLastWorkerCommitInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetTopicLastWorkerCommitInfoResponse) ProtoMessage()    {}
func (*GetTopicLastWorkerCommitInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{127}
}
func (m *GetTopicLastWorkerCommitInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicLastWorkerCommitInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicLastWorkerCommitInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicLastWorkerCommitInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicLastWorkerCommitInfoResponse.Merge(m, src)
}
func (m *GetTopicLastWorkerCommitInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicLastWorkerCommitInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicLastWorkerCommitInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicLastWorkerCommitInfoResponse proto.InternalMessageInfo

func (m *GetTopicLastWorkerCommitInfoResponse) GetLastCommit() *TimestampedActorNonce {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

type GetTopicLastReputerCommitInfoRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetTopicLastReputerCommitInfoRequest) Reset()         { *m = GetTopicLastReputerCommitInfoRequest{} }
func (m *GetTopicLastReputerCommitInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicLastReputerCommitInfoRequest) ProtoMessage()    {}
func (*GetTopicLastReputerCommitInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{128}
}
func (m *GetTopicLastReputerCommitInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicLastReputerCommitInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicLastReputerCommitInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicLastReputerCommitInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicLastReputerCommitInfoRequest.Merge(m, src)
}
func (m *GetTopicLastReputerCommitInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicLastReputerCommitInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicLastReputerCommitInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicLastReputerCommitInfoRequest proto.InternalMessageInfo

func (m *GetTopicLastReputerCommitInfoRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetTopicLastReputerCommitInfoResponse struct {
	LastCommit *TimestampedActorNonce `protobuf:"bytes,1,opt,name=last_commit,json=lastCommit,proto3" json:"last_commit,omitempty"`
}

func (m *GetTopicLastReputerCommitInfoResponse) Reset()         { *m = GetTopicLastReputerCommitInfoResponse{} }
func (m *GetTopicLastReputerCommitInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetTopicLastReputerCommitInfoResponse) ProtoMessage()    {}
func (*GetTopicLastReputerCommitInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{129}
}
func (m *GetTopicLastReputerCommitInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicLastReputerCommitInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicLastReputerCommitInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicLastReputerCommitInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicLastReputerCommitInfoResponse.Merge(m, src)
}
func (m *GetTopicLastReputerCommitInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicLastReputerCommitInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicLastReputerCommitInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicLastReputerCommitInfoResponse proto.InternalMessageInfo

func (m *GetTopicLastReputerCommitInfoResponse) GetLastCommit() *TimestampedActorNonce {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

type GetTopicRewardNonceRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetTopicRewardNonceRequest) Reset()         { *m = GetTopicRewardNonceRequest{} }
func (m *GetTopicRewardNonceRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicRewardNonceRequest) ProtoMessage()    {}
func (*GetTopicRewardNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{130}
}
func (m *GetTopicRewardNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicRewardNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicRewardNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicRewardNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicRewardNonceRequest.Merge(m, src)
}
func (m *GetTopicRewardNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicRewardNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicRewardNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicRewardNonceRequest proto.InternalMessageInfo

func (m *GetTopicRewardNonceRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetTopicRewardNonceResponse struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *GetTopicRewardNonceResponse) Reset()         { *m = GetTopicRewardNonceResponse{} }
func (m *GetTopicRewardNonceResponse) String() string { return proto.CompactTextString(m) }
func (*GetTopicRewardNonceResponse) ProtoMessage()    {}
func (*GetTopicRewardNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{131}
}
func (m *GetTopicRewardNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicRewardNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicRewardNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicRewardNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicRewardNonceResponse.Merge(m, src)
}
func (m *GetTopicRewardNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicRewardNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicRewardNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicRewardNonceResponse proto.InternalMessageInfo

func (m *GetTopicRewardNonceResponse) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type GetReputerLossBundlesAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetReputerLossBundlesAtBlockRequest) Reset()         { *m = GetReputerLossBundlesAtBlockRequest{} }
func (m *GetReputerLossBundlesAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetReputerLossBundlesAtBlockRequest) ProtoMessage()    {}
func (*GetReputerLossBundlesAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{132}
}
func (m *GetReputerLossBundlesAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputerLossBundlesAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputerLossBundlesAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputerLossBundlesAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputerLossBundlesAtBlockRequest.Merge(m, src)
}
func (m *GetReputerLossBundlesAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReputerLossBundlesAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputerLossBundlesAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputerLossBundlesAtBlockRequest proto.InternalMessageInfo

func (m *GetReputerLossBundlesAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetReputerLossBundlesAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetReputerLossBundlesAtBlockResponse struct {
	LossBundles *ReputerValueBundles `protobuf:"bytes,1,opt,name=loss_bundles,json=lossBundles,proto3" json:"loss_bundles,omitempty"`
}

func (m *GetReputerLossBundlesAtBlockResponse) Reset()         { *m = GetReputerLossBundlesAtBlockResponse{} }
func (m *GetReputerLossBundlesAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetReputerLossBundlesAtBlockResponse) ProtoMessage()    {}
func (*GetReputerLossBundlesAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{133}
}
func (m *GetReputerLossBundlesAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputerLossBundlesAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputerLossBundlesAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputerLossBundlesAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputerLossBundlesAtBlockResponse.Merge(m, src)
}
func (m *GetReputerLossBundlesAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReputerLossBundlesAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputerLossBundlesAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputerLossBundlesAtBlockResponse proto.InternalMessageInfo

func (m *GetReputerLossBundlesAtBlockResponse) GetLossBundles() *ReputerValueBundles {
	if m != nil {
		return m.LossBundles
	}
	return nil
}

type GetStakeReputerAuthorityRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *GetStakeReputerAuthorityRequest) Reset()         { *m = GetStakeReputerAuthorityRequest{} }
func (m *GetStakeReputerAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*GetStakeReputerAuthorityRequest) ProtoMessage()    {}
func (*GetStakeReputerAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{134}
}
func (m *GetStakeReputerAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeReputerAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeReputerAuthorityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeReputerAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeReputerAuthorityRequest.Merge(m, src)
}
func (m *GetStakeReputerAuthorityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeReputerAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeReputerAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeReputerAuthorityRequest proto.InternalMessageInfo

func (m *GetStakeReputerAuthorityRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetStakeReputerAuthorityRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type GetStakeReputerAuthorityResponse struct {
	Authority cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=authority,proto3,customtype=cosmossdk.io/math.Int" json:"authority"`
}

func (m *GetStakeReputerAuthorityResponse) Reset()         { *m = GetStakeReputerAuthorityResponse{} }
func (m *GetStakeReputerAuthorityResponse) String() string { return proto.CompactTextString(m) }
func (*GetStakeReputerAuthorityResponse) ProtoMessage()    {}
func (*GetStakeReputerAuthorityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{135}
}
func (m *GetStakeReputerAuthorityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeReputerAuthorityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeReputerAuthorityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeReputerAuthorityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeReputerAuthorityResponse.Merge(m, src)
}
func (m *GetStakeReputerAuthorityResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeReputerAuthorityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeReputerAuthorityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeReputerAuthorityResponse proto.InternalMessageInfo

type GetDelegateStakePlacementRequest struct {
	TopicId   uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Delegator string `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Target    string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *GetDelegateStakePlacementRequest) Reset()         { *m = GetDelegateStakePlacementRequest{} }
func (m *GetDelegateStakePlacementRequest) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakePlacementRequest) ProtoMessage()    {}
func (*GetDelegateStakePlacementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{136}
}
func (m *GetDelegateStakePlacementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakePlacementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakePlacementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakePlacementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakePlacementRequest.Merge(m, src)
}
func (m *GetDelegateStakePlacementRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakePlacementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakePlacementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakePlacementRequest proto.InternalMessageInfo

func (m *GetDelegateStakePlacementRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetDelegateStakePlacementRequest) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *GetDelegateStakePlacementRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type GetDelegateStakePlacementResponse struct {
	DelegatorInfo *DelegatorInfo `protobuf:"bytes,1,opt,name=delegator_info,json=delegatorInfo,proto3" json:"delegator_info,omitempty"`
}

func (m *GetDelegateStakePlacementResponse) Reset()         { *m = GetDelegateStakePlacementResponse{} }
func (m *GetDelegateStakePlacementResponse) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakePlacementResponse) ProtoMessage()    {}
func (*GetDelegateStakePlacementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{137}
}
func (m *GetDelegateStakePlacementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakePlacementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakePlacementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakePlacementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakePlacementResponse.Merge(m, src)
}
func (m *GetDelegateStakePlacementResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakePlacementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakePlacementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakePlacementResponse proto.InternalMessageInfo

func (m *GetDelegateStakePlacementResponse) GetDelegatorInfo() *DelegatorInfo {
	if m != nil {
		return m.DelegatorInfo
	}
	return nil
}

type GetDelegateStakeUponReputerRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Target  string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *GetDelegateStakeUponReputerRequest) Reset()         { *m = GetDelegateStakeUponReputerRequest{} }
func (m *GetDelegateStakeUponReputerRequest) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakeUponReputerRequest) ProtoMessage()    {}
func (*GetDelegateStakeUponReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{138}
}
func (m *GetDelegateStakeUponReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeUponReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeUponReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeUponReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeUponReputerRequest.Merge(m, src)
}
func (m *GetDelegateStakeUponReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeUponReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeUponReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeUponReputerRequest proto.InternalMessageInfo

func (m *GetDelegateStakeUponReputerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetDelegateStakeUponReputerRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type GetDelegateStakeUponReputerResponse struct {
	Stake cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=stake,proto3,customtype=cosmossdk.io/math.Int" json:"stake"`
}

func (m *GetDelegateStakeUponReputerResponse) Reset()         { *m = GetDelegateStakeUponReputerResponse{} }
func (m *GetDelegateStakeUponReputerResponse) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakeUponReputerResponse) ProtoMessage()    {}
func (*GetDelegateStakeUponReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{139}
}
func (m *GetDelegateStakeUponReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeUponReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeUponReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeUponReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeUponReputerResponse.Merge(m, src)
}
func (m *GetDelegateStakeUponReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeUponReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeUponReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeUponReputerResponse proto.InternalMessageInfo

type GetDelegateRewardPerShareRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *GetDelegateRewardPerShareRequest) Reset()         { *m = GetDelegateRewardPerShareRequest{} }
func (m *GetDelegateRewardPerShareRequest) String() string { return proto.CompactTextString(m) }
func (*GetDelegateRewardPerShareRequest) ProtoMessage()    {}
func (*GetDelegateRewardPerShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{140}
}
func (m *GetDelegateRewardPerShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateRewardPerShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateRewardPerShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateRewardPerShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateRewardPerShareRequest.Merge(m, src)
}
func (m *GetDelegateRewardPerShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateRewardPerShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateRewardPerShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateRewardPerShareRequest proto.InternalMessageInfo

func (m *GetDelegateRewardPerShareRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetDelegateRewardPerShareRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type GetDelegateRewardPerShareResponse struct {
	RewardPerShare github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=reward_per_share,json=rewardPerShare,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"reward_per_share"`
}

func (m *GetDelegateRewardPerShareResponse) Reset()         { *m = GetDelegateRewardPerShareResponse{} }
func (m *GetDelegateRewardPerShareResponse) String() string { return proto.CompactTextString(m) }
func (*GetDelegateRewardPerShareResponse) ProtoMessage()    {}
func (*GetDelegateRewardPerShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{141}
}
func (m *GetDelegateRewardPerShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateRewardPerShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateRewardPerShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateRewardPerShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateRewardPerShareResponse.Merge(m, src)
}
func (m *GetDelegateRewardPerShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateRewardPerShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateRewardPerShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateRewardPerShareResponse proto.InternalMessageInfo

type GetStakeRemovalForReputerAndTopicIdRequest struct {
	Reputer string `protobuf:"bytes,1,opt,name=reputer,proto3" json:"reputer,omitempty"`
	TopicId uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetStakeRemovalForReputerAndTopicIdRequest) Reset() {
	*m = GetStakeRemovalForReputerAndTopicIdRequest{}
}
func (m *GetStakeRemovalForReputerAndTopicIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetStakeRemovalForReputerAndTopicIdRequest) ProtoMessage() {}
func (*GetStakeRemovalForReputerAndTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{142}
}
func (m *GetStakeRemovalForReputerAndTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeRemovalForReputerAndTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeRemovalForReputerAndTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeRemovalForReputerAndTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeRemovalForReputerAndTopicIdRequest.Merge(m, src)
}
func (m *GetStakeRemovalForReputerAndTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeRemovalForReputerAndTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeRemovalForReputerAndTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeRemovalForReputerAndTopicIdRequest proto.InternalMessageInfo

func (m *GetStakeRemovalForReputerAndTopicIdRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

func (m *GetStakeRemovalForReputerAndTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetStakeRemovalForReputerAndTopicIdResponse struct {
	StakeRemovalInfo *StakeRemovalInfo `protobuf:"bytes,1,opt,name=stake_removal_info,json=stakeRemovalInfo,proto3" json:"stake_removal_info,omitempty"`
}

func (m *GetStakeRemovalForReputerAndTopicIdResponse) Reset() {
	*m = GetStakeRemovalForReputerAndTopicIdResponse{}
}
func (m *GetStakeRemovalForReputerAndTopicIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetStakeRemovalForReputerAndTopicIdResponse) ProtoMessage() {}
func (*GetStakeRemovalForReputerAndTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{143}
}
func (m *GetStakeRemovalForReputerAndTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStakeRemovalForReputerAndTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStakeRemovalForReputerAndTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStakeRemovalForReputerAndTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStakeRemovalForReputerAndTopicIdResponse.Merge(m, src)
}
func (m *GetStakeRemovalForReputerAndTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStakeRemovalForReputerAndTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStakeRemovalForReputerAndTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStakeRemovalForReputerAndTopicIdResponse proto.InternalMessageInfo

func (m *GetStakeRemovalForReputerAndTopicIdResponse) GetStakeRemovalInfo() *StakeRemovalInfo {
	if m != nil {
		return m.StakeRemovalInfo
	}
	return nil
}

type GetDelegateStakeRemovalRequest struct {
	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TopicId     uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Delegator   string `protobuf:"bytes,3,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Reputer     string `protobuf:"bytes,4,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *GetDelegateStakeRemovalRequest) Reset()         { *m = GetDelegateStakeRemovalRequest{} }
func (m *GetDelegateStakeRemovalRequest) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakeRemovalRequest) ProtoMessage()    {}
func (*GetDelegateStakeRemovalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{144}
}
func (m *GetDelegateStakeRemovalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeRemovalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeRemovalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeRemovalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeRemovalRequest.Merge(m, src)
}
func (m *GetDelegateStakeRemovalRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeRemovalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeRemovalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeRemovalRequest proto.InternalMessageInfo

func (m *GetDelegateStakeRemovalRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *GetDelegateStakeRemovalRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetDelegateStakeRemovalRequest) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *GetDelegateStakeRemovalRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type GetDelegateStakeRemovalResponse struct {
	StakeRemovalInfo *DelegateStakeRemovalInfo `protobuf:"bytes,1,opt,name=stake_removal_info,json=stakeRemovalInfo,proto3" json:"stake_removal_info,omitempty"`
}

func (m *GetDelegateStakeRemovalResponse) Reset()         { *m = GetDelegateStakeRemovalResponse{} }
func (m *GetDelegateStakeRemovalResponse) String() string { return proto.CompactTextString(m) }
func (*GetDelegateStakeRemovalResponse) ProtoMessage()    {}
func (*GetDelegateStakeRemovalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{145}
}
func (m *GetDelegateStakeRemovalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelegateStakeRemovalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelegateStakeRemovalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelegateStakeRemovalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelegateStakeRemovalResponse.Merge(m, src)
}
func (m *GetDelegateStakeRemovalResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDelegateStakeRemovalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelegateStakeRemovalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelegateStakeRemovalResponse proto.InternalMessageInfo

func (m *GetDelegateStakeRemovalResponse) GetStakeRemovalInfo() *DelegateStakeRemovalInfo {
	if m != nil {
		return m.StakeRemovalInfo
	}
	return nil
}

type GetPreviousTopicWeightRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetPreviousTopicWeightRequest) Reset()         { *m = GetPreviousTopicWeightRequest{} }
func (m *GetPreviousTopicWeightRequest) String() string { return proto.CompactTextString(m) }
func (*GetPreviousTopicWeightRequest) ProtoMessage()    {}
func (*GetPreviousTopicWeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{146}
}
func (m *GetPreviousTopicWeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousTopicWeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousTopicWeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousTopicWeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousTopicWeightRequest.Merge(m, src)
}
func (m *GetPreviousTopicWeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousTopicWeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousTopicWeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousTopicWeightRequest proto.InternalMessageInfo

func (m *GetPreviousTopicWeightRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetPreviousTopicWeightResponse struct {
	Weight   github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=weight,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"weight"`
	NotFound bool                                            `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (m *GetPreviousTopicWeightResponse) Reset()         { *m = GetPreviousTopicWeightResponse{} }
func (m *GetPreviousTopicWeightResponse) String() string { return proto.CompactTextString(m) }
func (*GetPreviousTopicWeightResponse) ProtoMessage()    {}
func (*GetPreviousTopicWeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{147}
}
func (m *GetPreviousTopicWeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousTopicWeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousTopicWeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousTopicWeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousTopicWeightResponse.Merge(m, src)
}
func (m *GetPreviousTopicWeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousTopicWeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousTopicWeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousTopicWeightResponse proto.InternalMessageInfo

func (m *GetPreviousTopicWeightResponse) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

type GetTotalSumPreviousTopicWeightsRequest struct {
}

func (m *GetTotalSumPreviousTopicWeightsRequest) Reset() {
	*m = GetTotalSumPreviousTopicWeightsRequest{}
}
func (m *GetTotalSumPreviousTopicWeightsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTotalSumPreviousTopicWeightsRequest) ProtoMessage()    {}
func (*GetTotalSumPreviousTopicWeightsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{148}
}
func (m *GetTotalSumPreviousTopicWeightsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalSumPreviousTopicWeightsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalSumPreviousTopicWeightsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalSumPreviousTopicWeightsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalSumPreviousTopicWeightsRequest.Merge(m, src)
}
func (m *GetTotalSumPreviousTopicWeightsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalSumPreviousTopicWeightsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalSumPreviousTopicWeightsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalSumPreviousTopicWeightsRequest proto.InternalMessageInfo

type GetTotalSumPreviousTopicWeightsResponse struct {
	Weight github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=weight,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"weight"`
}

func (m *GetTotalSumPreviousTopicWeightsResponse) Reset() {
	*m = GetTotalSumPreviousTopicWeightsResponse{}
}
func (m *GetTotalSumPreviousTopicWeightsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalSumPreviousTopicWeightsResponse) ProtoMessage()    {}
func (*GetTotalSumPreviousTopicWeightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{149}
}
func (m *GetTotalSumPreviousTopicWeightsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalSumPreviousTopicWeightsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalSumPreviousTopicWeightsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalSumPreviousTopicWeightsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalSumPreviousTopicWeightsResponse.Merge(m, src)
}
func (m *GetTotalSumPreviousTopicWeightsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalSumPreviousTopicWeightsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalSumPreviousTopicWeightsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalSumPreviousTopicWeightsResponse proto.InternalMessageInfo

type TopicExistsRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *TopicExistsRequest) Reset()         { *m = TopicExistsRequest{} }
func (m *TopicExistsRequest) String() string { return proto.CompactTextString(m) }
func (*TopicExistsRequest) ProtoMessage()    {}
func (*TopicExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{150}
}
func (m *TopicExistsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicExistsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicExistsRequest.Merge(m, src)
}
func (m *TopicExistsRequest) XXX_Size() int {
	return m.Size()
}
func (m *TopicExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicExistsRequest proto.InternalMessageInfo

func (m *TopicExistsRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type TopicExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *TopicExistsResponse) Reset()         { *m = TopicExistsResponse{} }
func (m *TopicExistsResponse) String() string { return proto.CompactTextString(m) }
func (*TopicExistsResponse) ProtoMessage()    {}
func (*TopicExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{151}
}
func (m *TopicExistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicExistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicExistsResponse.Merge(m, src)
}
func (m *TopicExistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *TopicExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopicExistsResponse proto.InternalMessageInfo

func (m *TopicExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type IsTopicActiveRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *IsTopicActiveRequest) Reset()         { *m = IsTopicActiveRequest{} }
func (m *IsTopicActiveRequest) String() string { return proto.CompactTextString(m) }
func (*IsTopicActiveRequest) ProtoMessage()    {}
func (*IsTopicActiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{152}
}
func (m *IsTopicActiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTopicActiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTopicActiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTopicActiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTopicActiveRequest.Merge(m, src)
}
func (m *IsTopicActiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsTopicActiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTopicActiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsTopicActiveRequest proto.InternalMessageInfo

func (m *IsTopicActiveRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type IsTopicActiveResponse struct {
	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *IsTopicActiveResponse) Reset()         { *m = IsTopicActiveResponse{} }
func (m *IsTopicActiveResponse) String() string { return proto.CompactTextString(m) }
func (*IsTopicActiveResponse) ProtoMessage()    {}
func (*IsTopicActiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{153}
}
func (m *IsTopicActiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsTopicActiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsTopicActiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsTopicActiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsTopicActiveResponse.Merge(m, src)
}
func (m *IsTopicActiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsTopicActiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsTopicActiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsTopicActiveResponse proto.InternalMessageInfo

func (m *IsTopicActiveResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type GetTopicFeeRevenueRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetTopicFeeRevenueRequest) Reset()         { *m = GetTopicFeeRevenueRequest{} }
func (m *GetTopicFeeRevenueRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicFeeRevenueRequest) ProtoMessage()    {}
func (*GetTopicFeeRevenueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{154}
}
func (m *GetTopicFeeRevenueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicFeeRevenueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicFeeRevenueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicFeeRevenueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicFeeRevenueRequest.Merge(m, src)
}
func (m *GetTopicFeeRevenueRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicFeeRevenueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicFeeRevenueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicFeeRevenueRequest proto.InternalMessageInfo

func (m *GetTopicFeeRevenueRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetTopicFeeRevenueResponse struct {
	FeeRevenue cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=fee_revenue,json=feeRevenue,proto3,customtype=cosmossdk.io/math.Int" json:"fee_revenue"`
}

func (m *GetTopicFeeRevenueResponse) Reset()         { *m = GetTopicFeeRevenueResponse{} }
func (m *GetTopicFeeRevenueResponse) String() string { return proto.CompactTextString(m) }
func (*GetTopicFeeRevenueResponse) ProtoMessage()    {}
func (*GetTopicFeeRevenueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{155}
}
func (m *GetTopicFeeRevenueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicFeeRevenueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicFeeRevenueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicFeeRevenueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicFeeRevenueResponse.Merge(m, src)
}
func (m *GetTopicFeeRevenueResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicFeeRevenueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicFeeRevenueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicFeeRevenueResponse proto.InternalMessageInfo

type GetInfererScoreEmaRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Inferer string `protobuf:"bytes,2,opt,name=inferer,proto3" json:"inferer,omitempty"`
}

func (m *GetInfererScoreEmaRequest) Reset()         { *m = GetInfererScoreEmaRequest{} }
func (m *GetInfererScoreEmaRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfererScoreEmaRequest) ProtoMessage()    {}
func (*GetInfererScoreEmaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{156}
}
func (m *GetInfererScoreEmaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfererScoreEmaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfererScoreEmaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfererScoreEmaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfererScoreEmaRequest.Merge(m, src)
}
func (m *GetInfererScoreEmaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInfererScoreEmaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfererScoreEmaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfererScoreEmaRequest proto.InternalMessageInfo

func (m *GetInfererScoreEmaRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetInfererScoreEmaRequest) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

type GetInfererScoreEmaResponse struct {
	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *GetInfererScoreEmaResponse) Reset()         { *m = GetInfererScoreEmaResponse{} }
func (m *GetInfererScoreEmaResponse) String() string { return proto.CompactTextString(m) }
func (*GetInfererScoreEmaResponse) ProtoMessage()    {}
func (*GetInfererScoreEmaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{157}
}
func (m *GetInfererScoreEmaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfererScoreEmaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfererScoreEmaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfererScoreEmaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfererScoreEmaResponse.Merge(m, src)
}
func (m *GetInfererScoreEmaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInfererScoreEmaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfererScoreEmaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfererScoreEmaResponse proto.InternalMessageInfo

func (m *GetInfererScoreEmaResponse) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type GetForecasterScoreEmaRequest struct {
	TopicId    uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Forecaster string `protobuf:"bytes,2,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
}

func (m *GetForecasterScoreEmaRequest) Reset()         { *m = GetForecasterScoreEmaRequest{} }
func (m *GetForecasterScoreEmaRequest) String() string { return proto.CompactTextString(m) }
func (*GetForecasterScoreEmaRequest) ProtoMessage()    {}
func (*GetForecasterScoreEmaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{158}
}
func (m *GetForecasterScoreEmaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetForecasterScoreEmaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetForecasterScoreEmaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetForecasterScoreEmaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetForecasterScoreEmaRequest.Merge(m, src)
}
func (m *GetForecasterScoreEmaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetForecasterScoreEmaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetForecasterScoreEmaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetForecasterScoreEmaRequest proto.InternalMessageInfo

func (m *GetForecasterScoreEmaRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetForecasterScoreEmaRequest) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

type GetForecasterScoreEmaResponse struct {
	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *GetForecasterScoreEmaResponse) Reset()         { *m = GetForecasterScoreEmaResponse{} }
func (m *GetForecasterScoreEmaResponse) String() string { return proto.CompactTextString(m) }
func (*GetForecasterScoreEmaResponse) ProtoMessage()    {}
func (*GetForecasterScoreEmaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{159}
}
func (m *GetForecasterScoreEmaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetForecasterScoreEmaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetForecasterScoreEmaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetForecasterScoreEmaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetForecasterScoreEmaResponse.Merge(m, src)
}
func (m *GetForecasterScoreEmaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetForecasterScoreEmaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetForecasterScoreEmaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetForecasterScoreEmaResponse proto.InternalMessageInfo

func (m *GetForecasterScoreEmaResponse) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type GetReputerScoreEmaRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *GetReputerScoreEmaRequest) Reset()         { *m = GetReputerScoreEmaRequest{} }
func (m *GetReputerScoreEmaRequest) String() string { return proto.CompactTextString(m) }
func (*GetReputerScoreEmaRequest) ProtoMessage()    {}
func (*GetReputerScoreEmaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{160}
}
func (m *GetReputerScoreEmaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputerScoreEmaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputerScoreEmaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputerScoreEmaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputerScoreEmaRequest.Merge(m, src)
}
func (m *GetReputerScoreEmaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReputerScoreEmaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputerScoreEmaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputerScoreEmaRequest proto.InternalMessageInfo

func (m *GetReputerScoreEmaRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetReputerScoreEmaRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type GetReputerScoreEmaResponse struct {
	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *GetReputerScoreEmaResponse) Reset()         { *m = GetReputerScoreEmaResponse{} }
func (m *GetReputerScoreEmaResponse) String() string { return proto.CompactTextString(m) }
func (*GetReputerScoreEmaResponse) ProtoMessage()    {}
func (*GetReputerScoreEmaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{161}
}
func (m *GetReputerScoreEmaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputerScoreEmaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputerScoreEmaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputerScoreEmaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputerScoreEmaResponse.Merge(m, src)
}
func (m *GetReputerScoreEmaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReputerScoreEmaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputerScoreEmaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputerScoreEmaResponse proto.InternalMessageInfo

func (m *GetReputerScoreEmaResponse) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type GetInferenceScoresUntilBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetInferenceScoresUntilBlockRequest) Reset()         { *m = GetInferenceScoresUntilBlockRequest{} }
func (m *GetInferenceScoresUntilBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetInferenceScoresUntilBlockRequest) ProtoMessage()    {}
func (*GetInferenceScoresUntilBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{162}
}
func (m *GetInferenceScoresUntilBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInferenceScoresUntilBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInferenceScoresUntilBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInferenceScoresUntilBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInferenceScoresUntilBlockRequest.Merge(m, src)
}
func (m *GetInferenceScoresUntilBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInferenceScoresUntilBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInferenceScoresUntilBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInferenceScoresUntilBlockRequest proto.InternalMessageInfo

func (m *GetInferenceScoresUntilBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetInferenceScoresUntilBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetInferenceScoresUntilBlockResponse struct {
	Scores []*Score `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (m *GetInferenceScoresUntilBlockResponse) Reset()         { *m = GetInferenceScoresUntilBlockResponse{} }
func (m *GetInferenceScoresUntilBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetInferenceScoresUntilBlockResponse) ProtoMessage()    {}
func (*GetInferenceScoresUntilBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{163}
}
func (m *GetInferenceScoresUntilBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInferenceScoresUntilBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInferenceScoresUntilBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInferenceScoresUntilBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInferenceScoresUntilBlockResponse.Merge(m, src)
}
func (m *GetInferenceScoresUntilBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInferenceScoresUntilBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInferenceScoresUntilBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInferenceScoresUntilBlockResponse proto.InternalMessageInfo

func (m *GetInferenceScoresUntilBlockResponse) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type GetPreviousTopicQuantileForecasterScoreEmaRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) Reset() {
	*m = GetPreviousTopicQuantileForecasterScoreEmaRequest{}
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousTopicQuantileForecasterScoreEmaRequest) ProtoMessage() {}
func (*GetPreviousTopicQuantileForecasterScoreEmaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{164}
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousTopicQuantileForecasterScoreEmaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousTopicQuantileForecasterScoreEmaRequest.Merge(m, src)
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousTopicQuantileForecasterScoreEmaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousTopicQuantileForecasterScoreEmaRequest proto.InternalMessageInfo

func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetPreviousTopicQuantileForecasterScoreEmaResponse struct {
	Value github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=value,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"value"`
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) Reset() {
	*m = GetPreviousTopicQuantileForecasterScoreEmaResponse{}
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousTopicQuantileForecasterScoreEmaResponse) ProtoMessage() {}
func (*GetPreviousTopicQuantileForecasterScoreEmaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{165}
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousTopicQuantileForecasterScoreEmaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousTopicQuantileForecasterScoreEmaResponse.Merge(m, src)
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousTopicQuantileForecasterScoreEmaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousTopicQuantileForecasterScoreEmaResponse proto.InternalMessageInfo

type GetPreviousTopicQuantileInfererScoreEmaRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) Reset() {
	*m = GetPreviousTopicQuantileInfererScoreEmaRequest{}
}
func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousTopicQuantileInfererScoreEmaRequest) ProtoMessage() {}
func (*GetPreviousTopicQuantileInfererScoreEmaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{166}
}
func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousTopicQuantileInfererScoreEmaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousTopicQuantileInfererScoreEmaRequest.Merge(m, src)
}
func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousTopicQuantileInfererScoreEmaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousTopicQuantileInfererScoreEmaRequest proto.InternalMessageInfo

func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetPreviousTopicQuantileInfererScoreEmaResponse struct {
	Value github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=value,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"value"`
}

func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) Reset() {
	*m = GetPreviousTopicQuantileInfererScoreEmaResponse{}
}
func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousTopicQuantileInfererScoreEmaResponse) ProtoMessage() {}
func (*GetPreviousTopicQuantileInfererScoreEmaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{167}
}
func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousTopicQuantileInfererScoreEmaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousTopicQuantileInfererScoreEmaResponse.Merge(m, src)
}
func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousTopicQuantileInfererScoreEmaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousTopicQuantileInfererScoreEmaResponse proto.InternalMessageInfo

type GetPreviousTopicQuantileReputerScoreEmaRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) Reset() {
	*m = GetPreviousTopicQuantileReputerScoreEmaRequest{}
}
func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousTopicQuantileReputerScoreEmaRequest) ProtoMessage() {}
func (*GetPreviousTopicQuantileReputerScoreEmaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{168}
}
func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousTopicQuantileReputerScoreEmaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousTopicQuantileReputerScoreEmaRequest.Merge(m, src)
}
func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousTopicQuantileReputerScoreEmaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousTopicQuantileReputerScoreEmaRequest proto.InternalMessageInfo

func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetPreviousTopicQuantileReputerScoreEmaResponse struct {
	Value github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=value,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"value"`
}

func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) Reset() {
	*m = GetPreviousTopicQuantileReputerScoreEmaResponse{}
}
func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousTopicQuantileReputerScoreEmaResponse) ProtoMessage() {}
func (*GetPreviousTopicQuantileReputerScoreEmaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{169}
}
func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousTopicQuantileReputerScoreEmaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousTopicQuantileReputerScoreEmaResponse.Merge(m, src)
}
func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousTopicQuantileReputerScoreEmaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousTopicQuantileReputerScoreEmaResponse proto.InternalMessageInfo

type GetWorkerInferenceScoresAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetWorkerInferenceScoresAtBlockRequest) Reset() {
	*m = GetWorkerInferenceScoresAtBlockRequest{}
}
func (m *GetWorkerInferenceScoresAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkerInferenceScoresAtBlockRequest) ProtoMessage()    {}
func (*GetWorkerInferenceScoresAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{170}
}
func (m *GetWorkerInferenceScoresAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerInferenceScoresAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerInferenceScoresAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerInferenceScoresAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerInferenceScoresAtBlockRequest.Merge(m, src)
}
func (m *GetWorkerInferenceScoresAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerInferenceScoresAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerInferenceScoresAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerInferenceScoresAtBlockRequest proto.InternalMessageInfo

func (m *GetWorkerInferenceScoresAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetWorkerInferenceScoresAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetWorkerInferenceScoresAtBlockResponse struct {
	Scores *Scores `protobuf:"bytes,1,opt,name=scores,proto3" json:"scores,omitempty"`
}

func (m *GetWorkerInferenceScoresAtBlockResponse) Reset() {
	*m = GetWorkerInferenceScoresAtBlockResponse{}
}
func (m *GetWorkerInferenceScoresAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetWorkerInferenceScoresAtBlockResponse) ProtoMessage()    {}
func (*GetWorkerInferenceScoresAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{171}
}
func (m *GetWorkerInferenceScoresAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerInferenceScoresAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerInferenceScoresAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerInferenceScoresAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerInferenceScoresAtBlockResponse.Merge(m, src)
}
func (m *GetWorkerInferenceScoresAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerInferenceScoresAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerInferenceScoresAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerInferenceScoresAtBlockResponse proto.InternalMessageInfo

func (m *GetWorkerInferenceScoresAtBlockResponse) GetScores() *Scores {
	if m != nil {
		return m.Scores
	}
	return nil
}

type GetCurrentLowestInfererScoreRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetCurrentLowestInfererScoreRequest) Reset()         { *m = GetCurrentLowestInfererScoreRequest{} }
func (m *GetCurrentLowestInfererScoreRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentLowestInfererScoreRequest) ProtoMessage()    {}
func (*GetCurrentLowestInfererScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{172}
}
func (m *GetCurrentLowestInfererScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentLowestInfererScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentLowestInfererScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentLowestInfererScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentLowestInfererScoreRequest.Merge(m, src)
}
func (m *GetCurrentLowestInfererScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentLowestInfererScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentLowestInfererScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentLowestInfererScoreRequest proto.InternalMessageInfo

func (m *GetCurrentLowestInfererScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetCurrentLowestInfererScoreResponse struct {
	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *GetCurrentLowestInfererScoreResponse) Reset()         { *m = GetCurrentLowestInfererScoreResponse{} }
func (m *GetCurrentLowestInfererScoreResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentLowestInfererScoreResponse) ProtoMessage()    {}
func (*GetCurrentLowestInfererScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{173}
}
func (m *GetCurrentLowestInfererScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentLowestInfererScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentLowestInfererScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentLowestInfererScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentLowestInfererScoreResponse.Merge(m, src)
}
func (m *GetCurrentLowestInfererScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentLowestInfererScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentLowestInfererScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentLowestInfererScoreResponse proto.InternalMessageInfo

func (m *GetCurrentLowestInfererScoreResponse) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type GetForecastScoresUntilBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetForecastScoresUntilBlockRequest) Reset()         { *m = GetForecastScoresUntilBlockRequest{} }
func (m *GetForecastScoresUntilBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetForecastScoresUntilBlockRequest) ProtoMessage()    {}
func (*GetForecastScoresUntilBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{174}
}
func (m *GetForecastScoresUntilBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetForecastScoresUntilBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetForecastScoresUntilBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetForecastScoresUntilBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetForecastScoresUntilBlockRequest.Merge(m, src)
}
func (m *GetForecastScoresUntilBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetForecastScoresUntilBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetForecastScoresUntilBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetForecastScoresUntilBlockRequest proto.InternalMessageInfo

func (m *GetForecastScoresUntilBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetForecastScoresUntilBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetForecastScoresUntilBlockResponse struct {
	Scores []*Score `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (m *GetForecastScoresUntilBlockResponse) Reset()         { *m = GetForecastScoresUntilBlockResponse{} }
func (m *GetForecastScoresUntilBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetForecastScoresUntilBlockResponse) ProtoMessage()    {}
func (*GetForecastScoresUntilBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{175}
}
func (m *GetForecastScoresUntilBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetForecastScoresUntilBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetForecastScoresUntilBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetForecastScoresUntilBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetForecastScoresUntilBlockResponse.Merge(m, src)
}
func (m *GetForecastScoresUntilBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetForecastScoresUntilBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetForecastScoresUntilBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetForecastScoresUntilBlockResponse proto.InternalMessageInfo

func (m *GetForecastScoresUntilBlockResponse) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type GetWorkerForecastScoresAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetWorkerForecastScoresAtBlockRequest) Reset()         { *m = GetWorkerForecastScoresAtBlockRequest{} }
func (m *GetWorkerForecastScoresAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkerForecastScoresAtBlockRequest) ProtoMessage()    {}
func (*GetWorkerForecastScoresAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{176}
}
func (m *GetWorkerForecastScoresAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerForecastScoresAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerForecastScoresAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerForecastScoresAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerForecastScoresAtBlockRequest.Merge(m, src)
}
func (m *GetWorkerForecastScoresAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerForecastScoresAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerForecastScoresAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerForecastScoresAtBlockRequest proto.InternalMessageInfo

func (m *GetWorkerForecastScoresAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetWorkerForecastScoresAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetWorkerForecastScoresAtBlockResponse struct {
	Scores *Scores `protobuf:"bytes,1,opt,name=scores,proto3" json:"scores,omitempty"`
}

func (m *GetWorkerForecastScoresAtBlockResponse) Reset() {
	*m = GetWorkerForecastScoresAtBlockResponse{}
}
func (m *GetWorkerForecastScoresAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetWorkerForecastScoresAtBlockResponse) ProtoMessage()    {}
func (*GetWorkerForecastScoresAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{177}
}
func (m *GetWorkerForecastScoresAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerForecastScoresAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerForecastScoresAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerForecastScoresAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerForecastScoresAtBlockResponse.Merge(m, src)
}
func (m *GetWorkerForecastScoresAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerForecastScoresAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerForecastScoresAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerForecastScoresAtBlockResponse proto.InternalMessageInfo

func (m *GetWorkerForecastScoresAtBlockResponse) GetScores() *Scores {
	if m != nil {
		return m.Scores
	}
	return nil
}

type GetCurrentLowestForecasterScoreRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetCurrentLowestForecasterScoreRequest) Reset() {
	*m = GetCurrentLowestForecasterScoreRequest{}
}
func (m *GetCurrentLowestForecasterScoreRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentLowestForecasterScoreRequest) ProtoMessage()    {}
func (*GetCurrentLowestForecasterScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{178}
}
func (m *GetCurrentLowestForecasterScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentLowestForecasterScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentLowestForecasterScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentLowestForecasterScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentLowestForecasterScoreRequest.Merge(m, src)
}
func (m *GetCurrentLowestForecasterScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentLowestForecasterScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentLowestForecasterScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentLowestForecasterScoreRequest proto.InternalMessageInfo

func (m *GetCurrentLowestForecasterScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetCurrentLowestForecasterScoreResponse struct {
	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *GetCurrentLowestForecasterScoreResponse) Reset() {
	*m = GetCurrentLowestForecasterScoreResponse{}
}
func (m *GetCurrentLowestForecasterScoreResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentLowestForecasterScoreResponse) ProtoMessage()    {}
func (*GetCurrentLowestForecasterScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{179}
}
func (m *GetCurrentLowestForecasterScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentLowestForecasterScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentLowestForecasterScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentLowestForecasterScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentLowestForecasterScoreResponse.Merge(m, src)
}
func (m *GetCurrentLowestForecasterScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentLowestForecasterScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentLowestForecasterScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentLowestForecasterScoreResponse proto.InternalMessageInfo

func (m *GetCurrentLowestForecasterScoreResponse) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type GetReputersScoresAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetReputersScoresAtBlockRequest) Reset()         { *m = GetReputersScoresAtBlockRequest{} }
func (m *GetReputersScoresAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetReputersScoresAtBlockRequest) ProtoMessage()    {}
func (*GetReputersScoresAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{180}
}
func (m *GetReputersScoresAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputersScoresAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputersScoresAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputersScoresAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputersScoresAtBlockRequest.Merge(m, src)
}
func (m *GetReputersScoresAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReputersScoresAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputersScoresAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputersScoresAtBlockRequest proto.InternalMessageInfo

func (m *GetReputersScoresAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetReputersScoresAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetReputersScoresAtBlockResponse struct {
	Scores *Scores `protobuf:"bytes,1,opt,name=scores,proto3" json:"scores,omitempty"`
}

func (m *GetReputersScoresAtBlockResponse) Reset()         { *m = GetReputersScoresAtBlockResponse{} }
func (m *GetReputersScoresAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetReputersScoresAtBlockResponse) ProtoMessage()    {}
func (*GetReputersScoresAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{181}
}
func (m *GetReputersScoresAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReputersScoresAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReputersScoresAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReputersScoresAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReputersScoresAtBlockResponse.Merge(m, src)
}
func (m *GetReputersScoresAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReputersScoresAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReputersScoresAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReputersScoresAtBlockResponse proto.InternalMessageInfo

func (m *GetReputersScoresAtBlockResponse) GetScores() *Scores {
	if m != nil {
		return m.Scores
	}
	return nil
}

type GetCurrentLowestReputerScoreRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetCurrentLowestReputerScoreRequest) Reset()         { *m = GetCurrentLowestReputerScoreRequest{} }
func (m *GetCurrentLowestReputerScoreRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentLowestReputerScoreRequest) ProtoMessage()    {}
func (*GetCurrentLowestReputerScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{182}
}
func (m *GetCurrentLowestReputerScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentLowestReputerScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentLowestReputerScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentLowestReputerScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentLowestReputerScoreRequest.Merge(m, src)
}
func (m *GetCurrentLowestReputerScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentLowestReputerScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentLowestReputerScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentLowestReputerScoreRequest proto.InternalMessageInfo

func (m *GetCurrentLowestReputerScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetCurrentLowestReputerScoreResponse struct {
	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *GetCurrentLowestReputerScoreResponse) Reset()         { *m = GetCurrentLowestReputerScoreResponse{} }
func (m *GetCurrentLowestReputerScoreResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentLowestReputerScoreResponse) ProtoMessage()    {}
func (*GetCurrentLowestReputerScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{183}
}
func (m *GetCurrentLowestReputerScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentLowestReputerScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentLowestReputerScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentLowestReputerScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentLowestReputerScoreResponse.Merge(m, src)
}
func (m *GetCurrentLowestReputerScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentLowestReputerScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentLowestReputerScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentLowestReputerScoreResponse proto.InternalMessageInfo

func (m *GetCurrentLowestReputerScoreResponse) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type GetListeningCoefficientRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *GetListeningCoefficientRequest) Reset()         { *m = GetListeningCoefficientRequest{} }
func (m *GetListeningCoefficientRequest) String() string { return proto.CompactTextString(m) }
func (*GetListeningCoefficientRequest) ProtoMessage()    {}
func (*GetListeningCoefficientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{184}
}
func (m *GetListeningCoefficientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetListeningCoefficientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetListeningCoefficientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetListeningCoefficientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetListeningCoefficientRequest.Merge(m, src)
}
func (m *GetListeningCoefficientRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetListeningCoefficientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetListeningCoefficientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetListeningCoefficientRequest proto.InternalMessageInfo

func (m *GetListeningCoefficientRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetListeningCoefficientRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type GetListeningCoefficientResponse struct {
	ListeningCoefficient *ListeningCoefficient `protobuf:"bytes,1,opt,name=listening_coefficient,json=listeningCoefficient,proto3" json:"listening_coefficient,omitempty"`
}

func (m *GetListeningCoefficientResponse) Reset()         { *m = GetListeningCoefficientResponse{} }
func (m *GetListeningCoefficientResponse) String() string { return proto.CompactTextString(m) }
func (*GetListeningCoefficientResponse) ProtoMessage()    {}
func (*GetListeningCoefficientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{185}
}
func (m *GetListeningCoefficientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetListeningCoefficientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetListeningCoefficientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetListeningCoefficientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetListeningCoefficientResponse.Merge(m, src)
}
func (m *GetListeningCoefficientResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetListeningCoefficientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetListeningCoefficientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetListeningCoefficientResponse proto.InternalMessageInfo

func (m *GetListeningCoefficientResponse) GetListeningCoefficient() *ListeningCoefficient {
	if m != nil {
		return m.ListeningCoefficient
	}
	return nil
}

type GetPreviousReputerRewardFractionRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *GetPreviousReputerRewardFractionRequest) Reset() {
	*m = GetPreviousReputerRewardFractionRequest{}
}
func (m *GetPreviousReputerRewardFractionRequest) String() string { return proto.CompactTextString(m) }
func (*GetPreviousReputerRewardFractionRequest) ProtoMessage()    {}
func (*GetPreviousReputerRewardFractionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{186}
}
func (m *GetPreviousReputerRewardFractionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousReputerRewardFractionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousReputerRewardFractionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousReputerRewardFractionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousReputerRewardFractionRequest.Merge(m, src)
}
func (m *GetPreviousReputerRewardFractionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousReputerRewardFractionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousReputerRewardFractionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousReputerRewardFractionRequest proto.InternalMessageInfo

func (m *GetPreviousReputerRewardFractionRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetPreviousReputerRewardFractionRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type GetPreviousReputerRewardFractionResponse struct {
	RewardFraction github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=reward_fraction,json=rewardFraction,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"reward_fraction"`
	NotFound       bool                                            `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (m *GetPreviousReputerRewardFractionResponse) Reset() {
	*m = GetPreviousReputerRewardFractionResponse{}
}
func (m *GetPreviousReputerRewardFractionResponse) String() string { return proto.CompactTextString(m) }
func (*GetPreviousReputerRewardFractionResponse) ProtoMessage()    {}
func (*GetPreviousReputerRewardFractionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{187}
}
func (m *GetPreviousReputerRewardFractionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousReputerRewardFractionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousReputerRewardFractionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousReputerRewardFractionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousReputerRewardFractionResponse.Merge(m, src)
}
func (m *GetPreviousReputerRewardFractionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousReputerRewardFractionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousReputerRewardFractionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousReputerRewardFractionResponse proto.InternalMessageInfo

func (m *GetPreviousReputerRewardFractionResponse) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

type GetPreviousInferenceRewardFractionRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Worker  string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (m *GetPreviousInferenceRewardFractionRequest) Reset() {
	*m = GetPreviousInferenceRewardFractionRequest{}
}
func (m *GetPreviousInferenceRewardFractionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousInferenceRewardFractionRequest) ProtoMessage() {}
func (*GetPreviousInferenceRewardFractionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{188}
}
func (m *GetPreviousInferenceRewardFractionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousInferenceRewardFractionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousInferenceRewardFractionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousInferenceRewardFractionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousInferenceRewardFractionRequest.Merge(m, src)
}
func (m *GetPreviousInferenceRewardFractionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousInferenceRewardFractionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousInferenceRewardFractionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousInferenceRewardFractionRequest proto.InternalMessageInfo

func (m *GetPreviousInferenceRewardFractionRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetPreviousInferenceRewardFractionRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type GetPreviousInferenceRewardFractionResponse struct {
	RewardFraction github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=reward_fraction,json=rewardFraction,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"reward_fraction"`
	NotFound       bool                                            `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (m *GetPreviousInferenceRewardFractionResponse) Reset() {
	*m = GetPreviousInferenceRewardFractionResponse{}
}
func (m *GetPreviousInferenceRewardFractionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousInferenceRewardFractionResponse) ProtoMessage() {}
func (*GetPreviousInferenceRewardFractionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{189}
}
func (m *GetPreviousInferenceRewardFractionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousInferenceRewardFractionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousInferenceRewardFractionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousInferenceRewardFractionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousInferenceRewardFractionResponse.Merge(m, src)
}
func (m *GetPreviousInferenceRewardFractionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousInferenceRewardFractionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousInferenceRewardFractionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousInferenceRewardFractionResponse proto.InternalMessageInfo

func (m *GetPreviousInferenceRewardFractionResponse) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

type GetPreviousForecastRewardFractionRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Worker  string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (m *GetPreviousForecastRewardFractionRequest) Reset() {
	*m = GetPreviousForecastRewardFractionRequest{}
}
func (m *GetPreviousForecastRewardFractionRequest) String() string { return proto.CompactTextString(m) }
func (*GetPreviousForecastRewardFractionRequest) ProtoMessage()    {}
func (*GetPreviousForecastRewardFractionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{190}
}
func (m *GetPreviousForecastRewardFractionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousForecastRewardFractionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousForecastRewardFractionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousForecastRewardFractionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousForecastRewardFractionRequest.Merge(m, src)
}
func (m *GetPreviousForecastRewardFractionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousForecastRewardFractionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousForecastRewardFractionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousForecastRewardFractionRequest proto.InternalMessageInfo

func (m *GetPreviousForecastRewardFractionRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *GetPreviousForecastRewardFractionRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type GetPreviousForecastRewardFractionResponse struct {
	RewardFraction github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=reward_fraction,json=rewardFraction,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"reward_fraction"`
	NotFound       bool                                            `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (m *GetPreviousForecastRewardFractionResponse) Reset() {
	*m = GetPreviousForecastRewardFractionResponse{}
}
func (m *GetPreviousForecastRewardFractionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousForecastRewardFractionResponse) ProtoMessage() {}
func (*GetPreviousForecastRewardFractionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{191}
}
func (m *GetPreviousForecastRewardFractionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousForecastRewardFractionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousForecastRewardFractionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousForecastRewardFractionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousForecastRewardFractionResponse.Merge(m, src)
}
func (m *GetPreviousForecastRewardFractionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousForecastRewardFractionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousForecastRewardFractionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousForecastRewardFractionResponse proto.InternalMessageInfo

func (m *GetPreviousForecastRewardFractionResponse) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

type GetPreviousPercentageRewardToStakedReputersRequest struct {
}

func (m *GetPreviousPercentageRewardToStakedReputersRequest) Reset() {
	*m = GetPreviousPercentageRewardToStakedReputersRequest{}
}
func (m *GetPreviousPercentageRewardToStakedReputersRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousPercentageRewardToStakedReputersRequest) ProtoMessage() {}
func (*GetPreviousPercentageRewardToStakedReputersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{192}
}
func (m *GetPreviousPercentageRewardToStakedReputersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousPercentageRewardToStakedReputersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousPercentageRewardToStakedReputersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousPercentageRewardToStakedReputersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousPercentageRewardToStakedReputersRequest.Merge(m, src)
}
func (m *GetPreviousPercentageRewardToStakedReputersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousPercentageRewardToStakedReputersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousPercentageRewardToStakedReputersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousPercentageRewardToStakedReputersRequest proto.InternalMessageInfo

type GetPreviousPercentageRewardToStakedReputersResponse struct {
	PercentageReward github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=percentage_reward,json=percentageReward,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"percentage_reward"`
}

func (m *GetPreviousPercentageRewardToStakedReputersResponse) Reset() {
	*m = GetPreviousPercentageRewardToStakedReputersResponse{}
}
func (m *GetPreviousPercentageRewardToStakedReputersResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetPreviousPercentageRewardToStakedReputersResponse) ProtoMessage() {}
func (*GetPreviousPercentageRewardToStakedReputersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{193}
}
func (m *GetPreviousPercentageRewardToStakedReputersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreviousPercentageRewardToStakedReputersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreviousPercentageRewardToStakedReputersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreviousPercentageRewardToStakedReputersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreviousPercentageRewardToStakedReputersResponse.Merge(m, src)
}
func (m *GetPreviousPercentageRewardToStakedReputersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPreviousPercentageRewardToStakedReputersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreviousPercentageRewardToStakedReputersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreviousPercentageRewardToStakedReputersResponse proto.InternalMessageInfo

type GetTotalRewardToDistributeRequest struct {
}

func (m *GetTotalRewardToDistributeRequest) Reset()         { *m = GetTotalRewardToDistributeRequest{} }
func (m *GetTotalRewardToDistributeRequest) String() string { return proto.CompactTextString(m) }
func (*GetTotalRewardToDistributeRequest) ProtoMessage()    {}
func (*GetTotalRewardToDistributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{194}
}
func (m *GetTotalRewardToDistributeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalRewardToDistributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalRewardToDistributeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalRewardToDistributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalRewardToDistributeRequest.Merge(m, src)
}
func (m *GetTotalRewardToDistributeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalRewardToDistributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalRewardToDistributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalRewardToDistributeRequest proto.InternalMessageInfo

type GetTotalRewardToDistributeResponse struct {
	TotalReward github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=total_reward,json=totalReward,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"total_reward"`
}

func (m *GetTotalRewardToDistributeResponse) Reset()         { *m = GetTotalRewardToDistributeResponse{} }
func (m *GetTotalRewardToDistributeResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalRewardToDistributeResponse) ProtoMessage()    {}
func (*GetTotalRewardToDistributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{195}
}
func (m *GetTotalRewardToDistributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalRewardToDistributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalRewardToDistributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalRewardToDistributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalRewardToDistributeResponse.Merge(m, src)
}
func (m *GetTotalRewardToDistributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalRewardToDistributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalRewardToDistributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalRewardToDistributeResponse proto.InternalMessageInfo

type GetActiveTopicsAtBlockRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetActiveTopicsAtBlockRequest) Reset()         { *m = GetActiveTopicsAtBlockRequest{} }
func (m *GetActiveTopicsAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetActiveTopicsAtBlockRequest) ProtoMessage()    {}
func (*GetActiveTopicsAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{196}
}
func (m *GetActiveTopicsAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveTopicsAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveTopicsAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveTopicsAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveTopicsAtBlockRequest.Merge(m, src)
}
func (m *GetActiveTopicsAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveTopicsAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveTopicsAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveTopicsAtBlockRequest proto.InternalMessageInfo

func (m *GetActiveTopicsAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetActiveTopicsAtBlockResponse struct {
	Topics     []*Topic                        `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	Pagination *SimpleCursorPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetActiveTopicsAtBlockResponse) Reset()         { *m = GetActiveTopicsAtBlockResponse{} }
func (m *GetActiveTopicsAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*GetActiveTopicsAtBlockResponse) ProtoMessage()    {}
func (*GetActiveTopicsAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{197}
}
func (m *GetActiveTopicsAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveTopicsAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveTopicsAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveTopicsAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveTopicsAtBlockResponse.Merge(m, src)
}
func (m *GetActiveTopicsAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveTopicsAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveTopicsAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveTopicsAtBlockResponse proto.InternalMessageInfo

func (m *GetActiveTopicsAtBlockResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *GetActiveTopicsAtBlockResponse) GetPagination() *SimpleCursorPaginationResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type GetNextChurningBlockByTopicIdRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetNextChurningBlockByTopicIdRequest) Reset()         { *m = GetNextChurningBlockByTopicIdRequest{} }
func (m *GetNextChurningBlockByTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetNextChurningBlockByTopicIdRequest) ProtoMessage()    {}
func (*GetNextChurningBlockByTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{198}
}
func (m *GetNextChurningBlockByTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNextChurningBlockByTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNextChurningBlockByTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNextChurningBlockByTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextChurningBlockByTopicIdRequest.Merge(m, src)
}
func (m *GetNextChurningBlockByTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNextChurningBlockByTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextChurningBlockByTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextChurningBlockByTopicIdRequest proto.InternalMessageInfo

func (m *GetNextChurningBlockByTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetNextChurningBlockByTopicIdResponse struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *GetNextChurningBlockByTopicIdResponse) Reset()         { *m = GetNextChurningBlockByTopicIdResponse{} }
func (m *GetNextChurningBlockByTopicIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetNextChurningBlockByTopicIdResponse) ProtoMessage()    {}
func (*GetNextChurningBlockByTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{199}
}
func (m *GetNextChurningBlockByTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNextChurningBlockByTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNextChurningBlockByTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNextChurningBlockByTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextChurningBlockByTopicIdResponse.Merge(m, src)
}
func (m *GetNextChurningBlockByTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNextChurningBlockByTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextChurningBlockByTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextChurningBlockByTopicIdResponse proto.InternalMessageInfo

func (m *GetNextChurningBlockByTopicIdResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type GetActiveReputersForTopicRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetActiveReputersForTopicRequest) Reset()         { *m = GetActiveReputersForTopicRequest{} }
func (m *GetActiveReputersForTopicRequest) String() string { return proto.CompactTextString(m) }
func (*GetActiveReputersForTopicRequest) ProtoMessage()    {}
func (*GetActiveReputersForTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{200}
}
func (m *GetActiveReputersForTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveReputersForTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveReputersForTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveReputersForTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveReputersForTopicRequest.Merge(m, src)
}
func (m *GetActiveReputersForTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveReputersForTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveReputersForTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveReputersForTopicRequest proto.InternalMessageInfo

func (m *GetActiveReputersForTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetActiveReputersForTopicResponse struct {
	Reputers []string `protobuf:"bytes,1,rep,name=reputers,proto3" json:"reputers,omitempty"`
}

func (m *GetActiveReputersForTopicResponse) Reset()         { *m = GetActiveReputersForTopicResponse{} }
func (m *GetActiveReputersForTopicResponse) String() string { return proto.CompactTextString(m) }
func (*GetActiveReputersForTopicResponse) ProtoMessage()    {}
func (*GetActiveReputersForTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{201}
}
func (m *GetActiveReputersForTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveReputersForTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveReputersForTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveReputersForTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveReputersForTopicResponse.Merge(m, src)
}
func (m *GetActiveReputersForTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveReputersForTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveReputersForTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveReputersForTopicResponse proto.InternalMessageInfo

func (m *GetActiveReputersForTopicResponse) GetReputers() []string {
	if m != nil {
		return m.Reputers
	}
	return nil
}

type GetActiveForecastersForTopicRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetActiveForecastersForTopicRequest) Reset()         { *m = GetActiveForecastersForTopicRequest{} }
func (m *GetActiveForecastersForTopicRequest) String() string { return proto.CompactTextString(m) }
func (*GetActiveForecastersForTopicRequest) ProtoMessage()    {}
func (*GetActiveForecastersForTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{202}
}
func (m *GetActiveForecastersForTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveForecastersForTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveForecastersForTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveForecastersForTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveForecastersForTopicRequest.Merge(m, src)
}
func (m *GetActiveForecastersForTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveForecastersForTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveForecastersForTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveForecastersForTopicRequest proto.InternalMessageInfo

func (m *GetActiveForecastersForTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetActiveForecastersForTopicResponse struct {
	Forecasters []string `protobuf:"bytes,1,rep,name=forecasters,proto3" json:"forecasters,omitempty"`
}

func (m *GetActiveForecastersForTopicResponse) Reset()         { *m = GetActiveForecastersForTopicResponse{} }
func (m *GetActiveForecastersForTopicResponse) String() string { return proto.CompactTextString(m) }
func (*GetActiveForecastersForTopicResponse) ProtoMessage()    {}
func (*GetActiveForecastersForTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{203}
}
func (m *GetActiveForecastersForTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveForecastersForTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveForecastersForTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveForecastersForTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveForecastersForTopicResponse.Merge(m, src)
}
func (m *GetActiveForecastersForTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveForecastersForTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveForecastersForTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveForecastersForTopicResponse proto.InternalMessageInfo

func (m *GetActiveForecastersForTopicResponse) GetForecasters() []string {
	if m != nil {
		return m.Forecasters
	}
	return nil
}

type GetActiveInferersForTopicRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetActiveInferersForTopicRequest) Reset()         { *m = GetActiveInferersForTopicRequest{} }
func (m *GetActiveInferersForTopicRequest) String() string { return proto.CompactTextString(m) }
func (*GetActiveInferersForTopicRequest) ProtoMessage()    {}
func (*GetActiveInferersForTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{204}
}
func (m *GetActiveInferersForTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveInferersForTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveInferersForTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveInferersForTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveInferersForTopicRequest.Merge(m, src)
}
func (m *GetActiveInferersForTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveInferersForTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveInferersForTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveInferersForTopicRequest proto.InternalMessageInfo

func (m *GetActiveInferersForTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetActiveInferersForTopicResponse struct {
	Inferers []string `protobuf:"bytes,1,rep,name=inferers,proto3" json:"inferers,omitempty"`
}

func (m *GetActiveInferersForTopicResponse) Reset()         { *m = GetActiveInferersForTopicResponse{} }
func (m *GetActiveInferersForTopicResponse) String() string { return proto.CompactTextString(m) }
func (*GetActiveInferersForTopicResponse) ProtoMessage()    {}
func (*GetActiveInferersForTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{205}
}
func (m *GetActiveInferersForTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActiveInferersForTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActiveInferersForTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActiveInferersForTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveInferersForTopicResponse.Merge(m, src)
}
func (m *GetActiveInferersForTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetActiveInferersForTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveInferersForTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveInferersForTopicResponse proto.InternalMessageInfo

func (m *GetActiveInferersForTopicResponse) GetInferers() []string {
	if m != nil {
		return m.Inferers
	}
	return nil
}

type GetTopicInitialInfererEmaScoreRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetTopicInitialInfererEmaScoreRequest) Reset()         { *m = GetTopicInitialInfererEmaScoreRequest{} }
func (m *GetTopicInitialInfererEmaScoreRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicInitialInfererEmaScoreRequest) ProtoMessage()    {}
func (*GetTopicInitialInfererEmaScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{206}
}
func (m *GetTopicInitialInfererEmaScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicInitialInfererEmaScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicInitialInfererEmaScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicInitialInfererEmaScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicInitialInfererEmaScoreRequest.Merge(m, src)
}
func (m *GetTopicInitialInfererEmaScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicInitialInfererEmaScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicInitialInfererEmaScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicInitialInfererEmaScoreRequest proto.InternalMessageInfo

func (m *GetTopicInitialInfererEmaScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetTopicInitialInfererEmaScoreResponse struct {
	Score github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=score,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"score"`
}

func (m *GetTopicInitialInfererEmaScoreResponse) Reset() {
	*m = GetTopicInitialInfererEmaScoreResponse{}
}
func (m *GetTopicInitialInfererEmaScoreResponse) String() string { return proto.CompactTextString(m) }
func (*GetTopicInitialInfererEmaScoreResponse) ProtoMessage()    {}
func (*GetTopicInitialInfererEmaScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{207}
}
func (m *GetTopicInitialInfererEmaScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicInitialInfererEmaScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicInitialInfererEmaScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicInitialInfererEmaScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicInitialInfererEmaScoreResponse.Merge(m, src)
}
func (m *GetTopicInitialInfererEmaScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicInitialInfererEmaScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicInitialInfererEmaScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicInitialInfererEmaScoreResponse proto.InternalMessageInfo

type GetTopicInitialForecasterEmaScoreRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetTopicInitialForecasterEmaScoreRequest) Reset() {
	*m = GetTopicInitialForecasterEmaScoreRequest{}
}
func (m *GetTopicInitialForecasterEmaScoreRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicInitialForecasterEmaScoreRequest) ProtoMessage()    {}
func (*GetTopicInitialForecasterEmaScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{208}
}
func (m *GetTopicInitialForecasterEmaScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicInitialForecasterEmaScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicInitialForecasterEmaScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicInitialForecasterEmaScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicInitialForecasterEmaScoreRequest.Merge(m, src)
}
func (m *GetTopicInitialForecasterEmaScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicInitialForecasterEmaScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicInitialForecasterEmaScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicInitialForecasterEmaScoreRequest proto.InternalMessageInfo

func (m *GetTopicInitialForecasterEmaScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetTopicInitialForecasterEmaScoreResponse struct {
	Score github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=score,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"score"`
}

func (m *GetTopicInitialForecasterEmaScoreResponse) Reset() {
	*m = GetTopicInitialForecasterEmaScoreResponse{}
}
func (m *GetTopicInitialForecasterEmaScoreResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetTopicInitialForecasterEmaScoreResponse) ProtoMessage() {}
func (*GetTopicInitialForecasterEmaScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{209}
}
func (m *GetTopicInitialForecasterEmaScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicInitialForecasterEmaScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicInitialForecasterEmaScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicInitialForecasterEmaScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicInitialForecasterEmaScoreResponse.Merge(m, src)
}
func (m *GetTopicInitialForecasterEmaScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicInitialForecasterEmaScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicInitialForecasterEmaScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicInitialForecasterEmaScoreResponse proto.InternalMessageInfo

type GetTopicInitialReputerEmaScoreRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *GetTopicInitialReputerEmaScoreRequest) Reset()         { *m = GetTopicInitialReputerEmaScoreRequest{} }
func (m *GetTopicInitialReputerEmaScoreRequest) String() string { return proto.CompactTextString(m) }
func (*GetTopicInitialReputerEmaScoreRequest) ProtoMessage()    {}
func (*GetTopicInitialReputerEmaScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{210}
}
func (m *GetTopicInitialReputerEmaScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicInitialReputerEmaScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicInitialReputerEmaScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicInitialReputerEmaScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicInitialReputerEmaScoreRequest.Merge(m, src)
}
func (m *GetTopicInitialReputerEmaScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicInitialReputerEmaScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicInitialReputerEmaScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicInitialReputerEmaScoreRequest proto.InternalMessageInfo

func (m *GetTopicInitialReputerEmaScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type GetTopicInitialReputerEmaScoreResponse struct {
	Score github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=score,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"score"`
}

func (m *GetTopicInitialReputerEmaScoreResponse) Reset() {
	*m = GetTopicInitialReputerEmaScoreResponse{}
}
func (m *GetTopicInitialReputerEmaScoreResponse) String() string { return proto.CompactTextString(m) }
func (*GetTopicInitialReputerEmaScoreResponse) ProtoMessage()    {}
func (*GetTopicInitialReputerEmaScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_654c5ef5213700ee, []int{211}
}
func (m *GetTopicInitialReputerEmaScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTopicInitialReputerEmaScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTopicInitialReputerEmaScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTopicInitialReputerEmaScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTopicInitialReputerEmaScoreResponse.Merge(m, src)
}
func (m *GetTopicInitialReputerEmaScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTopicInitialReputerEmaScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTopicInitialReputerEmaScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTopicInitialReputerEmaScoreResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IsWhitelistedGlobalWorkerRequest)(nil), "emissions.v7.IsWhitelistedGlobalWorkerRequest")
	proto.RegisterType((*IsWhitelistedGlobalWorkerResponse)(nil), "emissions.v7.IsWhitelistedGlobalWorkerResponse")
	proto.RegisterType((*IsWhitelistedGlobalReputerRequest)(nil), "emissions.v7.IsWhitelistedGlobalReputerRequest")
	proto.RegisterType((*IsWhitelistedGlobalReputerResponse)(nil), "emissions.v7.IsWhitelistedGlobalReputerResponse")
	proto.RegisterType((*IsWhitelistedGlobalAdminRequest)(nil), "emissions.v7.IsWhitelistedGlobalAdminRequest")
	proto.RegisterType((*IsWhitelistedGlobalAdminResponse)(nil), "emissions.v7.IsWhitelistedGlobalAdminResponse")
	proto.RegisterType((*IsTopicWorkerWhitelistEnabledRequest)(nil), "emissions.v7.IsTopicWorkerWhitelistEnabledRequest")
	proto.RegisterType((*IsTopicWorkerWhitelistEnabledResponse)(nil), "emissions.v7.IsTopicWorkerWhitelistEnabledResponse")
	proto.RegisterType((*IsTopicReputerWhitelistEnabledRequest)(nil), "emissions.v7.IsTopicReputerWhitelistEnabledRequest")
	proto.RegisterType((*IsTopicReputerWhitelistEnabledResponse)(nil), "emissions.v7.IsTopicReputerWhitelistEnabledResponse")
	proto.RegisterType((*IsWhitelistedTopicCreatorRequest)(nil), "emissions.v7.IsWhitelistedTopicCreatorRequest")
	proto.RegisterType((*IsWhitelistedTopicCreatorResponse)(nil), "emissions.v7.IsWhitelistedTopicCreatorResponse")
	proto.RegisterType((*IsWhitelistedGlobalActorRequest)(nil), "emissions.v7.IsWhitelistedGlobalActorRequest")
	proto.RegisterType((*IsWhitelistedGlobalActorResponse)(nil), "emissions.v7.IsWhitelistedGlobalActorResponse")
	proto.RegisterType((*IsWhitelistedTopicWorkerRequest)(nil), "emissions.v7.IsWhitelistedTopicWorkerRequest")
	proto.RegisterType((*IsWhitelistedTopicWorkerResponse)(nil), "emissions.v7.IsWhitelistedTopicWorkerResponse")
	proto.RegisterType((*IsWhitelistedTopicReputerRequest)(nil), "emissions.v7.IsWhitelistedTopicReputerRequest")
	proto.RegisterType((*IsWhitelistedTopicReputerResponse)(nil), "emissions.v7.IsWhitelistedTopicReputerResponse")
	proto.RegisterType((*CanUpdateAllGlobalWhitelistsRequest)(nil), "emissions.v7.CanUpdateAllGlobalWhitelistsRequest")
	proto.RegisterType((*CanUpdateAllGlobalWhitelistsResponse)(nil), "emissions.v7.CanUpdateAllGlobalWhitelistsResponse")
	proto.RegisterType((*CanUpdateGlobalWorkerWhitelistRequest)(nil), "emissions.v7.CanUpdateGlobalWorkerWhitelistRequest")
	proto.RegisterType((*CanUpdateGlobalWorkerWhitelistResponse)(nil), "emissions.v7.CanUpdateGlobalWorkerWhitelistResponse")
	proto.RegisterType((*CanUpdateGlobalReputerWhitelistRequest)(nil), "emissions.v7.CanUpdateGlobalReputerWhitelistRequest")
	proto.RegisterType((*CanUpdateGlobalReputerWhitelistResponse)(nil), "emissions.v7.CanUpdateGlobalReputerWhitelistResponse")
	proto.RegisterType((*CanUpdateParamsRequest)(nil), "emissions.v7.CanUpdateParamsRequest")
	proto.RegisterType((*CanUpdateParamsResponse)(nil), "emissions.v7.CanUpdateParamsResponse")
	proto.RegisterType((*CanUpdateTopicWhitelistRequest)(nil), "emissions.v7.CanUpdateTopicWhitelistRequest")
	proto.RegisterType((*CanUpdateTopicWhitelistResponse)(nil), "emissions.v7.CanUpdateTopicWhitelistResponse")
	proto.RegisterType((*CanCreateTopicRequest)(nil), "emissions.v7.CanCreateTopicRequest")
	proto.RegisterType((*CanCreateTopicResponse)(nil), "emissions.v7.CanCreateTopicResponse")
	proto.RegisterType((*CanSubmitWorkerPayloadRequest)(nil), "emissions.v7.CanSubmitWorkerPayloadRequest")
	proto.RegisterType((*CanSubmitWorkerPayloadResponse)(nil), "emissions.v7.CanSubmitWorkerPayloadResponse")
	proto.RegisterType((*CanSubmitReputerPayloadRequest)(nil), "emissions.v7.CanSubmitReputerPayloadRequest")
	proto.RegisterType((*CanSubmitReputerPayloadResponse)(nil), "emissions.v7.CanSubmitReputerPayloadResponse")
	proto.RegisterType((*GetCountInfererInclusionsInTopicRequest)(nil), "emissions.v7.GetCountInfererInclusionsInTopicRequest")
	proto.RegisterType((*GetCountInfererInclusionsInTopicResponse)(nil), "emissions.v7.GetCountInfererInclusionsInTopicResponse")
	proto.RegisterType((*GetCountForecasterInclusionsInTopicRequest)(nil), "emissions.v7.GetCountForecasterInclusionsInTopicRequest")
	proto.RegisterType((*GetCountForecasterInclusionsInTopicResponse)(nil), "emissions.v7.GetCountForecasterInclusionsInTopicResponse")
	proto.RegisterType((*GetNaiveInfererNetworkRegretRequest)(nil), "emissions.v7.GetNaiveInfererNetworkRegretRequest")
	proto.RegisterType((*GetNaiveInfererNetworkRegretResponse)(nil), "emissions.v7.GetNaiveInfererNetworkRegretResponse")
	proto.RegisterType((*GetOneOutInfererInfererNetworkRegretRequest)(nil), "emissions.v7.GetOneOutInfererInfererNetworkRegretRequest")
	proto.RegisterType((*GetOneOutInfererInfererNetworkRegretResponse)(nil), "emissions.v7.GetOneOutInfererInfererNetworkRegretResponse")
	proto.RegisterType((*GetOneOutInfererForecasterNetworkRegretRequest)(nil), "emissions.v7.GetOneOutInfererForecasterNetworkRegretRequest")
	proto.RegisterType((*GetOneOutInfererForecasterNetworkRegretResponse)(nil), "emissions.v7.GetOneOutInfererForecasterNetworkRegretResponse")
	proto.RegisterType((*GetOneOutForecasterInfererNetworkRegretRequest)(nil), "emissions.v7.GetOneOutForecasterInfererNetworkRegretRequest")
	proto.RegisterType((*GetOneOutForecasterInfererNetworkRegretResponse)(nil), "emissions.v7.GetOneOutForecasterInfererNetworkRegretResponse")
	proto.RegisterType((*GetOneOutForecasterForecasterNetworkRegretRequest)(nil), "emissions.v7.GetOneOutForecasterForecasterNetworkRegretRequest")
	proto.RegisterType((*GetOneOutForecasterForecasterNetworkRegretResponse)(nil), "emissions.v7.GetOneOutForecasterForecasterNetworkRegretResponse")
	proto.RegisterType((*GetParamsRequest)(nil), "emissions.v7.GetParamsRequest")
	proto.RegisterType((*GetParamsResponse)(nil), "emissions.v7.GetParamsResponse")
	proto.RegisterType((*GetTotalStakeRequest)(nil), "emissions.v7.GetTotalStakeRequest")
	proto.RegisterType((*GetTotalStakeResponse)(nil), "emissions.v7.GetTotalStakeResponse")
	proto.RegisterType((*GetReputerStakeInTopicRequest)(nil), "emissions.v7.GetReputerStakeInTopicRequest")
	proto.RegisterType((*GetReputerStakeInTopicResponse)(nil), "emissions.v7.GetReputerStakeInTopicResponse")
	proto.RegisterType((*GetMultiReputerStakeInTopicRequest)(nil), "emissions.v7.GetMultiReputerStakeInTopicRequest")
	proto.RegisterType((*GetMultiReputerStakeInTopicResponse)(nil), "emissions.v7.GetMultiReputerStakeInTopicResponse")
	proto.RegisterType((*GetStakeFromReputerInTopicInSelfRequest)(nil), "emissions.v7.GetStakeFromReputerInTopicInSelfRequest")
	proto.RegisterType((*GetStakeFromReputerInTopicInSelfResponse)(nil), "emissions.v7.GetStakeFromReputerInTopicInSelfResponse")
	proto.RegisterType((*GetDelegateStakeInTopicInReputerRequest)(nil), "emissions.v7.GetDelegateStakeInTopicInReputerRequest")
	proto.RegisterType((*GetDelegateStakeInTopicInReputerResponse)(nil), "emissions.v7.GetDelegateStakeInTopicInReputerResponse")
	proto.RegisterType((*GetStakeFromDelegatorInTopicInReputerRequest)(nil), "emissions.v7.GetStakeFromDelegatorInTopicInReputerRequest")
	proto.RegisterType((*GetStakeFromDelegatorInTopicInReputerResponse)(nil), "emissions.v7.GetStakeFromDelegatorInTopicInReputerResponse")
	proto.RegisterType((*GetStakeFromDelegatorInTopicRequest)(nil), "emissions.v7.GetStakeFromDelegatorInTopicRequest")
	proto.RegisterType((*GetStakeFromDelegatorInTopicResponse)(nil), "emissions.v7.GetStakeFromDelegatorInTopicResponse")
	proto.RegisterType((*GetTopicStakeRequest)(nil), "emissions.v7.GetTopicStakeRequest")
	proto.RegisterType((*GetTopicStakeResponse)(nil), "emissions.v7.GetTopicStakeResponse")
	proto.RegisterType((*GetNetworkLossBundleAtBlockRequest)(nil), "emissions.v7.GetNetworkLossBundleAtBlockRequest")
	proto.RegisterType((*GetNetworkLossBundleAtBlockResponse)(nil), "emissions.v7.GetNetworkLossBundleAtBlockResponse")
	proto.RegisterType((*GetNextTopicIdRequest)(nil), "emissions.v7.GetNextTopicIdRequest")
	proto.RegisterType((*GetNextTopicIdResponse)(nil), "emissions.v7.GetNextTopicIdResponse")
	proto.RegisterType((*GetTopicRequest)(nil), "emissions.v7.GetTopicRequest")
	proto.RegisterType((*GetTopicResponse)(nil), "emissions.v7.GetTopicResponse")
	proto.RegisterType((*GetActiveTopicsRequest)(nil), "emissions.v7.GetActiveTopicsRequest")
	proto.RegisterType((*GetActiveTopicsResponse)(nil), "emissions.v7.GetActiveTopicsResponse")
	proto.RegisterType((*GetInferencesAtBlockRequest)(nil), "emissions.v7.GetInferencesAtBlockRequest")
	proto.RegisterType((*GetInferencesAtBlockResponse)(nil), "emissions.v7.GetInferencesAtBlockResponse")
	proto.RegisterType((*GetLatestTopicInferencesRequest)(nil), "emissions.v7.GetLatestTopicInferencesRequest")
	proto.RegisterType((*GetLatestTopicInferencesResponse)(nil), "emissions.v7.GetLatestTopicInferencesResponse")
	proto.RegisterType((*GetForecastsAtBlockRequest)(nil), "emissions.v7.GetForecastsAtBlockRequest")
	proto.RegisterType((*GetForecastsAtBlockResponse)(nil), "emissions.v7.GetForecastsAtBlockResponse")
	proto.RegisterType((*GetWorkerLatestInferenceByTopicIdRequest)(nil), "emissions.v7.GetWorkerLatestInferenceByTopicIdRequest")
	proto.RegisterType((*GetWorkerLatestInferenceByTopicIdResponse)(nil), "emissions.v7.GetWorkerLatestInferenceByTopicIdResponse")
	proto.RegisterType((*GetWorkerNodeInfoRequest)(nil), "emissions.v7.GetWorkerNodeInfoRequest")
	proto.RegisterType((*GetWorkerNodeInfoResponse)(nil), "emissions.v7.GetWorkerNodeInfoResponse")
	proto.RegisterType((*GetReputerNodeInfoRequest)(nil), "emissions.v7.GetReputerNodeInfoRequest")
	proto.RegisterType((*GetReputerNodeInfoResponse)(nil), "emissions.v7.GetReputerNodeInfoResponse")
	proto.RegisterType((*GetNetworkInferencesAtBlockRequest)(nil), "emissions.v7.GetNetworkInferencesAtBlockRequest")
	proto.RegisterType((*GetNetworkInferencesAtBlockOutlierResistantRequest)(nil), "emissions.v7.GetNetworkInferencesAtBlockOutlierResistantRequest")
	proto.RegisterType((*GetLatestNetworkInferencesRequest)(nil), "emissions.v7.GetLatestNetworkInferencesRequest")
	proto.RegisterType((*GetLatestNetworkInferencesOutlierResistantRequest)(nil), "emissions.v7.GetLatestNetworkInferencesOutlierResistantRequest")
	proto.RegisterType((*GetLatestAvailableNetworkInferencesRequest)(nil), "emissions.v7.GetLatestAvailableNetworkInferencesRequest")
	proto.RegisterType((*GetLatestAvailableNetworkInferencesOutlierResistantRequest)(nil), "emissions.v7.GetLatestAvailableNetworkInferencesOutlierResistantRequest")
	proto.RegisterType((*IsWorkerNonceUnfulfilledRequest)(nil), "emissions.v7.IsWorkerNonceUnfulfilledRequest")
	proto.RegisterType((*IsWorkerNonceUnfulfilledResponse)(nil), "emissions.v7.IsWorkerNonceUnfulfilledResponse")
	proto.RegisterType((*GetUnfulfilledReputerNoncesRequest)(nil), "emissions.v7.GetUnfulfilledReputerNoncesRequest")
	proto.RegisterType((*GetUnfulfilledReputerNoncesResponse)(nil), "emissions.v7.GetUnfulfilledReputerNoncesResponse")
	proto.RegisterType((*GetUnfulfilledWorkerNoncesRequest)(nil), "emissions.v7.GetUnfulfilledWorkerNoncesRequest")
	proto.RegisterType((*GetUnfulfilledWorkerNoncesResponse)(nil), "emissions.v7.GetUnfulfilledWorkerNoncesResponse")
	proto.RegisterType((*GetInfererNetworkRegretRequest)(nil), "emissions.v7.GetInfererNetworkRegretRequest")
	proto.RegisterType((*GetInfererNetworkRegretResponse)(nil), "emissions.v7.GetInfererNetworkRegretResponse")
	proto.RegisterType((*GetForecasterNetworkRegretRequest)(nil), "emissions.v7.GetForecasterNetworkRegretRequest")
	proto.RegisterType((*GetForecasterNetworkRegretResponse)(nil), "emissions.v7.GetForecasterNetworkRegretResponse")
	proto.RegisterType((*GetOneInForecasterNetworkRegretRequest)(nil), "emissions.v7.GetOneInForecasterNetworkRegretRequest")
	proto.RegisterType((*GetOneInForecasterNetworkRegretResponse)(nil), "emissions.v7.GetOneInForecasterNetworkRegretResponse")
	proto.RegisterType((*IsReputerNonceUnfulfilledRequest)(nil), "emissions.v7.IsReputerNonceUnfulfilledRequest")
	proto.RegisterType((*IsReputerNonceUnfulfilledResponse)(nil), "emissions.v7.IsReputerNonceUnfulfilledResponse")
	proto.RegisterType((*GetNetworkInferencesAtBlockResponse)(nil), "emissions.v7.GetNetworkInferencesAtBlockResponse")
	proto.RegisterType((*GetNetworkInferencesAtBlockOutlierResistantResponse)(nil), "emissions.v7.GetNetworkInferencesAtBlockOutlierResistantResponse")
	proto.RegisterType((*GetLatestNetworkInferencesResponse)(nil), "emissions.v7.GetLatestNetworkInferencesResponse")
	proto.RegisterType((*GetLatestNetworkInferencesOutlierResistantResponse)(nil), "emissions.v7.GetLatestNetworkInferencesOutlierResistantResponse")
	proto.RegisterType((*GetLatestAvailableNetworkInferencesResponse)(nil), "emissions.v7.GetLatestAvailableNetworkInferencesResponse")
	proto.RegisterType((*GetLatestAvailableNetworkInferencesOutlierResistantResponse)(nil), "emissions.v7.GetLatestAvailableNetworkInferencesOutlierResistantResponse")
	proto.RegisterType((*IsWorkerRegisteredInTopicIdRequest)(nil), "emissions.v7.IsWorkerRegisteredInTopicIdRequest")
	proto.RegisterType((*IsWorkerRegisteredInTopicIdResponse)(nil), "emissions.v7.IsWorkerRegisteredInTopicIdResponse")
	proto.RegisterType((*IsReputerRegisteredInTopicIdRequest)(nil), "emissions.v7.IsReputerRegisteredInTopicIdRequest")
	proto.RegisterType((*IsReputerRegisteredInTopicIdResponse)(nil), "emissions.v7.IsReputerRegisteredInTopicIdResponse")
	proto.RegisterType((*IsWhitelistAdminRequest)(nil), "emissions.v7.IsWhitelistAdminRequest")
	proto.RegisterType((*IsWhitelistAdminResponse)(nil), "emissions.v7.IsWhitelistAdminResponse")
	proto.RegisterType((*GetStakeRemovalsUpUntilBlockRequest)(nil), "emissions.v7.GetStakeRemovalsUpUntilBlockRequest")
	proto.RegisterType((*GetStakeRemovalsUpUntilBlockResponse)(nil), "emissions.v7.GetStakeRemovalsUpUntilBlockResponse")
	proto.RegisterType((*GetDelegateStakeRemovalsUpUntilBlockRequest)(nil), "emissions.v7.GetDelegateStakeRemovalsUpUntilBlockRequest")
	proto.RegisterType((*GetDelegateStakeRemovalsUpUntilBlockResponse)(nil), "emissions.v7.GetDelegateStakeRemovalsUpUntilBlockResponse")
	proto.RegisterType((*GetStakeRemovalInfoRequest)(nil), "emissions.v7.GetStakeRemovalInfoRequest")
	proto.RegisterType((*GetStakeRemovalInfoResponse)(nil), "emissions.v7.GetStakeRemovalInfoResponse")
	proto.RegisterType((*GetDelegateStakeRemovalInfoRequest)(nil), "emissions.v7.GetDelegateStakeRemovalInfoRequest")
	proto.RegisterType((*GetDelegateStakeRemovalInfoResponse)(nil), "emissions.v7.GetDelegateStakeRemovalInfoResponse")
	proto.RegisterType((*GetTopicLastWorkerCommitInfoRequest)(nil), "emissions.v7.GetTopicLastWorkerCommitInfoRequest")
	proto.RegisterType((*GetTopicLastWorkerCommitInfoResponse)(nil), "emissions.v7.GetTopicLastWorkerCommitInfoResponse")
	proto.RegisterType((*GetTopicLastReputerCommitInfoRequest)(nil), "emissions.v7.GetTopicLastReputerCommitInfoRequest")
	proto.RegisterType((*GetTopicLastReputerCommitInfoResponse)(nil), "emissions.v7.GetTopicLastReputerCommitInfoResponse")
	proto.RegisterType((*GetTopicRewardNonceRequest)(nil), "emissions.v7.GetTopicRewardNonceRequest")
	proto.RegisterType((*GetTopicRewardNonceResponse)(nil), "emissions.v7.GetTopicRewardNonceResponse")
	proto.RegisterType((*GetReputerLossBundlesAtBlockRequest)(nil), "emissions.v7.GetReputerLossBundlesAtBlockRequest")
	proto.RegisterType((*GetReputerLossBundlesAtBlockResponse)(nil), "emissions.v7.GetReputerLossBundlesAtBlockResponse")
	proto.RegisterType((*GetStakeReputerAuthorityRequest)(nil), "emissions.v7.GetStakeReputerAuthorityRequest")
	proto.RegisterType((*GetStakeReputerAuthorityResponse)(nil), "emissions.v7.GetStakeReputerAuthorityResponse")
	proto.RegisterType((*GetDelegateStakePlacementRequest)(nil), "emissions.v7.GetDelegateStakePlacementRequest")
	proto.RegisterType((*GetDelegateStakePlacementResponse)(nil), "emissions.v7.GetDelegateStakePlacementResponse")
	proto.RegisterType((*GetDelegateStakeUponReputerRequest)(nil), "emissions.v7.GetDelegateStakeUponReputerRequest")
	proto.RegisterType((*GetDelegateStakeUponReputerResponse)(nil), "emissions.v7.GetDelegateStakeUponReputerResponse")
	proto.RegisterType((*GetDelegateRewardPerShareRequest)(nil), "emissions.v7.GetDelegateRewardPerShareRequest")
	proto.RegisterType((*GetDelegateRewardPerShareResponse)(nil), "emissions.v7.GetDelegateRewardPerShareResponse")
	proto.RegisterType((*GetStakeRemovalForReputerAndTopicIdRequest)(nil), "emissions.v7.GetStakeRemovalForReputerAndTopicIdRequest")
	proto.RegisterType((*GetStakeRemovalForReputerAndTopicIdResponse)(nil), "emissions.v7.GetStakeRemovalForReputerAndTopicIdResponse")
	proto.RegisterType((*GetDelegateStakeRemovalRequest)(nil), "emissions.v7.GetDelegateStakeRemovalRequest")
	proto.RegisterType((*GetDelegateStakeRemovalResponse)(nil), "emissions.v7.GetDelegateStakeRemovalResponse")
	proto.RegisterType((*GetPreviousTopicWeightRequest)(nil), "emissions.v7.GetPreviousTopicWeightRequest")
	proto.RegisterType((*GetPreviousTopicWeightResponse)(nil), "emissions.v7.GetPreviousTopicWeightResponse")
	proto.RegisterType((*GetTotalSumPreviousTopicWeightsRequest)(nil), "emissions.v7.GetTotalSumPreviousTopicWeightsRequest")
	proto.RegisterType((*GetTotalSumPreviousTopicWeightsResponse)(nil), "emissions.v7.GetTotalSumPreviousTopicWeightsResponse")
	proto.RegisterType((*TopicExistsRequest)(nil), "emissions.v7.TopicExistsRequest")
	proto.RegisterType((*TopicExistsResponse)(nil), "emissions.v7.TopicExistsResponse")
	proto.RegisterType((*IsTopicActiveRequest)(nil), "emissions.v7.IsTopicActiveRequest")
	proto.RegisterType((*IsTopicActiveResponse)(nil), "emissions.v7.IsTopicActiveResponse")
	proto.RegisterType((*GetTopicFeeRevenueRequest)(nil), "emissions.v7.GetTopicFeeRevenueRequest")
	proto.RegisterType((*GetTopicFeeRevenueResponse)(nil), "emissions.v7.GetTopicFeeRevenueResponse")
	proto.RegisterType((*GetInfererScoreEmaRequest)(nil), "emissions.v7.GetInfererScoreEmaRequest")
	proto.RegisterType((*GetInfererScoreEmaResponse)(nil), "emissions.v7.GetInfererScoreEmaResponse")
	proto.RegisterType((*GetForecasterScoreEmaRequest)(nil), "emissions.v7.GetForecasterScoreEmaRequest")
	proto.RegisterType((*GetForecasterScoreEmaResponse)(nil), "emissions.v7.GetForecasterScoreEmaResponse")
	proto.RegisterType((*GetReputerScoreEmaRequest)(nil), "emissions.v7.GetReputerScoreEmaRequest")
	proto.RegisterType((*GetReputerScoreEmaResponse)(nil), "emissions.v7.GetReputerScoreEmaResponse")
	proto.RegisterType((*GetInferenceScoresUntilBlockRequest)(nil), "emissions.v7.GetInferenceScoresUntilBlockRequest")
	proto.RegisterType((*GetInferenceScoresUntilBlockResponse)(nil), "emissions.v7.GetInferenceScoresUntilBlockResponse")
	proto.RegisterType((*GetPreviousTopicQuantileForecasterScoreEmaRequest)(nil), "emissions.v7.GetPreviousTopicQuantileForecasterScoreEmaRequest")
	proto.RegisterType((*GetPreviousTopicQuantileForecasterScoreEmaResponse)(nil), "emissions.v7.GetPreviousTopicQuantileForecasterScoreEmaResponse")
	proto.RegisterType((*GetPreviousTopicQuantileInfererScoreEmaRequest)(nil), "emissions.v7.GetPreviousTopicQuantileInfererScoreEmaRequest")
	proto.RegisterType((*GetPreviousTopicQuantileInfererScoreEmaResponse)(nil), "emissions.v7.GetPreviousTopicQuantileInfererScoreEmaResponse")
	proto.RegisterType((*GetPreviousTopicQuantileReputerScoreEmaRequest)(nil), "emissions.v7.GetPreviousTopicQuantileReputerScoreEmaRequest")
	proto.RegisterType((*GetPreviousTopicQuantileReputerScoreEmaResponse)(nil), "emissions.v7.GetPreviousTopicQuantileReputerScoreEmaResponse")
	proto.RegisterType((*GetWorkerInferenceScoresAtBlockRequest)(nil), "emissions.v7.GetWorkerInferenceScoresAtBlockRequest")
	proto.RegisterType((*GetWorkerInferenceScoresAtBlockResponse)(nil), "emissions.v7.GetWorkerInferenceScoresAtBlockResponse")
	proto.RegisterType((*GetCurrentLowestInfererScoreRequest)(nil), "emissions.v7.GetCurrentLowestInfererScoreRequest")
	proto.RegisterType((*GetCurrentLowestInfererScoreResponse)(nil), "emissions.v7.GetCurrentLowestInfererScoreResponse")
	proto.RegisterType((*GetForecastScoresUntilBlockRequest)(nil), "emissions.v7.GetForecastScoresUntilBlockRequest")
	proto.RegisterType((*GetForecastScoresUntilBlockResponse)(nil), "emissions.v7.GetForecastScoresUntilBlockResponse")
	proto.RegisterType((*GetWorkerForecastScoresAtBlockRequest)(nil), "emissions.v7.GetWorkerForecastScoresAtBlockRequest")
	proto.RegisterType((*GetWorkerForecastScoresAtBlockResponse)(nil), "emissions.v7.GetWorkerForecastScoresAtBlockResponse")
	proto.RegisterType((*GetCurrentLowestForecasterScoreRequest)(nil), "emissions.v7.GetCurrentLowestForecasterScoreRequest")
	proto.RegisterType((*GetCurrentLowestForecasterScoreResponse)(nil), "emissions.v7.GetCurrentLowestForecasterScoreResponse")
	proto.RegisterType((*GetReputersScoresAtBlockRequest)(nil), "emissions.v7.GetReputersScoresAtBlockRequest")
	proto.RegisterType((*GetReputersScoresAtBlockResponse)(nil), "emissions.v7.GetReputersScoresAtBlockResponse")
	proto.RegisterType((*GetCurrentLowestReputerScoreRequest)(nil), "emissions.v7.GetCurrentLowestReputerScoreRequest")
	proto.RegisterType((*GetCurrentLowestReputerScoreResponse)(nil), "emissions.v7.GetCurrentLowestReputerScoreResponse")
	proto.RegisterType((*GetListeningCoefficientRequest)(nil), "emissions.v7.GetListeningCoefficientRequest")
	proto.RegisterType((*GetListeningCoefficientResponse)(nil), "emissions.v7.GetListeningCoefficientResponse")
	proto.RegisterType((*GetPreviousReputerRewardFractionRequest)(nil), "emissions.v7.GetPreviousReputerRewardFractionRequest")
	proto.RegisterType((*GetPreviousReputerRewardFractionResponse)(nil), "emissions.v7.GetPreviousReputerRewardFractionResponse")
	proto.RegisterType((*GetPreviousInferenceRewardFractionRequest)(nil), "emissions.v7.GetPreviousInferenceRewardFractionRequest")
	proto.RegisterType((*GetPreviousInferenceRewardFractionResponse)(nil), "emissions.v7.GetPreviousInferenceRewardFractionResponse")
	proto.RegisterType((*GetPreviousForecastRewardFractionRequest)(nil), "emissions.v7.GetPreviousForecastRewardFractionRequest")
	proto.RegisterType((*GetPreviousForecastRewardFractionResponse)(nil), "emissions.v7.GetPreviousForecastRewardFractionResponse")
	proto.RegisterType((*GetPreviousPercentageRewardToStakedReputersRequest)(nil), "emissions.v7.GetPreviousPercentageRewardToStakedReputersRequest")
	proto.RegisterType((*GetPreviousPercentageRewardToStakedReputersResponse)(nil), "emissions.v7.GetPreviousPercentageRewardToStakedReputersResponse")
	proto.RegisterType((*GetTotalRewardToDistributeRequest)(nil), "emissions.v7.GetTotalRewardToDistributeRequest")
	proto.RegisterType((*GetTotalRewardToDistributeResponse)(nil), "emissions.v7.GetTotalRewardToDistributeResponse")
	proto.RegisterType((*GetActiveTopicsAtBlockRequest)(nil), "emissions.v7.GetActiveTopicsAtBlockRequest")
	proto.RegisterType((*GetActiveTopicsAtBlockResponse)(nil), "emissions.v7.GetActiveTopicsAtBlockResponse")
	proto.RegisterType((*GetNextChurningBlockByTopicIdRequest)(nil), "emissions.v7.GetNextChurningBlockByTopicIdRequest")
	proto.RegisterType((*GetNextChurningBlockByTopicIdResponse)(nil), "emissions.v7.GetNextChurningBlockByTopicIdResponse")
	proto.RegisterType((*GetActiveReputersForTopicRequest)(nil), "emissions.v7.GetActiveReputersForTopicRequest")
	proto.RegisterType((*GetActiveReputersForTopicResponse)(nil), "emissions.v7.GetActiveReputersForTopicResponse")
	proto.RegisterType((*GetActiveForecastersForTopicRequest)(nil), "emissions.v7.GetActiveForecastersForTopicRequest")
	proto.RegisterType((*GetActiveForecastersForTopicResponse)(nil), "emissions.v7.GetActiveForecastersForTopicResponse")
	proto.RegisterType((*GetActiveInferersForTopicRequest)(nil), "emissions.v7.GetActiveInferersForTopicRequest")
	proto.RegisterType((*GetActiveInferersForTopicResponse)(nil), "emissions.v7.GetActiveInferersForTopicResponse")
	proto.RegisterType((*GetTopicInitialInfererEmaScoreRequest)(nil), "emissions.v7.GetTopicInitialInfererEmaScoreRequest")
	proto.RegisterType((*GetTopicInitialInfererEmaScoreResponse)(nil), "emissions.v7.GetTopicInitialInfererEmaScoreResponse")
	proto.RegisterType((*GetTopicInitialForecasterEmaScoreRequest)(nil), "emissions.v7.GetTopicInitialForecasterEmaScoreRequest")
	proto.RegisterType((*GetTopicInitialForecasterEmaScoreResponse)(nil), "emissions.v7.GetTopicInitialForecasterEmaScoreResponse")
	proto.RegisterType((*GetTopicInitialReputerEmaScoreRequest)(nil), "emissions.v7.GetTopicInitialReputerEmaScoreRequest")
	proto.RegisterType((*GetTopicInitialReputerEmaScoreResponse)(nil), "emissions.v7.GetTopicInitialReputerEmaScoreResponse")
}

func init() { proto.RegisterFile("emissions/v7/query.proto", fileDescriptor_654c5ef5213700ee) }

var fileDescriptor_654c5ef5213700ee = []byte{
	// 7436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x59, 0x6c, 0x1c, 0xc9,
	0x79, 0xff, 0xb6, 0xb4, 0xd2, 0x8a, 0xc5, 0x95, 0x44, 0x95, 0xb5, 0x92, 0x38, 0x92, 0x28, 0xa9,
	0xb5, 0x3a, 0x56, 0x07, 0x67, 0x75, 0xac, 0xa4, 0xd5, 0xb1, 0x12, 0xc9, 0x95, 0x28, 0x6a, 0xb5,
	0x5a, 0x6a, 0x74, 0xd9, 0xf2, 0xdf, 0x1e, 0x37, 0x67, 0x8a, 0x54, 0x5b, 0x3d, 0xdd, 0xe3, 0xee,
	0x1e, 0x52, 0x5a, 0x41, 0x7f, 0x1b, 0x0e, 0x6c, 0x04, 0x79, 0xc8, 0x61, 0xc7, 0x7e, 0xb1, 0x91,
	0x18, 0x70, 0x90, 0x1b, 0x81, 0xe3, 0x1c, 0x80, 0x11, 0xe4, 0x80, 0x73, 0xd9, 0x8e, 0x11, 0xdb,
	0x89, 0x1d, 0xac, 0x03, 0xc4, 0xb0, 0xbd, 0x76, 0x2e, 0x38, 0x79, 0xc9, 0x4b, 0x10, 0xf8, 0x21,
	0x98, 0xaa, 0xea, 0xae, 0xaa, 0xee, 0xba, 0x66, 0x48, 0x6e, 0xfc, 0xb0, 0x2f, 0x82, 0x66, 0xa6,
	0xea, 0xab, 0xdf, 0xaf, 0xea, 0xab, 0xaa, 0xaf, 0xbe, 0xfa, 0xbe, 0x22, 0xd8, 0x82, 0x5a, 0x7e,
	0x92, 0xf8, 0x51, 0x98, 0x54, 0xe7, 0x4f, 0x56, 0x3f, 0xd0, 0x41, 0xf1, 0xc3, 0xd1, 0x76, 0x1c,
	0xa5, 0x11, 0x7c, 0x3a, 0xff, 0x65, 0x74, 0xfe, 0x64, 0x65, 0x83, 0xd7, 0xf2, 0xc3, 0xa8, 0x8a,
	0xff, 0x25, 0x05, 0x2a, 0x5b, 0x1b, 0x51, 0xd2, 0x8a, 0x12, 0x52, 0xa9, 0x3a, 0x7f, 0x84, 0xaf,
	0x5d, 0x19, 0x26, 0x3f, 0xd6, 0xf1, 0xa7, 0x2a, 0xf9, 0x40, 0x7f, 0xda, 0xc6, 0x35, 0x79, 0xac,
	0xea, 0x87, 0xb3, 0x28, 0x46, 0x61, 0x03, 0xd1, 0x5f, 0x37, 0x0b, 0xbf, 0x86, 0x51, 0x33, 0xfb,
	0x61, 0x4b, 0xe1, 0x07, 0x56, 0xa5, 0x22, 0xfc, 0x12, 0xa3, 0x76, 0x27, 0x45, 0xb1, 0xb4, 0x56,
	0xd2, 0x88, 0x62, 0xb9, 0xbc, 0x24, 0xf5, 0xee, 0xcb, 0x7f, 0x49, 0xa3, 0xb6, 0xdf, 0x90, 0xff,
	0xf2, 0xb0, 0x8d, 0x32, 0x52, 0xc3, 0xc2, 0x2f, 0x0b, 0x51, 0x7c, 0x3f, 0x87, 0x30, 0x2c, 0x74,
	0x71, 0xdb, 0x8b, 0xbd, 0x56, 0x56, 0x6b, 0xe3, 0x5c, 0x34, 0x17, 0x91, 0x2e, 0xea, 0xfe, 0x2f,
	0xeb, 0xa0, 0xb9, 0x28, 0x9a, 0x0b, 0x50, 0xd5, 0x6b, 0xfb, 0x55, 0x2f, 0x0c, 0xa3, 0xd4, 0x4b,
	0xf1, 0x30, 0xe0, 0x5f, 0xdd, 0xb3, 0x60, 0xe7, 0x54, 0x72, 0xe7, 0x9e, 0x9f, 0xa2, 0xc0, 0x4f,
	0x52, 0xd4, 0x9c, 0x0c, 0xa2, 0x19, 0x2f, 0xb8, 0x83, 0x5b, 0xac, 0xa1, 0x0f, 0x74, 0x50, 0x92,
	0xc2, 0x2d, 0xe0, 0x29, 0xaf, 0xd9, 0x8c, 0x51, 0x92, 0x6c, 0x71, 0x76, 0x3a, 0xfb, 0x07, 0x6a,
	0xd9, 0x47, 0xf7, 0x3e, 0xd8, 0xa5, 0xa9, 0x9d, 0xb4, 0xa3, 0x30, 0x41, 0xf0, 0x12, 0xd8, 0xe6,
	0x27, 0xf5, 0x05, 0x56, 0xaa, 0x3e, 0x87, 0x8b, 0xd5, 0x09, 0x2f, 0x2c, 0x73, 0xcd, 0xf8, 0xaa,
	0x5f, 0xff, 0x97, 0xcf, 0x1d, 0x70, 0x6a, 0xc3, 0xbe, 0x4a, 0x9e, 0x7b, 0x4e, 0xda, 0x58, 0x8d,
	0x0c, 0x90, 0x19, 0x6b, 0x08, 0x5c, 0x5d, 0x75, 0x0a, 0xf6, 0x32, 0xd8, 0x2e, 0x07, 0x4b, 0x15,
	0x41, 0x44, 0x5b, 0xf1, 0x95, 0x12, 0xdd, 0x33, 0x60, 0x87, 0xa4, 0xbd, 0xb1, 0x66, 0xcb, 0x0f,
	0xcd, 0x60, 0xef, 0x49, 0x87, 0x85, 0x56, 0xa6, 0x50, 0x5f, 0x06, 0x5b, 0xe5, 0x50, 0xbd, 0x6e,
	0x31, 0x11, 0xe8, 0x16, 0x5f, 0x21, 0xcd, 0x1d, 0x03, 0xcf, 0x4e, 0x25, 0x37, 0xbb, 0x5a, 0x49,
	0xba, 0x39, 0x2f, 0x76, 0x31, 0xf4, 0x66, 0x02, 0xd4, 0xcc, 0xb0, 0x0e, 0x83, 0x35, 0x58, 0x77,
	0xeb, 0x7e, 0x13, 0x8b, 0x7e, 0xb2, 0xf6, 0x14, 0xfe, 0x3c, 0xd5, 0x74, 0x1f, 0x80, 0x3d, 0x06,
	0x11, 0x14, 0xf1, 0x6b, 0x60, 0x97, 0x9f, 0xd4, 0x89, 0x18, 0x32, 0xf8, 0x0c, 0x7e, 0x1d, 0x91,
	0xc2, 0x22, 0xee, 0xed, 0xbe, 0x4e, 0xb0, 0x3b, 0x9e, 0xb7, 0x4c, 0x7b, 0xbd, 0x0f, 0xf4, 0x8f,
	0xc0, 0x5e, 0x93, 0x0c, 0x0a, 0xff, 0x3a, 0x70, 0x73, 0xf8, 0x54, 0x1d, 0x4c, 0xf8, 0x47, 0x7c,
	0xad, 0xe8, 0xd2, 0xf4, 0xc3, 0x85, 0x27, 0x62, 0xe4, 0xa5, 0x51, 0x1f, 0xd3, 0x4f, 0xac, 0xad,
	0x9c, 0x7e, 0x84, 0x41, 0x83, 0x94, 0xd3, 0x4d, 0x3f, 0x5e, 0x9e, 0x4a, 0x9f, 0x1b, 0x56, 0x48,
	0x15, 0xfa, 0xdc, 0xe0, 0x81, 0xaa, 0xf5, 0xb9, 0x51, 0xc2, 0x29, 0xd5, 0xe7, 0x6e, 0x31, 0xf7,
	0x76, 0x01, 0x26, 0xa7, 0x3e, 0x66, 0x65, 0xe0, 0x19, 0xac, 0xd0, 0x33, 0x10, 0xe4, 0x2a, 0x19,
	0xf0, 0xba, 0xae, 0x63, 0xc0, 0x49, 0x73, 0xef, 0xc8, 0x5a, 0x2a, 0x2c, 0x73, 0x7d, 0x51, 0x90,
	0xaa, 0x4b, 0x71, 0x01, 0x54, 0xa9, 0x8b, 0x74, 0xfd, 0x93, 0xa8, 0x4b, 0xb6, 0xfc, 0x9d, 0x07,
	0xbb, 0x27, 0xbc, 0xf0, 0x56, 0xbb, 0xe9, 0xa5, 0x68, 0x2c, 0x08, 0xe8, 0x4a, 0x9e, 0x15, 0x4e,
	0xcc, 0x2a, 0xd3, 0x01, 0xcf, 0xea, 0x05, 0x50, 0xc0, 0xaf, 0x82, 0x9d, 0x0d, 0x2f, 0xac, 0x77,
	0x70, 0xc1, 0xba, 0x17, 0x04, 0xf9, 0xf6, 0x92, 0x97, 0x15, 0x41, 0x6f, 0x6b, 0x68, 0xc4, 0xba,
	0x63, 0x60, 0x4f, 0xde, 0x2c, 0xbf, 0xfd, 0xe4, 0x45, 0xcc, 0xc8, 0x1f, 0x81, 0xbd, 0x26, 0x11,
	0x6c, 0x45, 0xe1, 0xb0, 0x0b, 0xdb, 0x22, 0x83, 0x5f, 0x58, 0x51, 0x1a, 0x5a, 0xd1, 0xee, 0x78,
	0xa9, 0xf1, 0xe2, 0xda, 0x63, 0x26, 0xf0, 0xff, 0xc1, 0x3e, 0xa3, 0x0c, 0xca, 0xe0, 0x06, 0xd8,
	0x5d, 0x66, 0x50, 0x5a, 0x1c, 0x45, 0x0a, 0x3b, 0x1a, 0x7a, 0xe1, 0xee, 0x51, 0xb0, 0x29, 0x6f,
	0x7f, 0x1a, 0x5b, 0x38, 0x66, 0xcc, 0x57, 0xc1, 0xe6, 0x52, 0x1d, 0x8a, 0xf1, 0x08, 0xd8, 0xc0,
	0x61, 0x24, 0x26, 0x93, 0x88, 0x68, 0x7d, 0x43, 0xac, 0xea, 0xde, 0x02, 0x23, 0xb9, 0x34, 0x32,
	0x37, 0x8b, 0xbd, 0xd7, 0xd7, 0x0c, 0x44, 0x60, 0x87, 0x52, 0x2c, 0x05, 0x3b, 0x0e, 0x2a, 0x1c,
	0x58, 0xba, 0x7e, 0xc8, 0xfb, 0x71, 0x73, 0x43, 0x2e, 0xcb, 0x3d, 0x02, 0x9e, 0x99, 0xf0, 0x42,
	0xbc, 0x70, 0x23, 0x3a, 0x29, 0x4d, 0xdd, 0x37, 0x85, 0xbb, 0x5c, 0xa8, 0x42, 0x01, 0x55, 0xc1,
	0x50, 0x17, 0x10, 0xde, 0x2e, 0x28, 0x20, 0x11, 0xc6, 0xba, 0x86, 0x50, 0xd1, 0xbd, 0x09, 0xb6,
	0x4f, 0x78, 0xe1, 0x8d, 0xce, 0x4c, 0xcb, 0x4f, 0x89, 0x76, 0x4e, 0x7b, 0x0f, 0x83, 0xc8, 0x6b,
	0x2e, 0xaa, 0xeb, 0x66, 0xf0, 0x88, 0x48, 0xa5, 0x52, 0xa0, 0x17, 0xc0, 0x70, 0x17, 0x68, 0x82,
	0x8b, 0x64, 0xb3, 0xa8, 0x4d, 0x0a, 0x89, 0x88, 0x37, 0x35, 0xa4, 0x92, 0xe8, 0xa8, 0x93, 0x5f,
	0xa8, 0x52, 0x2e, 0x05, 0x74, 0x32, 0xea, 0x72, 0xb1, 0xe2, 0xa8, 0x53, 0xec, 0xd9, 0xfc, 0x91,
	0x82, 0xdf, 0xdc, 0x90, 0xcb, 0x72, 0xdf, 0x0b, 0xf6, 0x4d, 0xa2, 0x74, 0x22, 0xea, 0x84, 0xe9,
	0x14, 0x3e, 0x06, 0xc5, 0x53, 0x61, 0x23, 0xe8, 0xe0, 0xb3, 0xc2, 0x54, 0x28, 0xe8, 0x81, 0x9e,
	0x06, 0x39, 0x44, 0xc5, 0x19, 0x0d, 0xfa, 0xd1, 0xbd, 0x00, 0xf6, 0x9b, 0xe5, 0x53, 0x3e, 0x1b,
	0xc1, 0xaa, 0x46, 0xb7, 0x20, 0x95, 0x4e, 0x3e, 0xb8, 0x73, 0xe0, 0x40, 0x26, 0xe1, 0x52, 0x14,
	0xa3, 0x86, 0x97, 0xa4, 0xfd, 0x81, 0x1c, 0x01, 0x60, 0x36, 0x17, 0x40, 0x71, 0x72, 0xdf, 0xb8,
	0x13, 0xe0, 0xa0, 0x55, 0x43, 0x5a, 0xb4, 0x77, 0xc1, 0xee, 0x49, 0x94, 0x5e, 0xf3, 0xfc, 0x79,
	0x44, 0xf9, 0x5e, 0x43, 0x69, 0x57, 0xad, 0x6a, 0x68, 0x2e, 0x46, 0xe9, 0xa2, 0xfa, 0xf2, 0xbd,
	0xe0, 0x59, 0xbd, 0x6c, 0x8a, 0xec, 0x04, 0x58, 0x1d, 0xe3, 0x6f, 0xb0, 0xe8, 0xc1, 0xa3, 0x23,
	0xa3, 0xdc, 0x39, 0xfa, 0xd8, 0xe8, 0x4d, 0xbf, 0x85, 0x92, 0xd4, 0x6b, 0xb5, 0x51, 0xf3, 0xb6,
	0x17, 0x74, 0x50, 0x8d, 0x96, 0x76, 0x7f, 0xc6, 0xc1, 0x3d, 0xf0, 0x5a, 0x88, 0x5e, 0xeb, 0xb0,
	0xd1, 0xea, 0x8b, 0xc4, 0x5e, 0xb0, 0x3e, 0x0a, 0x51, 0x3d, 0xea, 0xa4, 0x75, 0x91, 0xcc, 0xda,
	0x88, 0x97, 0xce, 0x93, 0x5d, 0x29, 0x92, 0x9d, 0x05, 0x87, 0xec, 0xb0, 0x2c, 0x92, 0xf4, 0xc7,
	0x1d, 0x30, 0x5a, 0x6c, 0x88, 0x0d, 0xff, 0x72, 0xf1, 0x16, 0x75, 0x71, 0x65, 0x49, 0x17, 0x7d,
	0x50, 0xb5, 0x06, 0xb5, 0x94, 0x1d, 0xc0, 0x2b, 0x7e, 0x5f, 0x03, 0x7f, 0x08, 0xc0, 0xac, 0x03,
	0x4a, 0x93, 0x6d, 0x28, 0x2a, 0xb4, 0xa1, 0x19, 0x7e, 0xbe, 0x03, 0x4c, 0xa0, 0x16, 0xd9, 0x01,
	0x9f, 0x76, 0xc0, 0x11, 0x49, 0x5b, 0xfd, 0x2b, 0x41, 0x6f, 0x7d, 0x60, 0x52, 0x85, 0x00, 0x1c,
	0xed, 0x05, 0xdd, 0x22, 0x3b, 0x03, 0x82, 0xa1, 0x49, 0x94, 0x0a, 0xf6, 0x93, 0x7b, 0x15, 0x6c,
	0xe0, 0xbe, 0xa3, 0x0d, 0x9c, 0x04, 0xab, 0x39, 0xa3, 0x68, 0xf0, 0xe8, 0x46, 0xbe, 0x81, 0x93,
	0xa3, 0xa4, 0xf4, 0xf8, 0xc0, 0x97, 0xbe, 0xb3, 0xe3, 0x09, 0xb2, 0x05, 0xd1, 0xe2, 0xee, 0x26,
	0xb0, 0x71, 0x12, 0xa5, 0x37, 0xa3, 0xd4, 0x0b, 0x6e, 0xa4, 0xde, 0x7d, 0x94, 0xb5, 0x32, 0x07,
	0x9e, 0x29, 0x7c, 0x9f, 0x7b, 0x57, 0x56, 0x7b, 0xad, 0x7c, 0xa5, 0x1d, 0x18, 0x7f, 0xbe, 0x2b,
	0xf3, 0x1f, 0xbf, 0xb3, 0xe3, 0x19, 0xe2, 0xd2, 0x4b, 0x9a, 0xf7, 0x47, 0xfd, 0xa8, 0xda, 0xf2,
	0xd2, 0x7b, 0xa3, 0x53, 0x61, 0xfa, 0x77, 0xbf, 0x7f, 0x18, 0x50, 0x5f, 0xdf, 0x54, 0x98, 0xd2,
	0xa6, 0x49, 0xfd, 0xd3, 0x4f, 0xfe, 0xeb, 0x67, 0x76, 0x38, 0x5d, 0x53, 0x63, 0x12, 0x65, 0xfb,
	0x20, 0x6e, 0xaa, 0xb0, 0x87, 0x28, 0x0d, 0x1e, 0x61, 0xd0, 0x57, 0x88, 0x1e, 0x81, 0x36, 0x18,
	0x51, 0x49, 0x5d, 0x26, 0x1e, 0xef, 0x01, 0xee, 0x24, 0x4a, 0x5f, 0xed, 0x04, 0xa9, 0xaf, 0x21,
	0xb3, 0x0d, 0x0c, 0x50, 0xf4, 0xa8, 0x4b, 0x67, 0xe5, 0xfe, 0x81, 0x1a, 0xfb, 0x42, 0x47, 0xe8,
	0x9d, 0x78, 0x27, 0x53, 0x8b, 0xcf, 0xed, 0xe4, 0xa7, 0x08, 0x2a, 0x22, 0x7d, 0xf0, 0xe8, 0x66,
	0x51, 0xd3, 0x68, 0xa5, 0xd9, 0xa8, 0x96, 0x95, 0x73, 0x5b, 0xd8, 0xe6, 0xc0, 0x3f, 0x5c, 0x8a,
	0xa3, 0x16, 0x95, 0x4e, 0x05, 0x4f, 0x85, 0x37, 0x50, 0x30, 0x9b, 0xa1, 0xdf, 0x07, 0xd6, 0x67,
	0x76, 0x8d, 0x38, 0x24, 0xeb, 0xe8, 0xd7, 0x63, 0xe6, 0x91, 0x79, 0x1d, 0x9b, 0x20, 0x86, 0xe6,
	0x96, 0x69, 0x8c, 0x08, 0xd5, 0x97, 0x51, 0x80, 0xe6, 0xbc, 0x14, 0xf1, 0x1d, 0x38, 0x15, 0x16,
	0x4e, 0xe7, 0x4b, 0x47, 0xd5, 0xd0, 0xdc, 0x32, 0x51, 0xfd, 0x65, 0x07, 0xef, 0xd8, 0x79, 0x3f,
	0x53, 0x14, 0x51, 0xac, 0x22, 0x7c, 0x10, 0x6c, 0x68, 0x66, 0x65, 0x0a, 0x94, 0x87, 0xf2, 0x1f,
	0x32, 0xd2, 0x92, 0xde, 0x59, 0x61, 0xec, 0x9d, 0x95, 0x62, 0xef, 0x7c, 0x10, 0x1c, 0xb6, 0x04,
	0xb8, 0x6c, 0xda, 0xb0, 0x5b, 0x07, 0xa0, 0xaf, 0x8e, 0xd1, 0x68, 0xc3, 0x3c, 0xb6, 0x17, 0x35,
	0xcd, 0x2d, 0x13, 0xcd, 0x23, 0x74, 0x85, 0x6f, 0xfb, 0x0d, 0x7e, 0x85, 0xd7, 0xf9, 0x53, 0xb3,
	0xc5, 0x9f, 0x55, 0x59, 0x26, 0x6c, 0x33, 0x78, 0xd1, 0xa4, 0x7b, 0xe6, 0xd5, 0x28, 0x49, 0xc6,
	0x3b, 0x61, 0x33, 0x40, 0x63, 0xe9, 0x78, 0x10, 0x35, 0xee, 0x5b, 0x6c, 0xee, 0xbb, 0xc0, 0xd3,
	0x33, 0xdd, 0xa2, 0xf5, 0x7b, 0xc8, 0x9f, 0xbb, 0x97, 0xe2, 0x3e, 0x5f, 0x59, 0x1b, 0xc4, 0xdf,
	0x5d, 0xc6, 0x5f, 0xb9, 0x1e, 0x39, 0x03, 0x28, 0xdb, 0xa0, 0xd4, 0x4e, 0x83, 0xc1, 0x20, 0x4a,
	0x92, 0xfa, 0x0c, 0xfe, 0x95, 0x6e, 0xa3, 0xc3, 0xe2, 0xea, 0x89, 0x37, 0x67, 0x52, 0xbd, 0x06,
	0x82, 0x5c, 0x94, 0xbb, 0x19, 0xf7, 0xd7, 0x35, 0xf4, 0x80, 0xf4, 0xd9, 0x54, 0x76, 0xd6, 0x74,
	0xcf, 0x82, 0x4d, 0xc5, 0x1f, 0x68, 0x73, 0x2e, 0x58, 0x1b, 0xa2, 0x07, 0x69, 0xbd, 0x40, 0x6c,
	0x30, 0x64, 0x65, 0xdd, 0x43, 0x60, 0x7d, 0x36, 0x0c, 0x16, 0x83, 0xf6, 0x61, 0x07, 0x1b, 0x0b,
	0xa2, 0x32, 0x3d, 0x07, 0x56, 0xb1, 0xe3, 0xfe, 0xe0, 0xd1, 0x77, 0x14, 0xec, 0x0e, 0x5c, 0x96,
	0x94, 0x80, 0x9b, 0xc0, 0xea, 0x05, 0xd6, 0x89, 0x03, 0x35, 0xfa, 0xa9, 0xab, 0xff, 0x68, 0x76,
	0x16, 0x35, 0x52, 0x7f, 0x1e, 0xd5, 0x63, 0x34, 0x8f, 0xc2, 0x0e, 0xa2, 0x86, 0xd1, 0x50, 0xfe,
	0x43, 0x8d, 0x7c, 0xef, 0x22, 0x4c, 0x78, 0x0c, 0x7f, 0x87, 0xa5, 0xe7, 0x6e, 0x9f, 0x57, 0x00,
	0x68, 0x7b, 0x73, 0x7e, 0x88, 0xaf, 0xae, 0x28, 0x9c, 0x83, 0x85, 0xcd, 0xc9, 0x6f, 0xb5, 0x03,
	0x34, 0xd1, 0x89, 0x93, 0x28, 0x9e, 0xce, 0xcb, 0x52, 0x01, 0x35, 0xae, 0xba, 0xfb, 0x8b, 0x0e,
	0xd8, 0x5c, 0x6a, 0x87, 0x52, 0x3e, 0x08, 0x56, 0x63, 0x42, 0xd9, 0x0e, 0x28, 0xe5, 0x4c, 0x8b,
	0xc0, 0xab, 0x02, 0xaa, 0x15, 0x18, 0xd5, 0x21, 0x3b, 0x54, 0xa4, 0x39, 0x01, 0xd6, 0xbb, 0xc1,
	0xd6, 0x49, 0x44, 0x4f, 0x08, 0x61, 0x03, 0x25, 0x4b, 0xaa, 0xc7, 0xef, 0x04, 0xdb, 0xe4, 0xc2,
	0x29, 0xef, 0x53, 0x00, 0xe4, 0x57, 0xa7, 0x99, 0x19, 0xb8, 0x45, 0xa4, 0xc2, 0x2a, 0xd7, 0xb8,
	0xb2, 0xee, 0x59, 0xb0, 0x63, 0x12, 0xa5, 0x57, 0xbd, 0x14, 0x25, 0x54, 0xf7, 0x58, 0x39, 0xb3,
	0xde, 0x7d, 0x10, 0xec, 0x54, 0xd7, 0x5e, 0x2c, 0x36, 0x9b, 0x8e, 0xb9, 0x0b, 0x2a, 0x93, 0x28,
	0x37, 0xc6, 0x97, 0xb6, 0xd3, 0x6f, 0xe2, 0x11, 0x2d, 0xcb, 0xa6, 0xbc, 0x5e, 0x00, 0x03, 0xd9,
	0xd9, 0x20, 0xa3, 0x55, 0x30, 0xb8, 0xf2, 0xaa, 0x35, 0x56, 0xd2, 0x0d, 0xb0, 0x61, 0x40, 0x1c,
	0x57, 0xa4, 0xe3, 0x72, 0xf6, 0xe3, 0x0f, 0xc5, 0x25, 0x44, 0x87, 0x7f, 0x0f, 0x58, 0x47, 0x5d,
	0x64, 0xe2, 0x26, 0xbc, 0x96, 0x7c, 0x4b, 0xf7, 0x24, 0x37, 0x02, 0xcf, 0x59, 0xb4, 0x96, 0x7b,
	0xb1, 0x86, 0x02, 0x5c, 0xa6, 0x9e, 0x0f, 0x82, 0x9c, 0x58, 0x2e, 0xa3, 0xb6, 0x3e, 0x10, 0x85,
	0xba, 0x97, 0xc0, 0x96, 0xbc, 0xc1, 0x6b, 0x51, 0x93, 0xd8, 0x9b, 0x65, 0x6b, 0x5e, 0x74, 0xb1,
	0x5d, 0x79, 0x72, 0x8d, 0x33, 0xb4, 0xa2, 0x06, 0x02, 0x7f, 0xa6, 0x7d, 0xb4, 0x5d, 0xbf, 0x8f,
	0x1e, 0xba, 0x37, 0xc1, 0xb0, 0x44, 0x4e, 0x7e, 0xe2, 0x19, 0x08, 0xa3, 0x26, 0xea, 0xc2, 0x8c,
	0x28, 0xc2, 0x8a, 0x88, 0xf0, 0xb5, 0xd9, 0xd9, 0xc6, 0x3d, 0xcf, 0x0f, 0xbb, 0x55, 0x6b, 0x6b,
	0x42, 0x2a, 0xc0, 0x9d, 0xc4, 0x52, 0xa9, 0x71, 0xb1, 0x18, 0x78, 0xb7, 0xb0, 0xde, 0x95, 0x04,
	0x2d, 0x16, 0xdf, 0x2f, 0x39, 0xfc, 0xa6, 0xd8, 0xcf, 0x62, 0x72, 0x0e, 0x6c, 0xe5, 0xf5, 0xba,
	0x1e, 0x78, 0xc2, 0x70, 0x12, 0x35, 0xdf, 0xc2, 0xa9, 0xf9, 0x55, 0x8f, 0x1b, 0xbe, 0x2b, 0x4f,
	0xae, 0x59, 0x39, 0xf4, 0x24, 0xfd, 0x5d, 0x10, 0x11, 0xa3, 0x05, 0x2f, 0x6e, 0xba, 0x3f, 0xeb,
	0xe0, 0x33, 0xb0, 0x0a, 0xe0, 0x6b, 0x9d, 0x34, 0xf0, 0xb1, 0xd9, 0xe6, 0x27, 0xa9, 0x17, 0xa6,
	0xcb, 0x0e, 0xd8, 0x7d, 0x09, 0xec, 0xca, 0x57, 0xa0, 0x12, 0x2a, 0x8b, 0x15, 0xec, 0x1a, 0xf6,
	0x38, 0x28, 0xea, 0xf7, 0x4e, 0xc7, 0x9d, 0xc4, 0x3e, 0x52, 0x22, 0x6f, 0x6c, 0xde, 0xf3, 0x03,
	0x6f, 0x26, 0x40, 0xfd, 0x00, 0xbb, 0x03, 0x4e, 0x5b, 0x08, 0xea, 0x03, 0x61, 0x1d, 0xdf, 0xb0,
	0xd2, 0x89, 0x15, 0x36, 0xd0, 0xad, 0x70, 0xb6, 0x13, 0xcc, 0xfa, 0x81, 0xd5, 0x75, 0xbb, 0xcd,
	0xba, 0x49, 0xae, 0x5a, 0x15, 0x0d, 0x88, 0x57, 0xad, 0x64, 0x05, 0xc3, 0xe1, 0x3b, 0xf5, 0x0e,
	0x2b, 0x56, 0xbe, 0x6a, 0x95, 0x4a, 0x73, 0xcf, 0xe3, 0xd9, 0x22, 0xc8, 0xa7, 0x13, 0xd2, 0xb2,
	0x93, 0x89, 0x7d, 0xa8, 0x16, 0x90, 0xdb, 0x87, 0xab, 0x31, 0xc6, 0x6c, 0x9d, 0x77, 0xc5, 0xc9,
	0x2c, 0x9e, 0xa6, 0x68, 0x5d, 0x5a, 0x83, 0x2a, 0x28, 0xd7, 0x04, 0xc7, 0xc5, 0x06, 0x62, 0xad,
	0xc8, 0x51, 0xac, 0x4f, 0x11, 0x1e, 0x2a, 0x20, 0xdc, 0x28, 0x22, 0x2c, 0x60, 0xba, 0x8d, 0x3d,
	0x24, 0x7d, 0xfa, 0x15, 0x87, 0xc1, 0x1a, 0x7c, 0xa3, 0x9f, 0x1d, 0x73, 0xba, 0xeb, 0x64, 0xf7,
	0xf3, 0x54, 0xd3, 0x7d, 0x17, 0x36, 0x26, 0x96, 0xc5, 0x35, 0x78, 0x1b, 0x77, 0x63, 0xff, 0x9e,
	0xc0, 0xae, 0x85, 0x4b, 0xae, 0xf1, 0x33, 0x0b, 0x97, 0xdc, 0xd6, 0xff, 0x3f, 0xdc, 0xbd, 0xcb,
	0xe5, 0xc3, 0x7b, 0x0c, 0xf6, 0x12, 0x8f, 0xe1, 0x54, 0xd8, 0x3f, 0x74, 0xc3, 0x6d, 0x89, 0xc6,
	0x75, 0xeb, 0x61, 0x9f, 0x87, 0xbe, 0xf9, 0x45, 0x32, 0x7c, 0x5f, 0x77, 0xb2, 0xf3, 0xb3, 0x66,
	0xc9, 0x97, 0x13, 0x1c, 0xf6, 0xa0, 0x6c, 0x41, 0x08, 0x7b, 0xc8, 0xfc, 0x12, 0x86, 0x05, 0x65,
	0xd8, 0x57, 0xc9, 0x73, 0x23, 0xfe, 0xc0, 0xa8, 0xb6, 0xb7, 0x2f, 0x03, 0x18, 0x92, 0x32, 0xf5,
	0x92, 0x6d, 0xab, 0x39, 0x37, 0x6e, 0x08, 0x8b, 0x82, 0xdd, 0x0f, 0x82, 0x63, 0x3d, 0xed, 0xa7,
	0x4b, 0x0e, 0xe0, 0xe3, 0xab, 0xf0, 0x0c, 0x50, 0xee, 0xa0, 0x4b, 0xdd, 0x20, 0x7c, 0x05, 0xac,
	0xa7, 0xfa, 0x59, 0x27, 0xa7, 0xcc, 0xae, 0xb9, 0xb5, 0x52, 0xb6, 0xaa, 0x76, 0x15, 0xac, 0x6b,
	0x16, 0xc5, 0x2d, 0xd4, 0xbc, 0x83, 0x8b, 0xd6, 0xd6, 0xd1, 0xaa, 0xe4, 0x63, 0x02, 0xaf, 0x03,
	0xc8, 0x66, 0x42, 0x2e, 0x6f, 0xa5, 0xb5, 0xbc, 0x0d, 0xac, 0x76, 0x26, 0xf2, 0x38, 0xd8, 0x94,
	0x33, 0xac, 0x0b, 0xca, 0xb9, 0x0a, 0x2b, 0xe7, 0xc6, 0xfc, 0xd7, 0x71, 0xa6, 0xa5, 0xf0, 0x00,
	0xd8, 0x40, 0x5c, 0x08, 0x7c, 0x85, 0xd5, 0xb8, 0xc2, 0x7a, 0xec, 0x2d, 0xe0, 0xca, 0x7e, 0xd4,
	0x01, 0xbb, 0x1b, 0x51, 0x38, 0xeb, 0x37, 0x71, 0x1b, 0x7e, 0x98, 0xa2, 0x78, 0xde, 0x0b, 0xea,
	0xb1, 0xb7, 0x50, 0x6f, 0xa3, 0xb8, 0x81, 0xc2, 0xd4, 0x0f, 0x50, 0xb2, 0xe5, 0xa9, 0x9d, 0x2b,
	0xf7, 0x0f, 0x8c, 0x9f, 0xa4, 0x7e, 0x96, 0xea, 0x9c, 0x9f, 0xde, 0xeb, 0xcc, 0x8c, 0x36, 0xa2,
	0x56, 0xd5, 0x0b, 0x82, 0x28, 0xf6, 0x0e, 0xd3, 0xce, 0xcd, 0x3e, 0x62, 0x8b, 0x92, 0x78, 0x60,
	0x5e, 0x46, 0x8d, 0xda, 0x4e, 0xd6, 0xc6, 0x14, 0x6d, 0xa2, 0xe6, 0x2d, 0x4c, 0xb3, 0x06, 0x60,
	0x07, 0x54, 0x64, 0x38, 0xe6, 0xbb, 0x03, 0x98, 0x6c, 0x59, 0xb3, 0xb8, 0xe6, 0xb7, 0x94, 0x9b,
	0xc7, 0x9a, 0xd1, 0x35, 0xa7, 0x9f, 0x1c, 0x5a, 0x55, 0xdb, 0x9a, 0x75, 0x7d, 0xbd, 0x7b, 0xc8,
	0xf6, 0x51, 0x93, 0x53, 0x2c, 0xf7, 0xb3, 0xab, 0xb0, 0x9d, 0x69, 0x6d, 0x97, 0xbd, 0xad, 0xa5,
	0x6f, 0x6b, 0xe9, 0x5b, 0xaf, 0xa5, 0x9f, 0x5e, 0x85, 0xaf, 0xe9, 0xcd, 0xd6, 0xfe, 0xdb, 0xea,
	0xf9, 0xb6, 0x7a, 0xbe, 0xf5, 0xea, 0xf9, 0xdb, 0xab, 0xc0, 0x99, 0xbe, 0xce, 0x90, 0x6f, 0xab,
	0xeb, 0xdb, 0xea, 0xfa, 0xd6, 0xab, 0xeb, 0xbb, 0x70, 0x86, 0x07, 0x0d, 0xc9, 0x9e, 0xf3, 0xbb,
	0xe3, 0x83, 0x9a, 0xd9, 0x8d, 0xe0, 0xe2, 0x42, 0xf8, 0xae, 0x83, 0xdd, 0x5a, 0xd1, 0x54, 0xe1,
	0x0f, 0x80, 0xb5, 0xf8, 0x14, 0x91, 0x95, 0x10, 0x8f, 0x0d, 0x4f, 0x77, 0x8f, 0x0d, 0xd9, 0x4f,
	0xee, 0xdd, 0xae, 0xc8, 0xfc, 0xe4, 0xbf, 0xb4, 0x70, 0x6b, 0xe0, 0x59, 0xbd, 0xec, 0x3e, 0xf0,
	0x1e, 0x03, 0x9b, 0xb9, 0xe8, 0x71, 0xcb, 0x3c, 0x96, 0xb3, 0x60, 0x4b, 0xb9, 0x12, 0x6d, 0x7c,
	0x27, 0x58, 0xe3, 0x27, 0xb2, 0x64, 0x95, 0xa7, 0xfc, 0x84, 0xe4, 0xa6, 0x5c, 0x66, 0x97, 0xac,
	0x35, 0xd4, 0x8a, 0xe6, 0xbd, 0x20, 0xb9, 0xd5, 0xbe, 0xd5, 0xd5, 0x43, 0xc1, 0x9b, 0x59, 0x3c,
	0x03, 0x3a, 0xe5, 0x33, 0xe0, 0x0c, 0xbb, 0x3f, 0x95, 0x4b, 0xca, 0x1d, 0x35, 0x6b, 0x62, 0xfa,
	0x3b, 0xbd, 0x01, 0x1a, 0x91, 0xc4, 0x40, 0x50, 0x11, 0xd8, 0x65, 0x9b, 0x97, 0x77, 0xa7, 0xf1,
	0x5e, 0x2e, 0xdc, 0xd8, 0x2f, 0x12, 0x75, 0x8c, 0xaf, 0xe1, 0x2d, 0x24, 0xe6, 0xfe, 0xf7, 0x22,
	0xfa, 0xbd, 0x22, 0x7a, 0x99, 0xa8, 0x02, 0x8b, 0xeb, 0xd8, 0x31, 0x5d, 0x2a, 0x60, 0xa5, 0x8d,
	0x59, 0x8e, 0x00, 0xd5, 0x46, 0xfa, 0xd1, 0xbd, 0x83, 0xef, 0x41, 0xca, 0x22, 0xf3, 0xfb, 0x9d,
	0xa7, 0x68, 0xeb, 0x72, 0xd7, 0x41, 0xa9, 0x62, 0x56, 0xdc, 0x5d, 0xc0, 0x27, 0x4f, 0x25, 0x29,
	0x33, 0xe6, 0x6d, 0x60, 0x20, 0xbf, 0x85, 0xa7, 0xa8, 0xd9, 0x17, 0x3c, 0xa3, 0x95, 0x22, 0xa3,
	0x39, 0xac, 0x98, 0xea, 0x86, 0xf3, 0x88, 0xe4, 0x02, 0x33, 0xdb, 0xe1, 0xc8, 0x19, 0x5e, 0xc0,
	0x0d, 0xe1, 0x69, 0x7b, 0xd5, 0x4b, 0xe8, 0x75, 0xc6, 0x44, 0xd4, 0x6a, 0xf9, 0xa9, 0x1d, 0x45,
	0x37, 0xc0, 0x9a, 0xaf, 0x91, 0x90, 0x3b, 0x54, 0x07, 0xb1, 0xe7, 0xbc, 0x81, 0x7f, 0xa2, 0x78,
	0x77, 0x2b, 0x9d, 0x38, 0x38, 0xd9, 0x06, 0x7b, 0x3f, 0x6a, 0xa0, 0x5b, 0x8f, 0x48, 0x74, 0xc7,
	0xc4, 0xd6, 0xe8, 0x12, 0xd4, 0x13, 0xe0, 0x16, 0xd8, 0x63, 0x10, 0xb1, 0xa4, 0x88, 0x4f, 0x62,
	0x7d, 0xa7, 0x17, 0xdf, 0x0b, 0x5e, 0xdc, 0x24, 0x45, 0xcc, 0x38, 0x8f, 0x61, 0xad, 0x2e, 0x57,
	0x64, 0x31, 0xc5, 0xd8, 0x8b, 0x44, 0xe7, 0x35, 0xf9, 0xe0, 0x36, 0xf0, 0x78, 0x52, 0x4e, 0x2c,
	0x9e, 0x60, 0x69, 0xef, 0x1d, 0xc9, 0x90, 0x6b, 0x1a, 0xc9, 0x3b, 0xf0, 0x69, 0x2e, 0x6a, 0x21,
	0x33, 0xcc, 0x76, 0x49, 0x7d, 0xd3, 0x9c, 0x7d, 0x96, 0xd4, 0x06, 0x59, 0xf8, 0x42, 0xe2, 0xde,
	0xc6, 0x3e, 0x5b, 0xaa, 0xc2, 0x24, 0x7e, 0xa7, 0x93, 0xde, 0x8b, 0x62, 0x3f, 0x7d, 0xb8, 0xa8,
	0x55, 0x23, 0xc6, 0x57, 0xc3, 0x0a, 0xb9, 0x94, 0xc1, 0x35, 0x30, 0xe0, 0x65, 0x5f, 0xf6, 0x1d,
	0x55, 0xc2, 0x44, 0xb8, 0x09, 0x6e, 0x53, 0x98, 0x96, 0xd3, 0x81, 0xd7, 0x40, 0x2d, 0x64, 0x75,
	0x15, 0xa5, 0x5f, 0x4e, 0x36, 0x81, 0xd5, 0xa9, 0x17, 0xcf, 0xa1, 0x94, 0xae, 0x26, 0xf4, 0x93,
	0x3b, 0x87, 0x3d, 0xd3, 0xaa, 0x46, 0xf3, 0xa5, 0x7d, 0x1d, 0x0b, 0x24, 0xe2, 0xae, 0x05, 0xb7,
	0x4a, 0x57, 0x94, 0x28, 0xc6, 0x33, 0x65, 0x6d, 0x93, 0xff, 0xe8, 0xde, 0x29, 0x2f, 0x97, 0xb7,
	0xda, 0x51, 0x68, 0x9f, 0x5a, 0xc6, 0x18, 0xac, 0x10, 0x18, 0xb4, 0xca, 0xcb, 0xa1, 0x20, 0x38,
	0xf7, 0xb1, 0xae, 0xc2, 0x89, 0xd1, 0x7d, 0x8f, 0x14, 0xa9, 0xee, 0xde, 0x11, 0x46, 0x89, 0x4c,
	0xbe, 0x69, 0x14, 0xdf, 0xb8, 0xe7, 0xc5, 0x68, 0x51, 0x2a, 0xf7, 0x51, 0x47, 0x18, 0x8a, 0xa2,
	0x64, 0x4a, 0xc3, 0x03, 0x43, 0xe4, 0x32, 0xb3, 0x6b, 0x77, 0xd7, 0x93, 0xee, 0x6f, 0x94, 0x51,
	0xdf, 0x66, 0xef, 0xba, 0x58, 0x68, 0xca, 0xf5, 0xf0, 0x25, 0x20, 0xbf, 0x2d, 0x5c, 0x8a, 0xe2,
	0x6c, 0x16, 0x84, 0xcd, 0x82, 0x89, 0xc8, 0x11, 0x72, 0x04, 0x42, 0xba, 0x88, 0xb2, 0x47, 0xd8,
	0x5a, 0x31, 0x37, 0x41, 0x49, 0x5f, 0x05, 0x10, 0x77, 0x7e, 0x9d, 0xee, 0x4c, 0xbc, 0x0e, 0x9a,
	0xf6, 0xeb, 0xa1, 0xa4, 0xf0, 0x8d, 0xfb, 0x49, 0x07, 0x5f, 0x20, 0xc9, 0xf6, 0x3f, 0x7b, 0xf3,
	0x48, 0xc3, 0x4e, 0x9c, 0x89, 0x2b, 0x35, 0x1b, 0xfb, 0x93, 0xa2, 0x06, 0x2c, 0xe0, 0xc5, 0x4c,
	0x8e, 0x8b, 0xf6, 0xc4, 0x4d, 0x4d, 0x4f, 0xd8, 0xee, 0xef, 0xe5, 0x1e, 0x39, 0x8d, 0x23, 0x99,
	0xa7, 0x63, 0x34, 0xef, 0x47, 0x1d, 0x9a, 0xf3, 0x4c, 0x4e, 0x9b, 0xe6, 0x9d, 0xe8, 0x13, 0xa4,
	0x37, 0xa5, 0x95, 0xf3, 0xcc, 0xeb, 0x2c, 0x3e, 0x6b, 0x91, 0x9a, 0x9a, 0x05, 0x76, 0xb9, 0x60,
	0x20, 0x8c, 0xd2, 0xfa, 0x6c, 0xd4, 0x09, 0x49, 0xe7, 0xe7, 0xd6, 0xfb, 0x9a, 0x30, 0x4a, 0x2f,
	0x75, 0xbf, 0x76, 0xf7, 0xe3, 0xcb, 0x2b, 0x12, 0x06, 0xde, 0x69, 0x49, 0xe0, 0xe5, 0x61, 0xe9,
	0xaf, 0xe3, 0x7b, 0x26, 0x7d, 0xc9, 0x65, 0x62, 0xe2, 0x56, 0x01, 0xc4, 0x0d, 0x5d, 0x7c, 0xc0,
	0xe7, 0xa5, 0x6a, 0xba, 0xfb, 0x38, 0x78, 0x87, 0x50, 0x81, 0x02, 0xdb, 0x0e, 0x56, 0xa3, 0x07,
	0xe5, 0x6c, 0x53, 0xfa, 0xa5, 0x7b, 0x04, 0x6c, 0xa4, 0x69, 0xe6, 0x63, 0x34, 0xe8, 0xcd, 0xd8,
	0xd0, 0x19, 0xf0, 0x4c, 0xa1, 0x4a, 0x1e, 0xff, 0x37, 0xd0, 0x3d, 0x39, 0xe1, 0x2f, 0xc5, 0xd6,
	0xd6, 0xf8, 0x09, 0x29, 0xeb, 0x9e, 0xc0, 0x91, 0x2a, 0xb8, 0xf6, 0x25, 0x94, 0x85, 0xd8, 0x59,
	0x34, 0x1a, 0x31, 0x7b, 0x88, 0xaf, 0x97, 0x27, 0xac, 0x0e, 0xce, 0x22, 0x16, 0xc9, 0xd7, 0xef,
	0x42, 0x0e, 0x66, 0x73, 0xd1, 0xee, 0x34, 0x06, 0x4a, 0xef, 0x7c, 0x6f, 0x34, 0xa2, 0x18, 0x5d,
	0x6c, 0x79, 0x8b, 0x4a, 0xae, 0x9a, 0xc4, 0x14, 0x4a, 0x12, 0x59, 0x54, 0x23, 0x7e, 0xb8, 0x43,
	0x1e, 0xd5, 0x88, 0x8b, 0xd7, 0x48, 0x09, 0xf7, 0x5d, 0x38, 0x6a, 0x8e, 0xdd, 0x7c, 0xf6, 0x80,
	0xce, 0x94, 0xa1, 0x76, 0x05, 0xcf, 0x77, 0x99, 0xe8, 0xde, 0x61, 0x4e, 0xf3, 0x41, 0x49, 0xbd,
	0xf5, 0xa0, 0x62, 0x23, 0x9c, 0xe4, 0xa3, 0x93, 0x16, 0x03, 0x8d, 0xd8, 0xbb, 0xb9, 0x23, 0x0f,
	0xff, 0x96, 0x94, 0xcf, 0xc2, 0x8b, 0xb3, 0x77, 0x6f, 0x60, 0x7b, 0x57, 0xd3, 0x08, 0x0b, 0xee,
	0xc4, 0xa8, 0x14, 0xc1, 0x9d, 0x04, 0x38, 0x2d, 0x42, 0xe3, 0x7a, 0x84, 0xa5, 0xe8, 0x7a, 0xc7,
	0xc3, 0x3e, 0xb0, 0x7e, 0x14, 0xc2, 0xfd, 0x29, 0x12, 0xf8, 0x64, 0x2d, 0x30, 0xcf, 0x6e, 0x5f,
	0x85, 0x3d, 0x6b, 0x8b, 0x5d, 0xed, 0x88, 0x14, 0xf7, 0x15, 0x9c, 0x20, 0x26, 0x05, 0xd1, 0xf3,
	0x0c, 0x74, 0x3f, 0xe4, 0xe0, 0xcc, 0x2e, 0x3b, 0x69, 0x6f, 0x39, 0x9f, 0x9e, 0xe7, 0x83, 0x96,
	0x8f, 0x6a, 0x2e, 0x2c, 0x31, 0x9f, 0x59, 0xbc, 0x65, 0x92, 0x43, 0x7a, 0x41, 0xa1, 0x97, 0xf4,
	0x88, 0x78, 0x07, 0x6f, 0xb8, 0xfa, 0x76, 0x58, 0x64, 0x50, 0x3e, 0x6b, 0x24, 0x91, 0x41, 0xa4,
	0x52, 0x3e, 0x6d, 0x88, 0xc3, 0x62, 0xa2, 0x13, 0xc7, 0x28, 0x4c, 0xaf, 0x46, 0x0b, 0x79, 0x6c,
	0x27, 0xe9, 0x3a, 0x8b, 0x51, 0xb8, 0x8e, 0x67, 0xb3, 0x46, 0x42, 0xef, 0xab, 0xd0, 0x8c, 0x10,
	0xa3, 0xb3, 0x3c, 0x8b, 0x50, 0x0d, 0x13, 0x57, 0xb7, 0xd1, 0xcf, 0x1a, 0x84, 0xb0, 0x2b, 0x84,
	0x8c, 0x92, 0x28, 0x79, 0x49, 0x95, 0xe1, 0x36, 0xa7, 0x74, 0x8a, 0x66, 0xfa, 0xd2, 0x85, 0x09,
	0x2c, 0x57, 0x18, 0xc9, 0xc2, 0x4a, 0x67, 0xa1, 0x0e, 0x37, 0x49, 0x56, 0xbb, 0x56, 0x48, 0xef,
	0x1a, 0x51, 0xc7, 0x76, 0x3e, 0x9d, 0xd4, 0xc9, 0x32, 0xf4, 0xe9, 0x34, 0x3e, 0xa3, 0x2a, 0x1a,
	0x58, 0xaa, 0x99, 0xc5, 0x2f, 0x4a, 0xfd, 0xcd, 0x2c, 0x51, 0x42, 0xef, 0xfd, 0x78, 0x0b, 0x9f,
	0x3c, 0xae, 0xfa, 0x49, 0x8a, 0x42, 0x3f, 0x9c, 0x9b, 0x88, 0xd0, 0xec, 0xac, 0xdf, 0xf0, 0xed,
	0xdc, 0x25, 0x6a, 0xfb, 0xe3, 0x75, 0x92, 0x54, 0x20, 0x15, 0x4b, 0x41, 0xde, 0x01, 0xcf, 0x04,
	0xd9, 0xef, 0xf5, 0x06, 0x2b, 0x20, 0x8f, 0xb0, 0x94, 0x8a, 0xda, 0x18, 0x48, 0xbe, 0xa5, 0xcf,
	0x28, 0x64, 0x9b, 0x40, 0xee, 0xc3, 0xe8, 0x9e, 0xcf, 0x2f, 0xc5, 0x5d, 0x9b, 0x3b, 0xcf, 0x2a,
	0xe9, 0x8f, 0xdb, 0xe7, 0x1c, 0x1c, 0xc0, 0x6f, 0x68, 0x80, 0xb2, 0x7c, 0x1f, 0x58, 0x4f, 0x7d,
	0x0d, 0xb3, 0xf4, 0xa7, 0x25, 0x72, 0x35, 0x64, 0x2d, 0x59, 0x1d, 0xe4, 0xde, 0x8b, 0x93, 0x00,
	0x32, 0xc4, 0x2c, 0x78, 0xbf, 0xd7, 0x4e, 0x51, 0xc5, 0x50, 0x7e, 0xde, 0xc1, 0xfe, 0x0e, 0x63,
	0x03, 0x3f, 0x51, 0x9d, 0xf2, 0x1e, 0x61, 0x18, 0xb3, 0x35, 0x69, 0xc9, 0xfa, 0xe4, 0x77, 0x1d,
	0xa1, 0xd3, 0x55, 0xf2, 0x7f, 0xa2, 0xba, 0xe4, 0xb8, 0x60, 0xe2, 0xd2, 0x4b, 0x63, 0x6f, 0x8e,
	0x8e, 0xe3, 0xcd, 0x08, 0xfb, 0x41, 0xb2, 0x10, 0xe9, 0xfc, 0xf0, 0xff, 0x29, 0x07, 0x87, 0x30,
	0xda, 0x57, 0xa3, 0x9c, 0x9b, 0x60, 0x43, 0x3b, 0x2f, 0x4b, 0xf3, 0x0b, 0x16, 0xcb, 0x7a, 0xa8,
	0x5d, 0x68, 0xdd, 0xdd, 0x8d, 0x5d, 0x82, 0xd8, 0x35, 0x91, 0xe1, 0x79, 0xd9, 0x4f, 0xd2, 0xd8,
	0x9f, 0xe9, 0xa4, 0x79, 0xc2, 0xfb, 0x87, 0x48, 0xda, 0x85, 0xb2, 0x14, 0x45, 0x7c, 0x17, 0x3c,
	0x9d, 0x76, 0x8b, 0x2c, 0x11, 0xd8, 0xc1, 0x94, 0xb5, 0xe7, 0x8e, 0xe3, 0x03, 0x25, 0x9f, 0xd4,
	0x56, 0xd8, 0xcf, 0x2c, 0xee, 0x1b, 0x3f, 0x45, 0x1c, 0x49, 0x52, 0x21, 0xff, 0xf7, 0x09, 0x72,
	0xe4, 0x6e, 0xe9, 0x1a, 0x7a, 0x90, 0x4e, 0xdc, 0xeb, 0xc4, 0xdd, 0x65, 0x1b, 0x43, 0xeb, 0x21,
	0xe9, 0xc9, 0xbd, 0x82, 0x0d, 0x2a, 0x9d, 0x08, 0x4a, 0xd3, 0xa2, 0xb3, 0xce, 0xe1, 0x1d, 0x3e,
	0xf3, 0xcc, 0x10, 0xdd, 0xbc, 0x14, 0xc5, 0xb6, 0x19, 0x97, 0xe7, 0xb1, 0x5e, 0xa9, 0xaa, 0x53,
	0x18, 0x15, 0xb0, 0x86, 0x6e, 0x1b, 0x59, 0xc2, 0x7f, 0xfe, 0x99, 0xda, 0x03, 0x44, 0x00, 0xb3,
	0x88, 0x7a, 0x81, 0x70, 0x19, 0x77, 0xa8, 0x46, 0x42, 0x7e, 0x51, 0x3f, 0xc8, 0x3c, 0x17, 0x19,
	0x10, 0xfe, 0x2b, 0xa1, 0x2f, 0xa8, 0xb1, 0xde, 0x6f, 0x5f, 0x94, 0xab, 0xb3, 0xbe, 0xa0, 0x0e,
	0x9e, 0xbc, 0x2f, 0xb2, 0xcf, 0xee, 0x38, 0xbb, 0x33, 0x9c, 0x0a, 0xfd, 0xd4, 0xc7, 0x4e, 0xd5,
	0xee, 0x4f, 0x17, 0x5b, 0x9e, 0xad, 0x75, 0xb4, 0x40, 0xbd, 0x95, 0x1a, 0x19, 0xec, 0xcc, 0xc7,
	0xec, 0xa3, 0xc5, 0x9c, 0xf9, 0x88, 0x0d, 0x75, 0x11, 0x6f, 0x24, 0x7c, 0xc3, 0x6c, 0x30, 0x7a,
	0xc0, 0xff, 0x3a, 0xde, 0x2f, 0x4c, 0x62, 0x96, 0x87, 0x42, 0xb9, 0xff, 0xa9, 0x4a, 0x2f, 0xaa,
	0xff, 0x4b, 0x32, 0x96, 0x05, 0xfc, 0xd1, 0xcf, 0xfe, 0xaa, 0x03, 0x9e, 0xbe, 0xde, 0x41, 0xf1,
	0xc3, 0x1b, 0x28, 0x9e, 0xf7, 0x1b, 0x08, 0xbe, 0x1f, 0x0c, 0xe4, 0xaf, 0xa4, 0xc0, 0x11, 0xf1,
	0x35, 0x94, 0xe2, 0x93, 0x2a, 0x95, 0x1d, 0xca, 0xdf, 0x09, 0x5c, 0x77, 0xdb, 0x87, 0xff, 0xfe,
	0x07, 0x1f, 0x5f, 0xb1, 0x09, 0x6e, 0xac, 0x4a, 0x9e, 0xee, 0x85, 0x1f, 0x71, 0xc0, 0x3a, 0x31,
	0xcd, 0x1b, 0xee, 0x2e, 0x49, 0x2c, 0x67, 0x87, 0x57, 0x9e, 0xd5, 0x17, 0xa2, 0x6d, 0xef, 0xff,
	0xe9, 0xee, 0x16, 0x8d, 0x01, 0x6c, 0x87, 0x5b, 0x45, 0x00, 0x42, 0x0a, 0x39, 0x5c, 0x00, 0x6b,
	0xb2, 0xee, 0x87, 0xdb, 0x4b, 0xb2, 0xf9, 0x99, 0x5c, 0x19, 0x51, 0xfd, 0x4c, 0x1b, 0x3d, 0xc4,
	0x1a, 0xdd, 0x05, 0x77, 0x88, 0x8d, 0x92, 0x9d, 0xa1, 0xfa, 0x28, 0x6b, 0xf7, 0x31, 0xfc, 0x11,
	0xb9, 0x74, 0xd3, 0xa7, 0x98, 0xc2, 0x13, 0xa5, 0x36, 0xad, 0x32, 0x60, 0x2b, 0x27, 0x7b, 0xae,
	0x47, 0x49, 0xdc, 0x66, 0x24, 0x5e, 0x81, 0x53, 0x06, 0x12, 0xf4, 0x89, 0xe6, 0xa4, 0xfa, 0x48,
	0xcc, 0xa9, 0x7d, 0x5c, 0x2d, 0xe6, 0xc3, 0xc2, 0xdf, 0x71, 0xf0, 0x93, 0x0a, 0xa5, 0x4c, 0x0d,
	0xf8, 0x5c, 0x09, 0xa9, 0x2a, 0x7d, 0xb3, 0x72, 0xc0, 0xa6, 0x28, 0xe5, 0x71, 0x9e, 0xf1, 0x38,
	0x0e, 0x8f, 0x8a, 0x3c, 0x58, 0xec, 0x1c, 0xcf, 0xe5, 0x11, 0xbf, 0xf3, 0x3d, 0x86, 0x9f, 0x77,
	0x70, 0x46, 0xae, 0x34, 0x47, 0x1b, 0x1e, 0x2e, 0x21, 0xd1, 0x65, 0x82, 0x57, 0x46, 0x6d, 0x8b,
	0x53, 0xf0, 0x27, 0x19, 0xf8, 0x43, 0xf0, 0x80, 0x08, 0xbe, 0xd8, 0xb3, 0x82, 0x52, 0xfd, 0xa6,
	0x03, 0xde, 0x21, 0xc9, 0xbd, 0x86, 0xfb, 0x4b, 0x00, 0x14, 0xa9, 0xdf, 0x95, 0xe7, 0x2c, 0x4a,
	0x52, 0x94, 0x2f, 0x31, 0x94, 0xc7, 0xe0, 0x11, 0x11, 0x65, 0x9e, 0xb7, 0xad, 0xe9, 0xe1, 0xbf,
	0x74, 0x70, 0x28, 0x89, 0xea, 0x95, 0x09, 0xf8, 0xbc, 0x64, 0xaa, 0x6b, 0x1f, 0xbd, 0xa8, 0x1c,
	0xe9, 0xa1, 0x06, 0x25, 0x31, 0xc6, 0x48, 0x9c, 0x80, 0xc7, 0x8b, 0x2b, 0x05, 0x09, 0xe2, 0x0d,
	0xa2, 0x44, 0xc7, 0xe3, 0x43, 0x0e, 0x58, 0x2b, 0xbc, 0xfb, 0x04, 0x5d, 0xc9, 0x4a, 0x51, 0x78,
	0x2c, 0xaa, 0xb2, 0x5b, 0x5b, 0x86, 0xa2, 0xdb, 0xcb, 0xd0, 0x6d, 0x85, 0xc3, 0xc5, 0xd9, 0xd8,
	0x35, 0xa9, 0xf1, 0x8d, 0x6a, 0x57, 0x59, 0x37, 0xc9, 0xdf, 0x6e, 0x82, 0x07, 0x4b, 0xed, 0xa8,
	0x9f, 0x5a, 0xaa, 0x1c, 0xb2, 0x2b, 0x4c, 0xd1, 0x9d, 0x63, 0xe8, 0x8e, 0xc2, 0xe7, 0x45, 0x74,
	0x59, 0x4a, 0x19, 0xc6, 0x57, 0x7d, 0x94, 0x2f, 0x0c, 0x9c, 0xb2, 0x7e, 0x81, 0x8c, 0xbf, 0xea,
	0x7d, 0x26, 0xc9, 0xf8, 0x1b, 0x5e, 0x8a, 0x92, 0x8c, 0xbf, 0xe9, 0xf1, 0x27, 0xf7, 0x05, 0xc6,
	0xe1, 0x00, 0xdc, 0x2f, 0xe5, 0x90, 0x10, 0x12, 0xc2, 0x44, 0xfb, 0x27, 0x87, 0x85, 0xe9, 0xa8,
	0x9e, 0x64, 0x82, 0x2f, 0x94, 0xe0, 0xd8, 0xbc, 0x18, 0x55, 0x39, 0xd1, 0x6b, 0x35, 0x4a, 0xe5,
	0x0a, 0xa3, 0x72, 0x1e, 0x9e, 0xd3, 0x0c, 0x47, 0x3d, 0x41, 0xc1, 0x6c, 0xf5, 0x51, 0xe1, 0x35,
	0x22, 0x61, 0x6c, 0xbe, 0xe7, 0x94, 0x43, 0x82, 0x8a, 0x8f, 0x0c, 0x49, 0xf8, 0xd9, 0x3c, 0x13,
	0x25, 0xe1, 0x67, 0xf5, 0xdc, 0x93, 0x7b, 0x8d, 0xf1, 0x9b, 0x80, 0x63, 0x72, 0x7e, 0x34, 0xd8,
	0x01, 0x65, 0x7a, 0xa7, 0xe3, 0xf8, 0x63, 0x07, 0x9b, 0x6f, 0xe6, 0xd7, 0x94, 0xe0, 0x69, 0xf5,
	0x88, 0x98, 0xde, 0x88, 0xaa, 0x9c, 0xe9, 0xab, 0x2e, 0xa5, 0x7c, 0x97, 0x51, 0x7e, 0x0d, 0xbe,
	0x2a, 0x52, 0x2e, 0x52, 0x2d, 0x3d, 0xb8, 0xf4, 0x58, 0x4f, 0xff, 0x6b, 0x0e, 0xbe, 0xe6, 0x55,
	0xa2, 0x81, 0x47, 0xec, 0x91, 0x67, 0x64, 0x8f, 0xf6, 0x52, 0x85, 0x72, 0xbc, 0xcc, 0x38, 0x9e,
	0x83, 0x67, 0x7a, 0xe7, 0xc8, 0x18, 0x7d, 0x24, 0x5b, 0x88, 0xb3, 0x37, 0x98, 0xa4, 0x0b, 0x71,
	0xe1, 0x4d, 0x27, 0xe9, 0x42, 0x5c, 0x7c, 0xc4, 0xc9, 0x3d, 0xc8, 0x40, 0xee, 0x84, 0x23, 0x22,
	0x48, 0x8a, 0x8d, 0xe1, 0xf8, 0x53, 0xae, 0x67, 0x65, 0x81, 0xcb, 0xaa, 0x9e, 0xd5, 0x84, 0x4d,
	0xab, 0x7a, 0x56, 0x17, 0x17, 0xed, 0x9e, 0x62, 0xa0, 0x0f, 0xc3, 0x83, 0x12, 0xd0, 0x59, 0x2c,
	0x4f, 0x52, 0xdc, 0xd2, 0xbe, 0xeb, 0xe0, 0x33, 0xb2, 0x31, 0x04, 0x1b, 0xbe, 0xa8, 0x9f, 0xcb,
	0x3a, 0x46, 0xa7, 0xfb, 0xa9, 0x6a, 0xb1, 0x6b, 0x8b, 0x3a, 0xa3, 0xa4, 0xf8, 0x1b, 0xc4, 0x54,
	0x2a, 0xc6, 0x28, 0x49, 0x4c, 0x25, 0x45, 0x80, 0xb5, 0xc4, 0x54, 0x52, 0x45, 0x44, 0x6b, 0x77,
	0x4a, 0x01, 0xa6, 0x60, 0x66, 0xd0, 0xd9, 0xfb, 0x18, 0xfe, 0x03, 0xd9, 0x29, 0x55, 0x71, 0x55,
	0x92, 0x9d, 0xd2, 0x10, 0x1c, 0x2e, 0xd9, 0x29, 0x4d, 0x51, 0xdd, 0x6e, 0x8d, 0x71, 0x98, 0x84,
	0x17, 0x6d, 0xfa, 0x5c, 0x20, 0x93, 0x4f, 0x5d, 0x9e, 0xd8, 0x2f, 0x38, 0xf8, 0x61, 0x4e, 0xf1,
	0xb9, 0x1a, 0xb8, 0x57, 0x71, 0x78, 0x29, 0x3c, 0x3c, 0x53, 0xd9, 0x67, 0x2c, 0x67, 0x31, 0x7b,
	0xc9, 0xc9, 0x85, 0x59, 0x28, 0xf0, 0x13, 0x0e, 0x80, 0xe5, 0x37, 0x6a, 0xe0, 0x3e, 0x95, 0x69,
	0x54, 0x44, 0xb5, 0xdf, 0x5c, 0xd0, 0xe2, 0xc0, 0x48, 0xbb, 0x88, 0xc3, 0xd5, 0x35, 0x97, 0x35,
	0xc9, 0x38, 0x45, 0x25, 0x30, 0xa7, 0x04, 0x15, 0x95, 0xc0, 0x22, 0xd3, 0x47, 0x3b, 0xf1, 0xe8,
	0x19, 0x90, 0xa5, 0xd5, 0x08, 0xe3, 0x9f, 0xf3, 0xf8, 0xb2, 0x03, 0xb6, 0xe9, 0xb2, 0x74, 0x60,
	0x09, 0x96, 0x31, 0x5b, 0xa8, 0xb8, 0x3a, 0xda, 0x24, 0x01, 0xb9, 0xe3, 0x8c, 0xca, 0x49, 0xf8,
	0x82, 0xdc, 0x9c, 0x30, 0x71, 0xf9, 0x37, 0xe1, 0x08, 0x53, 0x3e, 0xdc, 0x2a, 0x8f, 0x30, 0xca,
	0x33, 0xee, 0x91, 0x1e, 0x6a, 0x50, 0x22, 0x88, 0x11, 0xb9, 0x0b, 0xdf, 0x29, 0x3f, 0xc2, 0xc8,
	0x8f, 0xbc, 0xe2, 0x9b, 0x41, 0xe2, 0x0a, 0x59, 0x78, 0x50, 0xe8, 0x31, 0xfc, 0xad, 0x15, 0x38,
	0x74, 0xd6, 0xf6, 0xc9, 0x05, 0x78, 0xc1, 0x9a, 0x89, 0xe2, 0x31, 0x9e, 0xca, 0xd8, 0x22, 0x24,
	0xd0, 0xbe, 0x59, 0x60, 0x7d, 0x13, 0xc0, 0xf7, 0x9b, 0xfa, 0xa6, 0x1e, 0x11, 0x39, 0xf5, 0x38,
	0x13, 0xd4, 0x77, 0x6f, 0xfd, 0x99, 0x83, 0x63, 0xc9, 0x14, 0x89, 0xf8, 0xb0, 0xaa, 0xf0, 0x08,
	0xa8, 0x5e, 0x3c, 0xaa, 0x3c, 0x6f, 0x5f, 0xc1, 0xc2, 0x03, 0x42, 0x9d, 0x08, 0x5a, 0xed, 0x80,
	0x1f, 0x5e, 0xc1, 0xbd, 0xc9, 0x64, 0xcc, 0x7e, 0x85, 0xe7, 0x6d, 0x11, 0xaa, 0x86, 0xfb, 0x42,
	0xff, 0x02, 0x28, 0xe5, 0xeb, 0x8c, 0xf2, 0x25, 0xf8, 0xb2, 0x25, 0x65, 0xed, 0xa0, 0xc3, 0x1f,
	0x3a, 0xf8, 0xbe, 0xc1, 0x94, 0x0b, 0x0c, 0x4f, 0x29, 0xc0, 0x1b, 0xdf, 0xb2, 0xaa, 0xbc, 0xd8,
	0x47, 0x4d, 0xca, 0x77, 0x8a, 0xf1, 0x7d, 0x09, 0x9e, 0x95, 0xf2, 0xf5, 0x32, 0x29, 0x86, 0xc1,
	0xfe, 0xb5, 0x15, 0xf8, 0x36, 0xb2, 0xd7, 0x9c, 0x67, 0x78, 0xb9, 0x67, 0xf4, 0xaa, 0xe1, 0x9f,
	0x5a, 0x02, 0x49, 0xb4, 0x5f, 0xde, 0xcd, 0xfa, 0x65, 0x1a, 0x5e, 0xeb, 0xb9, 0x5f, 0xf4, 0x1a,
	0xf1, 0x37, 0x0e, 0x4e, 0xee, 0x94, 0xbe, 0xac, 0x55, 0x74, 0x0c, 0x1a, 0x1e, 0x0c, 0x2b, 0x3a,
	0x06, 0x4d, 0xcf, 0x7f, 0xb9, 0xd3, 0x8c, 0xd8, 0x45, 0x38, 0x51, 0xf0, 0x6a, 0xaa, 0xdf, 0x05,
	0xd3, 0x38, 0xaf, 0xbe, 0xe6, 0x80, 0x61, 0xe5, 0x33, 0x41, 0x70, 0x54, 0xb1, 0xaf, 0xaa, 0xf8,
	0x54, 0xad, 0xcb, 0x5b, 0xcc, 0x58, 0xdd, 0xc3, 0x44, 0x1a, 0x46, 0x74, 0xe5, 0x55, 0xbc, 0xfc,
	0x25, 0x59, 0x79, 0xf5, 0x6f, 0x8c, 0x49, 0x56, 0x5e, 0xc3, 0xa3, 0x62, 0xda, 0x95, 0x97, 0xe3,
	0x20, 0x0c, 0x97, 0x30, 0x19, 0xff, 0x82, 0x98, 0x15, 0xaa, 0xf7, 0xd5, 0xa0, 0x16, 0x92, 0xec,
	0x2d, 0x37, 0x89, 0x59, 0x61, 0x7a, 0xbc, 0xcd, 0xbd, 0xc0, 0x58, 0xbc, 0x00, 0x8f, 0xa9, 0x59,
	0x08, 0x63, 0x94, 0x14, 0xce, 0xc1, 0x9b, 0x15, 0xef, 0x9a, 0xc1, 0x43, 0x0a, 0x5f, 0xbe, 0xf4,
	0x95, 0xaf, 0xca, 0x61, 0xcb, 0xd2, 0x14, 0xfa, 0x24, 0x83, 0x7e, 0x16, 0x9e, 0x96, 0x39, 0xff,
	0xe3, 0x7c, 0xda, 0x93, 0xf7, 0xb8, 0x44, 0xf3, 0x8e, 0x3e, 0xd3, 0x86, 0x6d, 0xd5, 0x8a, 0xfa,
	0x99, 0x33, 0x89, 0x2e, 0xe9, 0x5f, 0x2b, 0x93, 0xe8, 0x92, 0xe1, 0x7d, 0x31, 0xad, 0x77, 0x84,
	0x7b, 0xcd, 0x41, 0xc3, 0x86, 0x68, 0xd9, 0x63, 0xf8, 0x1f, 0x0e, 0x8e, 0x2e, 0xd3, 0xbd, 0x6a,
	0x06, 0x8f, 0x97, 0xf0, 0x59, 0xbc, 0xc1, 0x56, 0x79, 0xa1, 0xc7, 0x5a, 0x94, 0xda, 0x7b, 0x18,
	0xb5, 0x1a, 0x9c, 0x16, 0xa9, 0x45, 0x21, 0xaa, 0xfb, 0x61, 0xdd, 0x8e, 0x21, 0x2b, 0xf5, 0xb8,
	0xfa, 0x88, 0x8e, 0xef, 0x63, 0xf8, 0x31, 0x07, 0x0c, 0x15, 0x93, 0xf0, 0xe1, 0x9e, 0xd2, 0x82,
	0x2b, 0xcb, 0xec, 0xaf, 0xec, 0x35, 0x15, 0xa3, 0x14, 0xaa, 0x18, 0xfd, 0x73, 0x70, 0x5f, 0xe1,
	0x24, 0x94, 0xff, 0x75, 0x44, 0x9c, 0xe6, 0xcf, 0x1d, 0x18, 0xbe, 0x42, 0x5c, 0x43, 0xca, 0xbc,
	0x64, 0x89, 0x6b, 0xc8, 0x94, 0x05, 0x2d, 0x71, 0x0d, 0x19, 0xd3, 0x9e, 0xdd, 0x09, 0xd6, 0xf7,
	0xa7, 0xe0, 0x09, 0xc9, 0x35, 0x1f, 0x31, 0x68, 0xe9, 0x0a, 0x45, 0x52, 0x8d, 0x71, 0xc6, 0x17,
	0x3f, 0xbf, 0xff, 0xd6, 0xc1, 0xc1, 0x37, 0xea, 0x9c, 0x65, 0xa8, 0x81, 0xa6, 0xca, 0x91, 0xae,
	0x1c, 0xeb, 0xa9, 0x0e, 0xe5, 0xf3, 0x32, 0xe3, 0xf3, 0x22, 0x3c, 0xa9, 0xe4, 0x93, 0xad, 0x55,
	0x0a, 0x42, 0xbf, 0x42, 0x7c, 0x42, 0xc5, 0xe4, 0x66, 0x89, 0x4f, 0x48, 0x91, 0x38, 0x2d, 0xf1,
	0x09, 0xa9, 0x32, 0xa5, 0xb5, 0xde, 0xb9, 0xec, 0x6f, 0x0f, 0xe2, 0xd0, 0x36, 0xbc, 0xb0, 0xf2,
	0x30, 0xbf, 0x4e, 0x94, 0x48, 0x99, 0xe9, 0x2c, 0x51, 0x22, 0x53, 0xea, 0xb5, 0x44, 0x89, 0x8c,
	0x89, 0xd4, 0x5a, 0xf3, 0x33, 0xeb, 0x69, 0x3e, 0xd3, 0x5a, 0xb3, 0x69, 0x7f, 0x91, 0xdc, 0xb6,
	0x4a, 0xd3, 0x9e, 0x25, 0xb7, 0xad, 0xba, 0xb4, 0x6b, 0xc9, 0x6d, 0xab, 0x36, 0x9b, 0x5a, 0xbb,
	0x5b, 0x64, 0xfe, 0x2c, 0xea, 0x46, 0xcf, 0xea, 0xca, 0xdd, 0x74, 0xdf, 0x70, 0x70, 0x46, 0x92,
	0x3c, 0xa5, 0x19, 0x8e, 0xea, 0x5d, 0x6e, 0xc5, 0x84, 0xeb, 0x4a, 0xd5, 0xba, 0x3c, 0xe5, 0x71,
	0x83, 0xf1, 0xb8, 0x0c, 0x2f, 0x69, 0x1d, 0x74, 0xed, 0xac, 0xb2, 0xd2, 0x45, 0x47, 0x52, 0x9c,
	0xf1, 0x1c, 0xdf, 0xaa, 0x49, 0x72, 0x36, 0xb9, 0x1e, 0xcb, 0x89, 0xd6, 0x26, 0xd7, 0xa3, 0x24,
	0x83, 0x5a, 0x7b, 0xb3, 0x55, 0x60, 0xd6, 0x69, 0x47, 0x61, 0x3d, 0x77, 0x9e, 0x71, 0xe4, 0x32,
	0x42, 0x7f, 0x2d, 0x0e, 0x92, 0x98, 0xec, 0xac, 0x19, 0x24, 0x69, 0xbe, 0xb5, 0x66, 0x90, 0xe4,
	0x59, 0xd4, 0xda, 0x39, 0x93, 0x53, 0x29, 0xe6, 0x59, 0xcb, 0xd5, 0xed, 0xdb, 0x4e, 0xe9, 0x9d,
	0x18, 0x59, 0x2e, 0xb3, 0xe4, 0x68, 0x6a, 0x99, 0x61, 0x2d, 0x39, 0x9a, 0xda, 0x26, 0x4e, 0xf7,
	0xe2, 0xf1, 0xce, 0x08, 0xf1, 0x4b, 0xdc, 0xb7, 0x89, 0xe9, 0x28, 0x73, 0x4a, 0x4b, 0x4c, 0x47,
	0x4d, 0x42, 0xb5, 0xc4, 0x74, 0xd4, 0xa5, 0x39, 0xbb, 0x1e, 0xc3, 0x7d, 0x1b, 0xde, 0xb4, 0xf3,
	0x72, 0x0b, 0x4b, 0x99, 0xd9, 0xe9, 0xfd, 0x39, 0x72, 0x59, 0x2f, 0x49, 0xf7, 0x95, 0x5c, 0xd6,
	0xab, 0x53, 0xa3, 0x25, 0x97, 0xf5, 0x9a, 0x54, 0x68, 0xf7, 0x0c, 0x23, 0xf6, 0x3c, 0x1c, 0x2d,
	0xc4, 0x64, 0xd1, 0x7a, 0xd9, 0xdf, 0xdd, 0xc4, 0x35, 0xf9, 0xe1, 0xf8, 0x0a, 0xb1, 0x1d, 0x75,
	0x99, 0xca, 0x12, 0xdb, 0xd1, 0x22, 0x05, 0x5a, 0x62, 0x3b, 0xda, 0xa4, 0x43, 0xbb, 0xa7, 0x19,
	0x9b, 0x2a, 0x3c, 0x5c, 0x50, 0xaf, 0x4e, 0xab, 0xce, 0x31, 0x4a, 0xbd, 0x40, 0xe0, 0x05, 0x3f,
	0xea, 0x80, 0x41, 0x2e, 0x93, 0x19, 0xee, 0x14, 0x21, 0x94, 0xb3, 0xa2, 0x2b, 0xbb, 0x34, 0x25,
	0x28, 0xa0, 0xa3, 0x0c, 0xd0, 0x3e, 0xb8, 0x47, 0xb6, 0x9b, 0x93, 0x84, 0x68, 0xbe, 0x57, 0x7f,
	0xce, 0x01, 0x6b, 0x85, 0x4c, 0xe7, 0xe2, 0x7d, 0xa5, 0x2c, 0x73, 0xba, 0x78, 0x5f, 0x29, 0x4d,
	0x95, 0xd6, 0x86, 0x35, 0xe4, 0x7f, 0xcc, 0x9b, 0x64, 0x52, 0xf3, 0x88, 0x3e, 0x43, 0xee, 0x3e,
	0x0a, 0x69, 0xd0, 0x92, 0xbb, 0x0f, 0x79, 0x82, 0x75, 0x65, 0xbf, 0xb9, 0xa0, 0x45, 0x88, 0x13,
	0xc1, 0xc3, 0x25, 0x5c, 0x17, 0x42, 0x9c, 0x60, 0x39, 0xcd, 0x59, 0x02, 0x51, 0x9e, 0xd8, 0x29,
	0x81, 0xa8, 0xc8, 0xd9, 0xd4, 0xde, 0x75, 0x64, 0xa7, 0x48, 0x1c, 0x4a, 0x59, 0x47, 0x2d, 0x4f,
	0x98, 0xf6, 0xf9, 0x19, 0xe4, 0x0b, 0x0e, 0xfe, 0x2b, 0x37, 0xe5, 0x44, 0x57, 0x78, 0x40, 0x73,
	0x12, 0x2c, 0x42, 0x3e, 0x68, 0x55, 0xd6, 0xc2, 0x9a, 0xe1, 0x8e, 0x53, 0x72, 0xe0, 0xdc, 0x49,
	0x2a, 0xeb, 0xe8, 0x42, 0x06, 0xa8, 0xfa, 0x1e, 0xcc, 0xdc, 0xd1, 0x8a, 0x64, 0x52, 0x6d, 0x47,
	0xe7, 0x81, 0x2b, 0x52, 0xbc, 0xf9, 0x9a, 0xfa, 0x86, 0x23, 0xfe, 0xa5, 0x97, 0x62, 0x22, 0xa2,
	0xc4, 0x24, 0x36, 0x65, 0x67, 0x4b, 0x4c, 0x62, 0x63, 0xae, 0xb5, 0xde, 0x9f, 0x95, 0xbf, 0x94,
	0x48, 0x52, 0xdb, 0xea, 0x9d, 0x6e, 0x7d, 0xf2, 0x0a, 0xa2, 0xc6, 0x34, 0xfe, 0x1f, 0x31, 0x4b,
	0xc8, 0x90, 0x41, 0x2d, 0x71, 0xc3, 0xf7, 0x96, 0xcc, 0x2d, 0x71, 0xc3, 0xf7, 0x98, 0xbc, 0xad,
	0xb5, 0x71, 0x08, 0xcd, 0x0f, 0x50, 0x21, 0x75, 0x83, 0x46, 0xc2, 0xff, 0x74, 0x84, 0xb4, 0x34,
	0x5d, 0xae, 0x35, 0x3c, 0x6b, 0x07, 0x5c, 0xb1, 0x2e, 0x9c, 0xeb, 0xb3, 0x36, 0xe5, 0x7c, 0x89,
	0x71, 0x3e, 0x03, 0x5f, 0xd4, 0x72, 0xd6, 0xad, 0x1d, 0x5a, 0xc2, 0xc5, 0xa9, 0x68, 0x49, 0x58,
	0x31, 0x3f, 0xcf, 0xf5, 0x59, 0xbb, 0x77, 0xc2, 0xba, 0x39, 0x0c, 0x7f, 0x48, 0x4c, 0x0b, 0x5d,
	0x4e, 0xb6, 0xc4, 0xb4, 0xb0, 0x48, 0x15, 0x97, 0x98, 0x16, 0x36, 0x89, 0xdf, 0xee, 0x2d, 0x46,
	0xec, 0x0a, 0xbc, 0x2c, 0xbd, 0xe2, 0x2e, 0xcd, 0x64, 0x2f, 0x35, 0x4e, 0xe3, 0x2f, 0x93, 0x15,
	0x4a, 0x99, 0xe0, 0x2d, 0x59, 0xa1, 0x4c, 0xe9, 0xe4, 0x92, 0x15, 0xca, 0x98, 0x3f, 0xae, 0xbd,
	0xf6, 0x6e, 0x90, 0xda, 0xf5, 0x00, 0x57, 0x17, 0x15, 0x95, 0x1f, 0xb3, 0x6f, 0x3a, 0xc2, 0x9f,
	0x78, 0x2a, 0x2d, 0xb6, 0x6a, 0x37, 0xa7, 0x6a, 0xad, 0x3d, 0xd2, 0x43, 0x0d, 0x8b, 0xbb, 0x90,
	0xfc, 0xb9, 0xd4, 0x9e, 0x56, 0xda, 0xef, 0x91, 0x3c, 0x30, 0x4d, 0x46, 0x38, 0x3c, 0xa6, 0xd0,
	0x29, 0x5d, 0x9a, 0x7a, 0xe5, 0x78, 0x6f, 0x95, 0x28, 0xbf, 0x9b, 0x8c, 0xdf, 0x14, 0x9c, 0x94,
	0xea, 0x61, 0x91, 0xa6, 0x85, 0x1a, 0x7e, 0x8b, 0x4c, 0x37, 0x5d, 0x62, 0xb9, 0x64, 0xba, 0x59,
	0x24, 0xb3, 0x4b, 0xa6, 0x9b, 0x4d, 0xf6, 0xba, 0x7b, 0x91, 0xd1, 0x3c, 0x0d, 0x4f, 0x69, 0xf5,
	0xb1, 0xb8, 0x59, 0xf0, 0x2a, 0xf9, 0x25, 0xe2, 0x40, 0x92, 0x66, 0x9e, 0x4b, 0x1c, 0x48, 0xba,
	0x14, 0x78, 0x89, 0x03, 0x49, 0x9b, 0xd0, 0xee, 0xbe, 0xca, 0x28, 0x8c, 0xc3, 0x0b, 0xaa, 0x18,
	0xe2, 0x45, 0xad, 0x14, 0xfc, 0x2a, 0x6c, 0x5a, 0x29, 0x24, 0xe9, 0xf1, 0xa6, 0x95, 0x42, 0x96,
	0x0f, 0xdf, 0xcb, 0x4a, 0x21, 0xac, 0xf0, 0xfc, 0xb0, 0xfc, 0x31, 0x39, 0xc7, 0xcb, 0xf2, 0xd0,
	0x25, 0xe7, 0x78, 0x4d, 0x42, 0xbd, 0xe4, 0x1c, 0xaf, 0xcb, 0x93, 0xd7, 0xaa, 0x95, 0x34, 0x81,
	0x5e, 0x6e, 0x57, 0xbe, 0x49, 0xe2, 0xa0, 0xb5, 0x59, 0xeb, 0x92, 0x38, 0x68, 0x9b, 0x34, 0x7a,
	0x49, 0x1c, 0xb4, 0x55, 0x72, 0xbc, 0x76, 0xe1, 0xcb, 0xcf, 0xbd, 0x2c, 0x82, 0x49, 0x48, 0x8f,
	0x96, 0xb3, 0xfc, 0x77, 0x92, 0xc7, 0x6b, 0x48, 0x44, 0x87, 0x27, 0x95, 0x80, 0xf5, 0xb9, 0xf1,
	0x95, 0x53, 0xbd, 0x57, 0xb4, 0xb0, 0xa7, 0x73, 0xae, 0x6c, 0x3b, 0xd6, 0xb1, 0xcd, 0xee, 0xc1,
	0xfe, 0x99, 0x24, 0x5e, 0xe9, 0x33, 0xcc, 0xa1, 0x7a, 0x70, 0xb4, 0x29, 0xef, 0x95, 0x93, 0x3d,
	0xd7, 0xeb, 0x65, 0x54, 0xf3, 0x05, 0xdf, 0x86, 0xe8, 0x8f, 0x1d, 0x1c, 0xb0, 0x65, 0x9b, 0x60,
	0x0e, 0xd5, 0x86, 0xbf, 0x65, 0x4a, 0xbb, 0x24, 0x60, 0xab, 0xd7, 0xec, 0x76, 0xed, 0x7d, 0x67,
	0xde, 0x0d, 0xa5, 0xfc, 0xf7, 0x7a, 0x1a, 0x11, 0xa7, 0x5c, 0x7e, 0x1d, 0x9d, 0xc0, 0x3f, 0x74,
	0xe8, 0x93, 0x6e, 0xd2, 0xe4, 0x74, 0xc9, 0xdd, 0xad, 0x3e, 0xd9, 0x5d, 0x72, 0x77, 0x6b, 0xc8,
	0x7b, 0xd7, 0x3a, 0x61, 0xf8, 0x84, 0xf8, 0x2e, 0xfa, 0x26, 0x43, 0x46, 0xc3, 0xc7, 0xaf, 0x79,
	0x2c, 0x2d, 0x58, 0xbc, 0xa5, 0x95, 0xc4, 0x08, 0xaa, 0xca, 0xaa, 0xd7, 0x7f, 0x4d, 0x15, 0x8b,
	0x0b, 0xaa, 0xd0, 0xc3, 0x7f, 0xda, 0x56, 0x7e, 0x99, 0x9e, 0x85, 0x8f, 0x93, 0xbf, 0xf8, 0x4f,
	0xdb, 0x90, 0x32, 0x79, 0x51, 0x76, 0x73, 0xac, 0xaf, 0xa3, 0x0e, 0x1f, 0xb7, 0xa8, 0x6a, 0xe1,
	0x70, 0x88, 0x42, 0x54, 0x8f, 0x3a, 0xcc, 0xf8, 0x55, 0x50, 0xfc, 0x91, 0x93, 0xfd, 0x8d, 0x30,
	0xd6, 0xa6, 0xea, 0x56, 0xfd, 0xac, 0x1e, 0xaa, 0xe1, 0x76, 0xfd, 0x5c, 0x9f, 0xb5, 0x2d, 0x6e,
	0x46, 0x8b, 0x5c, 0x95, 0xd7, 0xed, 0x22, 0x5d, 0xd6, 0xa4, 0x74, 0x50, 0x55, 0x74, 0xf5, 0xd5,
	0x4c, 0x74, 0x4d, 0xb5, 0x7b, 0xa0, 0xcb, 0xd1, 0x54, 0x8c, 0xee, 0x7f, 0x13, 0x9f, 0x4b, 0xb1,
	0x65, 0xd5, 0x00, 0x9f, 0x37, 0x62, 0x36, 0x8c, 0xf1, 0x85, 0xfe, 0x05, 0x58, 0xb8, 0xfd, 0x24,
	0xbc, 0xd5, 0x23, 0xfd, 0x07, 0x4e, 0xe9, 0xcf, 0x51, 0x67, 0x66, 0x74, 0xd9, 0x0f, 0xa9, 0x7e,
	0x77, 0x43, 0x72, 0x3b, 0xa1, 0x79, 0x5f, 0x43, 0x1b, 0x6c, 0x44, 0xdc, 0xd4, 0xc4, 0x67, 0xcd,
	0x1b, 0xd0, 0xa5, 0x40, 0xb6, 0xed, 0xda, 0x47, 0x2e, 0x24, 0xc1, 0x08, 0xc6, 0x47, 0x35, 0x24,
	0xc1, 0x08, 0xe6, 0x57, 0x34, 0xb4, 0xb6, 0x27, 0xce, 0x3e, 0x6f, 0xd0, 0xfa, 0xf4, 0x2f, 0xa0,
	0xcc, 0x3c, 0xcc, 0xf3, 0xd1, 0x79, 0xdb, 0xf9, 0x07, 0xc4, 0xf6, 0x9c, 0x88, 0x3a, 0x21, 0x5b,
	0xd5, 0x1a, 0x41, 0x07, 0xcb, 0xca, 0x92, 0xb4, 0x24, 0xa7, 0x2e, 0x5d, 0x79, 0xb5, 0xed, 0x69,
	0xa8, 0x66, 0x61, 0x8f, 0x35, 0xba, 0x12, 0xb8, 0x75, 0x33, 0x93, 0x51, 0xf7, 0x43, 0xc2, 0x4f,
	0xee, 0x23, 0xff, 0x2f, 0x72, 0x8d, 0x89, 0xdb, 0xe7, 0x27, 0x79, 0x91, 0xe9, 0x29, 0x39, 0x64,
	0x4d, 0x15, 0xf5, 0x35, 0xa6, 0xb9, 0x26, 0xe5, 0x7b, 0x87, 0xf1, 0xbd, 0x0a, 0xaf, 0xc8, 0xf8,
	0x0a, 0x8b, 0x89, 0x9e, 0x32, 0xef, 0x5d, 0xff, 0x3d, 0x72, 0x0d, 0x2d, 0x7f, 0x08, 0x45, 0x72,
	0x0d, 0xad, 0x7d, 0x70, 0x45, 0x72, 0x0d, 0xad, 0x7f, 0x61, 0x45, 0x6b, 0x9a, 0x78, 0xd9, 0x9f,
	0xad, 0x27, 0x75, 0x25, 0x99, 0x6d, 0xca, 0xb7, 0x53, 0x24, 0xa6, 0x89, 0xe9, 0xa5, 0x16, 0x89,
	0x69, 0x62, 0x7c, 0x9a, 0x45, 0x6b, 0x9a, 0x50, 0xf8, 0xdc, 0x3b, 0x2d, 0x3c, 0x03, 0xa1, 0xdf,
	0x8b, 0x8f, 0xae, 0x28, 0xfb, 0x5d, 0xf1, 0xb8, 0x8b, 0xb2, 0xdf, 0x55, 0xaf, 0xb9, 0xd8, 0xf4,
	0x7b, 0xf6, 0xba, 0x4b, 0xa1, 0xdf, 0x87, 0xb9, 0x20, 0x34, 0xd4, 0x9c, 0x0c, 0xa2, 0x19, 0x2f,
	0x20, 0x6e, 0xa4, 0x72, 0x94, 0xae, 0xa2, 0xa0, 0x32, 0x4a, 0x57, 0x59, 0xde, 0xe6, 0x26, 0x2c,
	0xa9, 0x2f, 0xb0, 0xea, 0xf5, 0x39, 0x5c, 0xbf, 0x5e, 0xca, 0xaa, 0xfa, 0x73, 0x07, 0x54, 0x24,
	0x0d, 0x65, 0x61, 0x24, 0x66, 0x48, 0x85, 0x28, 0x92, 0xe7, 0xed, 0x2b, 0x58, 0xb8, 0x33, 0xe4,
	0x24, 0xca, 0x39, 0x58, 0x7f, 0xe4, 0x08, 0x7f, 0xd8, 0x27, 0x6b, 0x8a, 0xc4, 0x16, 0x1e, 0x36,
	0x42, 0x12, 0x62, 0x0c, 0x47, 0x6d, 0x8b, 0x5b, 0x6c, 0x91, 0x72, 0xfc, 0xc5, 0xe0, 0xc3, 0x6f,
	0x38, 0x60, 0x3b, 0xbd, 0x2e, 0x26, 0x03, 0x9c, 0xb7, 0x78, 0x31, 0xf4, 0x66, 0x02, 0x54, 0xda,
	0x22, 0xb5, 0x85, 0x15, 0x5b, 0xa4, 0xa1, 0x8e, 0x4d, 0x84, 0x6e, 0x1e, 0x87, 0x40, 0xbc, 0x9c,
	0x2c, 0x9a, 0x12, 0x11, 0x29, 0xfc, 0xcc, 0xf8, 0x96, 0x03, 0x46, 0x68, 0x93, 0x74, 0xc0, 0x4b,
	0xa4, 0xe4, 0x00, 0x15, 0xa5, 0x15, 0x3e, 0x5b, 0x53, 0x25, 0x8b, 0xd3, 0x6b, 0x4e, 0x2b, 0x73,
	0xcd, 0x68, 0x79, 0x95, 0x66, 0x3c, 0x6e, 0x7f, 0x22, 0x46, 0xf8, 0x25, 0x7f, 0x9d, 0xee, 0xf0,
	0x05, 0x6d, 0x66, 0xbc, 0x58, 0xbe, 0xf7, 0x19, 0x4f, 0x30, 0x37, 0x88, 0x00, 0x8b, 0xb9, 0xd2,
	0xe8, 0x12, 0xb0, 0x98, 0x2b, 0x0d, 0x0e, 0xff, 0xa8, 0x6d, 0xf1, 0xfe, 0xe7, 0x4a, 0x43, 0x44,
	0xff, 0x57, 0x45, 0xf4, 0x9c, 0x56, 0x6b, 0xd1, 0x73, 0xe5, 0x6c, 0xd0, 0x0b, 0xc5, 0x29, 0xfa,
	0x57, 0x18, 0xfa, 0x0b, 0xf0, 0x25, 0x8b, 0xce, 0xcf, 0x56, 0x5b, 0x59, 0x8a, 0xe2, 0x57, 0xa4,
	0x8a, 0x94, 0xad, 0xbb, 0x46, 0x68, 0x85, 0x65, 0xb7, 0x6a, 0x5d, 0x9e, 0x72, 0xb9, 0xca, 0xb8,
	0x8c, 0xc1, 0xf3, 0x16, 0x5c, 0x64, 0xb1, 0x7b, 0x39, 0x99, 0xaf, 0x3a, 0x60, 0xdb, 0x84, 0x17,
	0xde, 0x6a, 0x37, 0xbd, 0x14, 0x8d, 0x05, 0x01, 0xdd, 0xad, 0x32, 0x21, 0x49, 0xd1, 0xfe, 0xd0,
	0x95, 0x55, 0xd8, 0x1f, 0xfa, 0x2a, 0x36, 0x97, 0x16, 0x5e, 0x58, 0xef, 0x60, 0x09, 0x75, 0x2f,
	0x08, 0xf2, 0x0d, 0x31, 0x17, 0xc2, 0xd1, 0xf9, 0xa6, 0x03, 0x46, 0xf2, 0xf6, 0xf8, 0x9d, 0x37,
	0x6f, 0xb2, 0xb8, 0x78, 0xe9, 0x4b, 0x2b, 0x16, 0x2f, 0x53, 0x25, 0x8b, 0x35, 0x99, 0x23, 0x25,
	0xec, 0xf0, 0x8c, 0x17, 0x47, 0xeb, 0x0d, 0x07, 0xec, 0x28, 0xb4, 0x59, 0x5c, 0x38, 0xa1, 0x1e,
	0x62, 0xb1, 0xb8, 0xe2, 0x8e, 0xc9, 0x58, 0xcb, 0x62, 0x59, 0x2e, 0x33, 0x2b, 0xad, 0xcf, 0x1c,
	0xb5, 0x4f, 0x3a, 0x60, 0x7d, 0xde, 0x2a, 0x7d, 0x29, 0xed, 0x59, 0x05, 0x28, 0xf1, 0xbd, 0xb4,
	0x3d, 0x86, 0x52, 0x14, 0xea, 0x09, 0x06, 0xf5, 0x20, 0x7c, 0x4e, 0x09, 0x95, 0xbc, 0xa2, 0xc6,
	0x01, 0xfb, 0xa2, 0x03, 0x36, 0xe7, 0x32, 0xc9, 0xa2, 0x92, 0xf7, 0xf5, 0x21, 0x45, 0xd3, 0x62,
	0x31, 0xc5, 0x45, 0x8b, 0xb2, 0xb4, 0x45, 0x6c, 0x2e, 0x07, 0x98, 0x2e, 0x54, 0xac, 0x4b, 0x65,
	0xd3, 0xfb, 0x63, 0x0e, 0x58, 0x37, 0xe1, 0x85, 0x78, 0x33, 0x22, 0xed, 0x15, 0x1f, 0x85, 0x13,
	0x7f, 0x55, 0x3c, 0x0a, 0x57, 0x2c, 0x64, 0x61, 0x7b, 0x77, 0x91, 0xe2, 0x2d, 0x0c, 0x65, 0xe7,
	0xb6, 0x1c, 0xd4, 0x9f, 0x38, 0x60, 0xd3, 0x84, 0x17, 0xde, 0xe8, 0xcc, 0xb4, 0x7c, 0x7a, 0x71,
	0x3b, 0xed, 0x3d, 0x0c, 0x22, 0xaf, 0x59, 0x74, 0x88, 0xc8, 0x4b, 0x29, 0x1c, 0x22, 0xaa, 0xc2,
	0x16, 0x31, 0x34, 0x5d, 0xb0, 0x09, 0xae, 0x9b, 0xcd, 0xc2, 0x36, 0xa9, 0x2d, 0xef, 0x55, 0xaa,
	0x1a, 0xa4, 0x35, 0x3a, 0x47, 0x32, 0x06, 0x2a, 0x50, 0x62, 0x31, 0xb5, 0x6a, 0xc8, 0x4b, 0x5b,
	0xaa, 0x06, 0xe5, 0x90, 0xcd, 0x37, 0x2d, 0x89, 0xaf, 0x92, 0xbb, 0x79, 0xcd, 0x3b, 0x95, 0x50,
	0x91, 0x38, 0xa2, 0x7d, 0x19, 0xb3, 0x72, 0xbc, 0xb7, 0x4a, 0x56, 0xaf, 0xcb, 0xe1, 0xaa, 0xb9,
	0x23, 0x04, 0xb5, 0xbc, 0xf2, 0xbd, 0xe8, 0x1b, 0x0e, 0x7d, 0x5f, 0x57, 0xf7, 0x6c, 0xa5, 0xe4,
	0x12, 0xca, 0xea, 0xb9, 0x4c, 0xc9, 0x25, 0x94, 0xdd, 0xfb, 0x98, 0xfa, 0x33, 0x12, 0xe5, 0xc5,
	0x39, 0x3c, 0xa4, 0xd4, 0x24, 0x23, 0x55, 0x78, 0xd1, 0xd2, 0x30, 0x52, 0xf2, 0x37, 0x34, 0x0d,
	0x23, 0xa5, 0x78, 0x34, 0xd3, 0x6a, 0xa4, 0x32, 0x05, 0x94, 0xd1, 0x19, 0xaf, 0x7d, 0xe9, 0xfb,
	0x23, 0xce, 0xd7, 0xbf, 0x3f, 0xe2, 0x7c, 0xf7, 0xfb, 0x23, 0xce, 0xcf, 0xbf, 0x39, 0xf2, 0xc4,
	0xd7, 0xdf, 0x1c, 0x79, 0xe2, 0x8d, 0x37, 0x47, 0x9e, 0xb8, 0x7b, 0xca, 0xf2, 0xe1, 0xcd, 0x07,
	0x5c, 0xab, 0xe9, 0xc3, 0x36, 0x4a, 0x66, 0x56, 0xb7, 0xe3, 0x28, 0x8d, 0x8e, 0xfd, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0xa1, 0xae, 0xad, 0x38, 0xac, 0x00, 0x00,
}

func (this *GetTotalStakeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTotalStakeResponse)
	if !ok {
		that2, ok := that.(GetTotalStakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *GetReputerStakeInTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReputerStakeInTopicResponse)
	if !ok {
		that2, ok := that.(GetReputerStakeInTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *GetStakeFromReputerInTopicInSelfResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStakeFromReputerInTopicInSelfResponse)
	if !ok {
		that2, ok := that.(GetStakeFromReputerInTopicInSelfResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *GetDelegateStakeInTopicInReputerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDelegateStakeInTopicInReputerResponse)
	if !ok {
		that2, ok := that.(GetDelegateStakeInTopicInReputerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *GetStakeFromDelegatorInTopicInReputerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStakeFromDelegatorInTopicInReputerResponse)
	if !ok {
		that2, ok := that.(GetStakeFromDelegatorInTopicInReputerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *GetStakeFromDelegatorInTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStakeFromDelegatorInTopicResponse)
	if !ok {
		that2, ok := that.(GetStakeFromDelegatorInTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *GetTopicStakeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTopicStakeResponse)
	if !ok {
		that2, ok := that.(GetTopicStakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Params returns the module parameters.
	GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error)
	GetNextTopicId(ctx context.Context, in *GetNextTopicIdRequest, opts ...grpc.CallOption) (*GetNextTopicIdResponse, error)
	GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*GetTopicResponse, error)
	GetWorkerLatestInferenceByTopicId(ctx context.Context, in *GetWorkerLatestInferenceByTopicIdRequest, opts ...grpc.CallOption) (*GetWorkerLatestInferenceByTopicIdResponse, error)
	GetInferencesAtBlock(ctx context.Context, in *GetInferencesAtBlockRequest, opts ...grpc.CallOption) (*GetInferencesAtBlockResponse, error)
	GetLatestTopicInferences(ctx context.Context, in *GetLatestTopicInferencesRequest, opts ...grpc.CallOption) (*GetLatestTopicInferencesResponse, error)
	GetForecastsAtBlock(ctx context.Context, in *GetForecastsAtBlockRequest, opts ...grpc.CallOption) (*GetForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(ctx context.Context, in *GetNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*GetNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(ctx context.Context, in *GetTotalStakeRequest, opts ...grpc.CallOption) (*GetTotalStakeResponse, error)
	GetReputerStakeInTopic(ctx context.Context, in *GetReputerStakeInTopicRequest, opts ...grpc.CallOption) (*GetReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(ctx context.Context, in *GetMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*GetMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(ctx context.Context, in *GetStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*GetStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(ctx context.Context, in *GetDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*GetDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *GetStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*GetStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(ctx context.Context, in *GetStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*GetStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(ctx context.Context, in *GetTopicStakeRequest, opts ...grpc.CallOption) (*GetTopicStakeResponse, error)
	GetStakeRemovalsUpUntilBlock(ctx context.Context, in *GetStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*GetStakeRemovalsUpUntilBlockResponse, error)
	GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, in *GetDelegateStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalsUpUntilBlockResponse, error)
	GetStakeRemovalInfo(ctx context.Context, in *GetStakeRemovalInfoRequest, opts ...grpc.CallOption) (*GetStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(ctx context.Context, in *GetDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(ctx context.Context, in *GetWorkerNodeInfoRequest, opts ...grpc.CallOption) (*GetWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(ctx context.Context, in *GetReputerNodeInfoRequest, opts ...grpc.CallOption) (*GetReputerNodeInfoResponse, error)
	IsWorkerRegisteredInTopicId(ctx context.Context, in *IsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*IsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(ctx context.Context, in *IsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*IsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(ctx context.Context, in *GetNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*GetNetworkInferencesAtBlockResponse, error)
	GetNetworkInferencesAtBlockOutlierResistant(ctx context.Context, in *GetNetworkInferencesAtBlockOutlierResistantRequest, opts ...grpc.CallOption) (*GetNetworkInferencesAtBlockOutlierResistantResponse, error)
	GetLatestNetworkInferences(ctx context.Context, in *GetLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*GetLatestNetworkInferencesResponse, error)
	GetLatestNetworkInferencesOutlierResistant(ctx context.Context, in *GetLatestNetworkInferencesOutlierResistantRequest, opts ...grpc.CallOption) (*GetLatestNetworkInferencesOutlierResistantResponse, error)
	GetLatestAvailableNetworkInferences(ctx context.Context, in *GetLatestAvailableNetworkInferencesRequest, opts ...grpc.CallOption) (*GetLatestAvailableNetworkInferencesResponse, error)
	GetLatestAvailableNetworkInferencesOutlierResistant(ctx context.Context, in *GetLatestAvailableNetworkInferencesOutlierResistantRequest, opts ...grpc.CallOption) (*GetLatestAvailableNetworkInferencesOutlierResistantResponse, error)
	IsWorkerNonceUnfulfilled(ctx context.Context, in *IsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*IsWorkerNonceUnfulfilledResponse, error)
	IsReputerNonceUnfulfilled(ctx context.Context, in *IsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*IsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(ctx context.Context, in *GetUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*GetUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(ctx context.Context, in *GetUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*GetUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(ctx context.Context, in *GetInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetInfererNetworkRegretResponse, error)
	GetForecasterNetworkRegret(ctx context.Context, in *GetForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetForecasterNetworkRegretResponse, error)
	GetOneInForecasterNetworkRegret(ctx context.Context, in *GetOneInForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneInForecasterNetworkRegretResponse, error)
	IsWhitelistAdmin(ctx context.Context, in *IsWhitelistAdminRequest, opts ...grpc.CallOption) (*IsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(ctx context.Context, in *GetTopicLastWorkerCommitInfoRequest, opts ...grpc.CallOption) (*GetTopicLastWorkerCommitInfoResponse, error)
	GetTopicLastReputerCommitInfo(ctx context.Context, in *GetTopicLastReputerCommitInfoRequest, opts ...grpc.CallOption) (*GetTopicLastReputerCommitInfoResponse, error)
	GetTopicRewardNonce(ctx context.Context, in *GetTopicRewardNonceRequest, opts ...grpc.CallOption) (*GetTopicRewardNonceResponse, error)
	GetReputerLossBundlesAtBlock(ctx context.Context, in *GetReputerLossBundlesAtBlockRequest, opts ...grpc.CallOption) (*GetReputerLossBundlesAtBlockResponse, error)
	GetStakeReputerAuthority(ctx context.Context, in *GetStakeReputerAuthorityRequest, opts ...grpc.CallOption) (*GetStakeReputerAuthorityResponse, error)
	GetDelegateStakePlacement(ctx context.Context, in *GetDelegateStakePlacementRequest, opts ...grpc.CallOption) (*GetDelegateStakePlacementResponse, error)
	GetDelegateStakeUponReputer(ctx context.Context, in *GetDelegateStakeUponReputerRequest, opts ...grpc.CallOption) (*GetDelegateStakeUponReputerResponse, error)
	GetDelegateRewardPerShare(ctx context.Context, in *GetDelegateRewardPerShareRequest, opts ...grpc.CallOption) (*GetDelegateRewardPerShareResponse, error)
	GetStakeRemovalForReputerAndTopicId(ctx context.Context, in *GetStakeRemovalForReputerAndTopicIdRequest, opts ...grpc.CallOption) (*GetStakeRemovalForReputerAndTopicIdResponse, error)
	GetDelegateStakeRemoval(ctx context.Context, in *GetDelegateStakeRemovalRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalResponse, error)
	GetPreviousTopicWeight(ctx context.Context, in *GetPreviousTopicWeightRequest, opts ...grpc.CallOption) (*GetPreviousTopicWeightResponse, error)
	GetTotalSumPreviousTopicWeights(ctx context.Context, in *GetTotalSumPreviousTopicWeightsRequest, opts ...grpc.CallOption) (*GetTotalSumPreviousTopicWeightsResponse, error)
	TopicExists(ctx context.Context, in *TopicExistsRequest, opts ...grpc.CallOption) (*TopicExistsResponse, error)
	IsTopicActive(ctx context.Context, in *IsTopicActiveRequest, opts ...grpc.CallOption) (*IsTopicActiveResponse, error)
	GetTopicFeeRevenue(ctx context.Context, in *GetTopicFeeRevenueRequest, opts ...grpc.CallOption) (*GetTopicFeeRevenueResponse, error)
	GetInfererScoreEma(ctx context.Context, in *GetInfererScoreEmaRequest, opts ...grpc.CallOption) (*GetInfererScoreEmaResponse, error)
	GetForecasterScoreEma(ctx context.Context, in *GetForecasterScoreEmaRequest, opts ...grpc.CallOption) (*GetForecasterScoreEmaResponse, error)
	GetReputerScoreEma(ctx context.Context, in *GetReputerScoreEmaRequest, opts ...grpc.CallOption) (*GetReputerScoreEmaResponse, error)
	GetInferenceScoresUntilBlock(ctx context.Context, in *GetInferenceScoresUntilBlockRequest, opts ...grpc.CallOption) (*GetInferenceScoresUntilBlockResponse, error)
	GetPreviousTopicQuantileForecasterScoreEma(ctx context.Context, in *GetPreviousTopicQuantileForecasterScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileForecasterScoreEmaResponse, error)
	GetPreviousTopicQuantileInfererScoreEma(ctx context.Context, in *GetPreviousTopicQuantileInfererScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileInfererScoreEmaResponse, error)
	GetPreviousTopicQuantileReputerScoreEma(ctx context.Context, in *GetPreviousTopicQuantileReputerScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileReputerScoreEmaResponse, error)
	GetWorkerInferenceScoresAtBlock(ctx context.Context, in *GetWorkerInferenceScoresAtBlockRequest, opts ...grpc.CallOption) (*GetWorkerInferenceScoresAtBlockResponse, error)
	GetCurrentLowestInfererScore(ctx context.Context, in *GetCurrentLowestInfererScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestInfererScoreResponse, error)
	GetForecastScoresUntilBlock(ctx context.Context, in *GetForecastScoresUntilBlockRequest, opts ...grpc.CallOption) (*GetForecastScoresUntilBlockResponse, error)
	GetWorkerForecastScoresAtBlock(ctx context.Context, in *GetWorkerForecastScoresAtBlockRequest, opts ...grpc.CallOption) (*GetWorkerForecastScoresAtBlockResponse, error)
	GetCurrentLowestForecasterScore(ctx context.Context, in *GetCurrentLowestForecasterScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestForecasterScoreResponse, error)
	GetReputersScoresAtBlock(ctx context.Context, in *GetReputersScoresAtBlockRequest, opts ...grpc.CallOption) (*GetReputersScoresAtBlockResponse, error)
	GetCurrentLowestReputerScore(ctx context.Context, in *GetCurrentLowestReputerScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestReputerScoreResponse, error)
	GetListeningCoefficient(ctx context.Context, in *GetListeningCoefficientRequest, opts ...grpc.CallOption) (*GetListeningCoefficientResponse, error)
	GetPreviousReputerRewardFraction(ctx context.Context, in *GetPreviousReputerRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousReputerRewardFractionResponse, error)
	GetPreviousInferenceRewardFraction(ctx context.Context, in *GetPreviousInferenceRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousInferenceRewardFractionResponse, error)
	GetPreviousForecastRewardFraction(ctx context.Context, in *GetPreviousForecastRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousForecastRewardFractionResponse, error)
	GetPreviousPercentageRewardToStakedReputers(ctx context.Context, in *GetPreviousPercentageRewardToStakedReputersRequest, opts ...grpc.CallOption) (*GetPreviousPercentageRewardToStakedReputersResponse, error)
	GetTotalRewardToDistribute(ctx context.Context, in *GetTotalRewardToDistributeRequest, opts ...grpc.CallOption) (*GetTotalRewardToDistributeResponse, error)
	GetNaiveInfererNetworkRegret(ctx context.Context, in *GetNaiveInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetNaiveInfererNetworkRegretResponse, error)
	GetOneOutInfererInfererNetworkRegret(ctx context.Context, in *GetOneOutInfererInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutInfererInfererNetworkRegretResponse, error)
	GetOneOutInfererForecasterNetworkRegret(ctx context.Context, in *GetOneOutInfererForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutInfererForecasterNetworkRegretResponse, error)
	GetOneOutForecasterInfererNetworkRegret(ctx context.Context, in *GetOneOutForecasterInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutForecasterInfererNetworkRegretResponse, error)
	GetOneOutForecasterForecasterNetworkRegret(ctx context.Context, in *GetOneOutForecasterForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutForecasterForecasterNetworkRegretResponse, error)
	GetActiveTopicsAtBlock(ctx context.Context, in *GetActiveTopicsAtBlockRequest, opts ...grpc.CallOption) (*GetActiveTopicsAtBlockResponse, error)
	GetNextChurningBlockByTopicId(ctx context.Context, in *GetNextChurningBlockByTopicIdRequest, opts ...grpc.CallOption) (*GetNextChurningBlockByTopicIdResponse, error)
	GetCountInfererInclusionsInTopic(ctx context.Context, in *GetCountInfererInclusionsInTopicRequest, opts ...grpc.CallOption) (*GetCountInfererInclusionsInTopicResponse, error)
	GetCountForecasterInclusionsInTopic(ctx context.Context, in *GetCountForecasterInclusionsInTopicRequest, opts ...grpc.CallOption) (*GetCountForecasterInclusionsInTopicResponse, error)
	GetActiveReputersForTopic(ctx context.Context, in *GetActiveReputersForTopicRequest, opts ...grpc.CallOption) (*GetActiveReputersForTopicResponse, error)
	GetActiveForecastersForTopic(ctx context.Context, in *GetActiveForecastersForTopicRequest, opts ...grpc.CallOption) (*GetActiveForecastersForTopicResponse, error)
	GetActiveInferersForTopic(ctx context.Context, in *GetActiveInferersForTopicRequest, opts ...grpc.CallOption) (*GetActiveInferersForTopicResponse, error)
	IsWhitelistedGlobalWorker(ctx context.Context, in *IsWhitelistedGlobalWorkerRequest, opts ...grpc.CallOption) (*IsWhitelistedGlobalWorkerResponse, error)
	IsWhitelistedGlobalReputer(ctx context.Context, in *IsWhitelistedGlobalReputerRequest, opts ...grpc.CallOption) (*IsWhitelistedGlobalReputerResponse, error)
	IsWhitelistedGlobalAdmin(ctx context.Context, in *IsWhitelistedGlobalAdminRequest, opts ...grpc.CallOption) (*IsWhitelistedGlobalAdminResponse, error)
	IsTopicWorkerWhitelistEnabled(ctx context.Context, in *IsTopicWorkerWhitelistEnabledRequest, opts ...grpc.CallOption) (*IsTopicWorkerWhitelistEnabledResponse, error)
	IsTopicReputerWhitelistEnabled(ctx context.Context, in *IsTopicReputerWhitelistEnabledRequest, opts ...grpc.CallOption) (*IsTopicReputerWhitelistEnabledResponse, error)
	IsWhitelistedTopicCreator(ctx context.Context, in *IsWhitelistedTopicCreatorRequest, opts ...grpc.CallOption) (*IsWhitelistedTopicCreatorResponse, error)
	IsWhitelistedGlobalActor(ctx context.Context, in *IsWhitelistedGlobalActorRequest, opts ...grpc.CallOption) (*IsWhitelistedGlobalActorResponse, error)
	IsWhitelistedTopicWorker(ctx context.Context, in *IsWhitelistedTopicWorkerRequest, opts ...grpc.CallOption) (*IsWhitelistedTopicWorkerResponse, error)
	IsWhitelistedTopicReputer(ctx context.Context, in *IsWhitelistedTopicReputerRequest, opts ...grpc.CallOption) (*IsWhitelistedTopicReputerResponse, error)
	CanUpdateAllGlobalWhitelists(ctx context.Context, in *CanUpdateAllGlobalWhitelistsRequest, opts ...grpc.CallOption) (*CanUpdateAllGlobalWhitelistsResponse, error)
	CanUpdateGlobalWorkerWhitelist(ctx context.Context, in *CanUpdateGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*CanUpdateGlobalWorkerWhitelistResponse, error)
	CanUpdateGlobalReputerWhitelist(ctx context.Context, in *CanUpdateGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*CanUpdateGlobalReputerWhitelistResponse, error)
	CanUpdateParams(ctx context.Context, in *CanUpdateParamsRequest, opts ...grpc.CallOption) (*CanUpdateParamsResponse, error)
	CanUpdateTopicWhitelist(ctx context.Context, in *CanUpdateTopicWhitelistRequest, opts ...grpc.CallOption) (*CanUpdateTopicWhitelistResponse, error)
	CanCreateTopic(ctx context.Context, in *CanCreateTopicRequest, opts ...grpc.CallOption) (*CanCreateTopicResponse, error)
	CanSubmitWorkerPayload(ctx context.Context, in *CanSubmitWorkerPayloadRequest, opts ...grpc.CallOption) (*CanSubmitWorkerPayloadResponse, error)
	CanSubmitReputerPayload(ctx context.Context, in *CanSubmitReputerPayloadRequest, opts ...grpc.CallOption) (*CanSubmitReputerPayloadResponse, error)
	// GetTopicInitialInfererEmaScore returns the initial EMA score for inferers in a topic
	GetTopicInitialInfererEmaScore(ctx context.Context, in *GetTopicInitialInfererEmaScoreRequest, opts ...grpc.CallOption) (*GetTopicInitialInfererEmaScoreResponse, error)
	// GetTopicInitialForecasterEmaScore returns the initial EMA score for forecasters in a topic
	GetTopicInitialForecasterEmaScore(ctx context.Context, in *GetTopicInitialForecasterEmaScoreRequest, opts ...grpc.CallOption) (*GetTopicInitialForecasterEmaScoreResponse, error)
	// GetTopicInitialReputerEmaScore returns the initial EMA score for reputers in a topic
	GetTopicInitialReputerEmaScore(ctx context.Context, in *GetTopicInitialReputerEmaScoreRequest, opts ...grpc.CallOption) (*GetTopicInitialReputerEmaScoreResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error) {
	out := new(GetParamsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNextTopicId(ctx context.Context, in *GetNextTopicIdRequest, opts ...grpc.CallOption) (*GetNextTopicIdResponse, error) {
	out := new(GetNextTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetNextTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*GetTopicResponse, error) {
	out := new(GetTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetWorkerLatestInferenceByTopicId(ctx context.Context, in *GetWorkerLatestInferenceByTopicIdRequest, opts ...grpc.CallOption) (*GetWorkerLatestInferenceByTopicIdResponse, error) {
	out := new(GetWorkerLatestInferenceByTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetWorkerLatestInferenceByTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetInferencesAtBlock(ctx context.Context, in *GetInferencesAtBlockRequest, opts ...grpc.CallOption) (*GetInferencesAtBlockResponse, error) {
	out := new(GetInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetInferencesAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetLatestTopicInferences(ctx context.Context, in *GetLatestTopicInferencesRequest, opts ...grpc.CallOption) (*GetLatestTopicInferencesResponse, error) {
	out := new(GetLatestTopicInferencesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetLatestTopicInferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForecastsAtBlock(ctx context.Context, in *GetForecastsAtBlockRequest, opts ...grpc.CallOption) (*GetForecastsAtBlockResponse, error) {
	out := new(GetForecastsAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetForecastsAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNetworkLossBundleAtBlock(ctx context.Context, in *GetNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*GetNetworkLossBundleAtBlockResponse, error) {
	out := new(GetNetworkLossBundleAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetNetworkLossBundleAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTotalStake(ctx context.Context, in *GetTotalStakeRequest, opts ...grpc.CallOption) (*GetTotalStakeResponse, error) {
	out := new(GetTotalStakeResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTotalStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputerStakeInTopic(ctx context.Context, in *GetReputerStakeInTopicRequest, opts ...grpc.CallOption) (*GetReputerStakeInTopicResponse, error) {
	out := new(GetReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetReputerStakeInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetMultiReputerStakeInTopic(ctx context.Context, in *GetMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*GetMultiReputerStakeInTopicResponse, error) {
	out := new(GetMultiReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetMultiReputerStakeInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeFromReputerInTopicInSelf(ctx context.Context, in *GetStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*GetStakeFromReputerInTopicInSelfResponse, error) {
	out := new(GetStakeFromReputerInTopicInSelfResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetStakeFromReputerInTopicInSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeInTopicInReputer(ctx context.Context, in *GetDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*GetDelegateStakeInTopicInReputerResponse, error) {
	out := new(GetDelegateStakeInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetDelegateStakeInTopicInReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *GetStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*GetStakeFromDelegatorInTopicInReputerResponse, error) {
	out := new(GetStakeFromDelegatorInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetStakeFromDelegatorInTopicInReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeFromDelegatorInTopic(ctx context.Context, in *GetStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*GetStakeFromDelegatorInTopicResponse, error) {
	out := new(GetStakeFromDelegatorInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetStakeFromDelegatorInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicStake(ctx context.Context, in *GetTopicStakeRequest, opts ...grpc.CallOption) (*GetTopicStakeResponse, error) {
	out := new(GetTopicStakeResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTopicStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeRemovalsUpUntilBlock(ctx context.Context, in *GetStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*GetStakeRemovalsUpUntilBlockResponse, error) {
	out := new(GetStakeRemovalsUpUntilBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetStakeRemovalsUpUntilBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, in *GetDelegateStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalsUpUntilBlockResponse, error) {
	out := new(GetDelegateStakeRemovalsUpUntilBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetDelegateStakeRemovalsUpUntilBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeRemovalInfo(ctx context.Context, in *GetStakeRemovalInfoRequest, opts ...grpc.CallOption) (*GetStakeRemovalInfoResponse, error) {
	out := new(GetStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetStakeRemovalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeRemovalInfo(ctx context.Context, in *GetDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalInfoResponse, error) {
	out := new(GetDelegateStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetDelegateStakeRemovalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetWorkerNodeInfo(ctx context.Context, in *GetWorkerNodeInfoRequest, opts ...grpc.CallOption) (*GetWorkerNodeInfoResponse, error) {
	out := new(GetWorkerNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetWorkerNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputerNodeInfo(ctx context.Context, in *GetReputerNodeInfoRequest, opts ...grpc.CallOption) (*GetReputerNodeInfoResponse, error) {
	out := new(GetReputerNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetReputerNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWorkerRegisteredInTopicId(ctx context.Context, in *IsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*IsWorkerRegisteredInTopicIdResponse, error) {
	out := new(IsWorkerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWorkerRegisteredInTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsReputerRegisteredInTopicId(ctx context.Context, in *IsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*IsReputerRegisteredInTopicIdResponse, error) {
	out := new(IsReputerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsReputerRegisteredInTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNetworkInferencesAtBlock(ctx context.Context, in *GetNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*GetNetworkInferencesAtBlockResponse, error) {
	out := new(GetNetworkInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetNetworkInferencesAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNetworkInferencesAtBlockOutlierResistant(ctx context.Context, in *GetNetworkInferencesAtBlockOutlierResistantRequest, opts ...grpc.CallOption) (*GetNetworkInferencesAtBlockOutlierResistantResponse, error) {
	out := new(GetNetworkInferencesAtBlockOutlierResistantResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetNetworkInferencesAtBlockOutlierResistant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetLatestNetworkInferences(ctx context.Context, in *GetLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*GetLatestNetworkInferencesResponse, error) {
	out := new(GetLatestNetworkInferencesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetLatestNetworkInferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetLatestNetworkInferencesOutlierResistant(ctx context.Context, in *GetLatestNetworkInferencesOutlierResistantRequest, opts ...grpc.CallOption) (*GetLatestNetworkInferencesOutlierResistantResponse, error) {
	out := new(GetLatestNetworkInferencesOutlierResistantResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetLatestNetworkInferencesOutlierResistant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetLatestAvailableNetworkInferences(ctx context.Context, in *GetLatestAvailableNetworkInferencesRequest, opts ...grpc.CallOption) (*GetLatestAvailableNetworkInferencesResponse, error) {
	out := new(GetLatestAvailableNetworkInferencesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetLatestAvailableNetworkInferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetLatestAvailableNetworkInferencesOutlierResistant(ctx context.Context, in *GetLatestAvailableNetworkInferencesOutlierResistantRequest, opts ...grpc.CallOption) (*GetLatestAvailableNetworkInferencesOutlierResistantResponse, error) {
	out := new(GetLatestAvailableNetworkInferencesOutlierResistantResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetLatestAvailableNetworkInferencesOutlierResistant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWorkerNonceUnfulfilled(ctx context.Context, in *IsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*IsWorkerNonceUnfulfilledResponse, error) {
	out := new(IsWorkerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWorkerNonceUnfulfilled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsReputerNonceUnfulfilled(ctx context.Context, in *IsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*IsReputerNonceUnfulfilledResponse, error) {
	out := new(IsReputerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsReputerNonceUnfulfilled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetUnfulfilledWorkerNonces(ctx context.Context, in *GetUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*GetUnfulfilledWorkerNoncesResponse, error) {
	out := new(GetUnfulfilledWorkerNoncesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetUnfulfilledWorkerNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetUnfulfilledReputerNonces(ctx context.Context, in *GetUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*GetUnfulfilledReputerNoncesResponse, error) {
	out := new(GetUnfulfilledReputerNoncesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetUnfulfilledReputerNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetInfererNetworkRegret(ctx context.Context, in *GetInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetInfererNetworkRegretResponse, error) {
	out := new(GetInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetInfererNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForecasterNetworkRegret(ctx context.Context, in *GetForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetForecasterNetworkRegretResponse, error) {
	out := new(GetForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetForecasterNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneInForecasterNetworkRegret(ctx context.Context, in *GetOneInForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneInForecasterNetworkRegretResponse, error) {
	out := new(GetOneInForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetOneInForecasterNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWhitelistAdmin(ctx context.Context, in *IsWhitelistAdminRequest, opts ...grpc.CallOption) (*IsWhitelistAdminResponse, error) {
	out := new(IsWhitelistAdminResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWhitelistAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicLastWorkerCommitInfo(ctx context.Context, in *GetTopicLastWorkerCommitInfoRequest, opts ...grpc.CallOption) (*GetTopicLastWorkerCommitInfoResponse, error) {
	out := new(GetTopicLastWorkerCommitInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTopicLastWorkerCommitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicLastReputerCommitInfo(ctx context.Context, in *GetTopicLastReputerCommitInfoRequest, opts ...grpc.CallOption) (*GetTopicLastReputerCommitInfoResponse, error) {
	out := new(GetTopicLastReputerCommitInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTopicLastReputerCommitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicRewardNonce(ctx context.Context, in *GetTopicRewardNonceRequest, opts ...grpc.CallOption) (*GetTopicRewardNonceResponse, error) {
	out := new(GetTopicRewardNonceResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTopicRewardNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputerLossBundlesAtBlock(ctx context.Context, in *GetReputerLossBundlesAtBlockRequest, opts ...grpc.CallOption) (*GetReputerLossBundlesAtBlockResponse, error) {
	out := new(GetReputerLossBundlesAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetReputerLossBundlesAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeReputerAuthority(ctx context.Context, in *GetStakeReputerAuthorityRequest, opts ...grpc.CallOption) (*GetStakeReputerAuthorityResponse, error) {
	out := new(GetStakeReputerAuthorityResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetStakeReputerAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakePlacement(ctx context.Context, in *GetDelegateStakePlacementRequest, opts ...grpc.CallOption) (*GetDelegateStakePlacementResponse, error) {
	out := new(GetDelegateStakePlacementResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetDelegateStakePlacement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeUponReputer(ctx context.Context, in *GetDelegateStakeUponReputerRequest, opts ...grpc.CallOption) (*GetDelegateStakeUponReputerResponse, error) {
	out := new(GetDelegateStakeUponReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetDelegateStakeUponReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateRewardPerShare(ctx context.Context, in *GetDelegateRewardPerShareRequest, opts ...grpc.CallOption) (*GetDelegateRewardPerShareResponse, error) {
	out := new(GetDelegateRewardPerShareResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetDelegateRewardPerShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeRemovalForReputerAndTopicId(ctx context.Context, in *GetStakeRemovalForReputerAndTopicIdRequest, opts ...grpc.CallOption) (*GetStakeRemovalForReputerAndTopicIdResponse, error) {
	out := new(GetStakeRemovalForReputerAndTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetStakeRemovalForReputerAndTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeRemoval(ctx context.Context, in *GetDelegateStakeRemovalRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalResponse, error) {
	out := new(GetDelegateStakeRemovalResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetDelegateStakeRemoval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousTopicWeight(ctx context.Context, in *GetPreviousTopicWeightRequest, opts ...grpc.CallOption) (*GetPreviousTopicWeightResponse, error) {
	out := new(GetPreviousTopicWeightResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetPreviousTopicWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTotalSumPreviousTopicWeights(ctx context.Context, in *GetTotalSumPreviousTopicWeightsRequest, opts ...grpc.CallOption) (*GetTotalSumPreviousTopicWeightsResponse, error) {
	out := new(GetTotalSumPreviousTopicWeightsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTotalSumPreviousTopicWeights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TopicExists(ctx context.Context, in *TopicExistsRequest, opts ...grpc.CallOption) (*TopicExistsResponse, error) {
	out := new(TopicExistsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/TopicExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsTopicActive(ctx context.Context, in *IsTopicActiveRequest, opts ...grpc.CallOption) (*IsTopicActiveResponse, error) {
	out := new(IsTopicActiveResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsTopicActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicFeeRevenue(ctx context.Context, in *GetTopicFeeRevenueRequest, opts ...grpc.CallOption) (*GetTopicFeeRevenueResponse, error) {
	out := new(GetTopicFeeRevenueResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTopicFeeRevenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetInfererScoreEma(ctx context.Context, in *GetInfererScoreEmaRequest, opts ...grpc.CallOption) (*GetInfererScoreEmaResponse, error) {
	out := new(GetInfererScoreEmaResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetInfererScoreEma", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForecasterScoreEma(ctx context.Context, in *GetForecasterScoreEmaRequest, opts ...grpc.CallOption) (*GetForecasterScoreEmaResponse, error) {
	out := new(GetForecasterScoreEmaResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetForecasterScoreEma", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputerScoreEma(ctx context.Context, in *GetReputerScoreEmaRequest, opts ...grpc.CallOption) (*GetReputerScoreEmaResponse, error) {
	out := new(GetReputerScoreEmaResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetReputerScoreEma", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetInferenceScoresUntilBlock(ctx context.Context, in *GetInferenceScoresUntilBlockRequest, opts ...grpc.CallOption) (*GetInferenceScoresUntilBlockResponse, error) {
	out := new(GetInferenceScoresUntilBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetInferenceScoresUntilBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousTopicQuantileForecasterScoreEma(ctx context.Context, in *GetPreviousTopicQuantileForecasterScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileForecasterScoreEmaResponse, error) {
	out := new(GetPreviousTopicQuantileForecasterScoreEmaResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetPreviousTopicQuantileForecasterScoreEma", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousTopicQuantileInfererScoreEma(ctx context.Context, in *GetPreviousTopicQuantileInfererScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileInfererScoreEmaResponse, error) {
	out := new(GetPreviousTopicQuantileInfererScoreEmaResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetPreviousTopicQuantileInfererScoreEma", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousTopicQuantileReputerScoreEma(ctx context.Context, in *GetPreviousTopicQuantileReputerScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileReputerScoreEmaResponse, error) {
	out := new(GetPreviousTopicQuantileReputerScoreEmaResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetPreviousTopicQuantileReputerScoreEma", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetWorkerInferenceScoresAtBlock(ctx context.Context, in *GetWorkerInferenceScoresAtBlockRequest, opts ...grpc.CallOption) (*GetWorkerInferenceScoresAtBlockResponse, error) {
	out := new(GetWorkerInferenceScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetWorkerInferenceScoresAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCurrentLowestInfererScore(ctx context.Context, in *GetCurrentLowestInfererScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestInfererScoreResponse, error) {
	out := new(GetCurrentLowestInfererScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetCurrentLowestInfererScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForecastScoresUntilBlock(ctx context.Context, in *GetForecastScoresUntilBlockRequest, opts ...grpc.CallOption) (*GetForecastScoresUntilBlockResponse, error) {
	out := new(GetForecastScoresUntilBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetForecastScoresUntilBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetWorkerForecastScoresAtBlock(ctx context.Context, in *GetWorkerForecastScoresAtBlockRequest, opts ...grpc.CallOption) (*GetWorkerForecastScoresAtBlockResponse, error) {
	out := new(GetWorkerForecastScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetWorkerForecastScoresAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCurrentLowestForecasterScore(ctx context.Context, in *GetCurrentLowestForecasterScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestForecasterScoreResponse, error) {
	out := new(GetCurrentLowestForecasterScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetCurrentLowestForecasterScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputersScoresAtBlock(ctx context.Context, in *GetReputersScoresAtBlockRequest, opts ...grpc.CallOption) (*GetReputersScoresAtBlockResponse, error) {
	out := new(GetReputersScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetReputersScoresAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCurrentLowestReputerScore(ctx context.Context, in *GetCurrentLowestReputerScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestReputerScoreResponse, error) {
	out := new(GetCurrentLowestReputerScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetCurrentLowestReputerScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetListeningCoefficient(ctx context.Context, in *GetListeningCoefficientRequest, opts ...grpc.CallOption) (*GetListeningCoefficientResponse, error) {
	out := new(GetListeningCoefficientResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetListeningCoefficient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousReputerRewardFraction(ctx context.Context, in *GetPreviousReputerRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousReputerRewardFractionResponse, error) {
	out := new(GetPreviousReputerRewardFractionResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetPreviousReputerRewardFraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousInferenceRewardFraction(ctx context.Context, in *GetPreviousInferenceRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousInferenceRewardFractionResponse, error) {
	out := new(GetPreviousInferenceRewardFractionResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetPreviousInferenceRewardFraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousForecastRewardFraction(ctx context.Context, in *GetPreviousForecastRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousForecastRewardFractionResponse, error) {
	out := new(GetPreviousForecastRewardFractionResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetPreviousForecastRewardFraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousPercentageRewardToStakedReputers(ctx context.Context, in *GetPreviousPercentageRewardToStakedReputersRequest, opts ...grpc.CallOption) (*GetPreviousPercentageRewardToStakedReputersResponse, error) {
	out := new(GetPreviousPercentageRewardToStakedReputersResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetPreviousPercentageRewardToStakedReputers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTotalRewardToDistribute(ctx context.Context, in *GetTotalRewardToDistributeRequest, opts ...grpc.CallOption) (*GetTotalRewardToDistributeResponse, error) {
	out := new(GetTotalRewardToDistributeResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTotalRewardToDistribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNaiveInfererNetworkRegret(ctx context.Context, in *GetNaiveInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetNaiveInfererNetworkRegretResponse, error) {
	out := new(GetNaiveInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetNaiveInfererNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneOutInfererInfererNetworkRegret(ctx context.Context, in *GetOneOutInfererInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutInfererInfererNetworkRegretResponse, error) {
	out := new(GetOneOutInfererInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetOneOutInfererInfererNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneOutInfererForecasterNetworkRegret(ctx context.Context, in *GetOneOutInfererForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutInfererForecasterNetworkRegretResponse, error) {
	out := new(GetOneOutInfererForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetOneOutInfererForecasterNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneOutForecasterInfererNetworkRegret(ctx context.Context, in *GetOneOutForecasterInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutForecasterInfererNetworkRegretResponse, error) {
	out := new(GetOneOutForecasterInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetOneOutForecasterInfererNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneOutForecasterForecasterNetworkRegret(ctx context.Context, in *GetOneOutForecasterForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutForecasterForecasterNetworkRegretResponse, error) {
	out := new(GetOneOutForecasterForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetOneOutForecasterForecasterNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetActiveTopicsAtBlock(ctx context.Context, in *GetActiveTopicsAtBlockRequest, opts ...grpc.CallOption) (*GetActiveTopicsAtBlockResponse, error) {
	out := new(GetActiveTopicsAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetActiveTopicsAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNextChurningBlockByTopicId(ctx context.Context, in *GetNextChurningBlockByTopicIdRequest, opts ...grpc.CallOption) (*GetNextChurningBlockByTopicIdResponse, error) {
	out := new(GetNextChurningBlockByTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetNextChurningBlockByTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCountInfererInclusionsInTopic(ctx context.Context, in *GetCountInfererInclusionsInTopicRequest, opts ...grpc.CallOption) (*GetCountInfererInclusionsInTopicResponse, error) {
	out := new(GetCountInfererInclusionsInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetCountInfererInclusionsInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCountForecasterInclusionsInTopic(ctx context.Context, in *GetCountForecasterInclusionsInTopicRequest, opts ...grpc.CallOption) (*GetCountForecasterInclusionsInTopicResponse, error) {
	out := new(GetCountForecasterInclusionsInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetCountForecasterInclusionsInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetActiveReputersForTopic(ctx context.Context, in *GetActiveReputersForTopicRequest, opts ...grpc.CallOption) (*GetActiveReputersForTopicResponse, error) {
	out := new(GetActiveReputersForTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetActiveReputersForTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetActiveForecastersForTopic(ctx context.Context, in *GetActiveForecastersForTopicRequest, opts ...grpc.CallOption) (*GetActiveForecastersForTopicResponse, error) {
	out := new(GetActiveForecastersForTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetActiveForecastersForTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetActiveInferersForTopic(ctx context.Context, in *GetActiveInferersForTopicRequest, opts ...grpc.CallOption) (*GetActiveInferersForTopicResponse, error) {
	out := new(GetActiveInferersForTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetActiveInferersForTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWhitelistedGlobalWorker(ctx context.Context, in *IsWhitelistedGlobalWorkerRequest, opts ...grpc.CallOption) (*IsWhitelistedGlobalWorkerResponse, error) {
	out := new(IsWhitelistedGlobalWorkerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWhitelistedGlobalWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWhitelistedGlobalReputer(ctx context.Context, in *IsWhitelistedGlobalReputerRequest, opts ...grpc.CallOption) (*IsWhitelistedGlobalReputerResponse, error) {
	out := new(IsWhitelistedGlobalReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWhitelistedGlobalReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWhitelistedGlobalAdmin(ctx context.Context, in *IsWhitelistedGlobalAdminRequest, opts ...grpc.CallOption) (*IsWhitelistedGlobalAdminResponse, error) {
	out := new(IsWhitelistedGlobalAdminResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWhitelistedGlobalAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsTopicWorkerWhitelistEnabled(ctx context.Context, in *IsTopicWorkerWhitelistEnabledRequest, opts ...grpc.CallOption) (*IsTopicWorkerWhitelistEnabledResponse, error) {
	out := new(IsTopicWorkerWhitelistEnabledResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsTopicWorkerWhitelistEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsTopicReputerWhitelistEnabled(ctx context.Context, in *IsTopicReputerWhitelistEnabledRequest, opts ...grpc.CallOption) (*IsTopicReputerWhitelistEnabledResponse, error) {
	out := new(IsTopicReputerWhitelistEnabledResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsTopicReputerWhitelistEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWhitelistedTopicCreator(ctx context.Context, in *IsWhitelistedTopicCreatorRequest, opts ...grpc.CallOption) (*IsWhitelistedTopicCreatorResponse, error) {
	out := new(IsWhitelistedTopicCreatorResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWhitelistedTopicCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWhitelistedGlobalActor(ctx context.Context, in *IsWhitelistedGlobalActorRequest, opts ...grpc.CallOption) (*IsWhitelistedGlobalActorResponse, error) {
	out := new(IsWhitelistedGlobalActorResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWhitelistedGlobalActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWhitelistedTopicWorker(ctx context.Context, in *IsWhitelistedTopicWorkerRequest, opts ...grpc.CallOption) (*IsWhitelistedTopicWorkerResponse, error) {
	out := new(IsWhitelistedTopicWorkerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWhitelistedTopicWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWhitelistedTopicReputer(ctx context.Context, in *IsWhitelistedTopicReputerRequest, opts ...grpc.CallOption) (*IsWhitelistedTopicReputerResponse, error) {
	out := new(IsWhitelistedTopicReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/IsWhitelistedTopicReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CanUpdateAllGlobalWhitelists(ctx context.Context, in *CanUpdateAllGlobalWhitelistsRequest, opts ...grpc.CallOption) (*CanUpdateAllGlobalWhitelistsResponse, error) {
	out := new(CanUpdateAllGlobalWhitelistsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/CanUpdateAllGlobalWhitelists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CanUpdateGlobalWorkerWhitelist(ctx context.Context, in *CanUpdateGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*CanUpdateGlobalWorkerWhitelistResponse, error) {
	out := new(CanUpdateGlobalWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/CanUpdateGlobalWorkerWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CanUpdateGlobalReputerWhitelist(ctx context.Context, in *CanUpdateGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*CanUpdateGlobalReputerWhitelistResponse, error) {
	out := new(CanUpdateGlobalReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/CanUpdateGlobalReputerWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CanUpdateParams(ctx context.Context, in *CanUpdateParamsRequest, opts ...grpc.CallOption) (*CanUpdateParamsResponse, error) {
	out := new(CanUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/CanUpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CanUpdateTopicWhitelist(ctx context.Context, in *CanUpdateTopicWhitelistRequest, opts ...grpc.CallOption) (*CanUpdateTopicWhitelistResponse, error) {
	out := new(CanUpdateTopicWhitelistResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/CanUpdateTopicWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CanCreateTopic(ctx context.Context, in *CanCreateTopicRequest, opts ...grpc.CallOption) (*CanCreateTopicResponse, error) {
	out := new(CanCreateTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/CanCreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CanSubmitWorkerPayload(ctx context.Context, in *CanSubmitWorkerPayloadRequest, opts ...grpc.CallOption) (*CanSubmitWorkerPayloadResponse, error) {
	out := new(CanSubmitWorkerPayloadResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/CanSubmitWorkerPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CanSubmitReputerPayload(ctx context.Context, in *CanSubmitReputerPayloadRequest, opts ...grpc.CallOption) (*CanSubmitReputerPayloadResponse, error) {
	out := new(CanSubmitReputerPayloadResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/CanSubmitReputerPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicInitialInfererEmaScore(ctx context.Context, in *GetTopicInitialInfererEmaScoreRequest, opts ...grpc.CallOption) (*GetTopicInitialInfererEmaScoreResponse, error) {
	out := new(GetTopicInitialInfererEmaScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTopicInitialInfererEmaScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicInitialForecasterEmaScore(ctx context.Context, in *GetTopicInitialForecasterEmaScoreRequest, opts ...grpc.CallOption) (*GetTopicInitialForecasterEmaScoreResponse, error) {
	out := new(GetTopicInitialForecasterEmaScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTopicInitialForecasterEmaScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicInitialReputerEmaScore(ctx context.Context, in *GetTopicInitialReputerEmaScoreRequest, opts ...grpc.CallOption) (*GetTopicInitialReputerEmaScoreResponse, error) {
	out := new(GetTopicInitialReputerEmaScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.v7.QueryService/GetTopicInitialReputerEmaScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// Params returns the module parameters.
	GetParams(context.Context, *GetParamsRequest) (*GetParamsResponse, error)
	GetNextTopicId(context.Context, *GetNextTopicIdRequest) (*GetNextTopicIdResponse, error)
	GetTopic(context.Context, *GetTopicRequest) (*GetTopicResponse, error)
	GetWorkerLatestInferenceByTopicId(context.Context, *GetWorkerLatestInferenceByTopicIdRequest) (*GetWorkerLatestInferenceByTopicIdResponse, error)
	GetInferencesAtBlock(context.Context, *GetInferencesAtBlockRequest) (*GetInferencesAtBlockResponse, error)
	GetLatestTopicInferences(context.Context, *GetLatestTopicInferencesRequest) (*GetLatestTopicInferencesResponse, error)
	GetForecastsAtBlock(context.Context, *GetForecastsAtBlockRequest) (*GetForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(context.Context, *GetNetworkLossBundleAtBlockRequest) (*GetNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(context.Context, *GetTotalStakeRequest) (*GetTotalStakeResponse, error)
	GetReputerStakeInTopic(context.Context, *GetReputerStakeInTopicRequest) (*GetReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(context.Context, *GetMultiReputerStakeInTopicRequest) (*GetMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(context.Context, *GetStakeFromReputerInTopicInSelfRequest) (*GetStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(context.Context, *GetDelegateStakeInTopicInReputerRequest) (*GetDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(context.Context, *GetStakeFromDelegatorInTopicInReputerRequest) (*GetStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(context.Context, *GetStakeFromDelegatorInTopicRequest) (*GetStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(context.Context, *GetTopicStakeRequest) (*GetTopicStakeResponse, error)
	GetStakeRemovalsUpUntilBlock(context.Context, *GetStakeRemovalsUpUntilBlockRequest) (*GetStakeRemovalsUpUntilBlockResponse, error)
	GetDelegateStakeRemovalsUpUntilBlock(context.Context, *GetDelegateStakeRemovalsUpUntilBlockRequest) (*GetDelegateStakeRemovalsUpUntilBlockResponse, error)
	GetStakeRemovalInfo(context.Context, *GetStakeRemovalInfoRequest) (*GetStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(context.Context, *GetDelegateStakeRemovalInfoRequest) (*GetDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(context.Context, *GetWorkerNodeInfoRequest) (*GetWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(context.Context, *GetReputerNodeInfoRequest) (*GetReputerNodeInfoResponse, error)
	IsWorkerRegisteredInTopicId(context.Context, *IsWorkerRegisteredInTopicIdRequest) (*IsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(context.Context, *IsReputerRegisteredInTopicIdRequest) (*IsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(context.Context, *GetNetworkInferencesAtBlockRequest) (*GetNetworkInferencesAtBlockResponse, error)
	GetNetworkInferencesAtBlockOutlierResistant(context.Context, *GetNetworkInferencesAtBlockOutlierResistantRequest) (*GetNetworkInferencesAtBlockOutlierResistantResponse, error)
	GetLatestNetworkInferences(context.Context, *GetLatestNetworkInferencesRequest) (*GetLatestNetworkInferencesResponse, error)
	GetLatestNetworkInferencesOutlierResistant(context.Context, *GetLatestNetworkInferencesOutlierResistantRequest) (*GetLatestNetworkInferencesOutlierResistantResponse, error)
	GetLatestAvailableNetworkInferences(context.Context, *GetLatestAvailableNetworkInferencesRequest) (*GetLatestAvailableNetworkInferencesResponse, error)
	GetLatestAvailableNetworkInferencesOutlierResistant(context.Context, *GetLatestAvailableNetworkInferencesOutlierResistantRequest) (*GetLatestAvailableNetworkInferencesOutlierResistantResponse, error)
	IsWorkerNonceUnfulfilled(context.Context, *IsWorkerNonceUnfulfilledRequest) (*IsWorkerNonceUnfulfilledResponse, error)
	IsReputerNonceUnfulfilled(context.Context, *IsReputerNonceUnfulfilledRequest) (*IsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(context.Context, *GetUnfulfilledWorkerNoncesRequest) (*GetUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(context.Context, *GetUnfulfilledReputerNoncesRequest) (*GetUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(context.Context, *GetInfererNetworkRegretRequest) (*GetInfererNetworkRegretResponse, error)
	GetForecasterNetworkRegret(context.Context, *GetForecasterNetworkRegretRequest) (*GetForecasterNetworkRegretResponse, error)
	GetOneInForecasterNetworkRegret(context.Context, *GetOneInForecasterNetworkRegretRequest) (*GetOneInForecasterNetworkRegretResponse, error)
	IsWhitelistAdmin(context.Context, *IsWhitelistAdminRequest) (*IsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(context.Context, *GetTopicLastWorkerCommitInfoRequest) (*GetTopicLastWorkerCommitInfoResponse, error)
	GetTopicLastReputerCommitInfo(context.Context, *GetTopicLastReputerCommitInfoRequest) (*GetTopicLastReputerCommitInfoResponse, error)
	GetTopicRewardNonce(context.Context, *GetTopicRewardNonceRequest) (*GetTopicRewardNonceResponse, error)
	GetReputerLossBundlesAtBlock(context.Context, *GetReputerLossBundlesAtBlockRequest) (*GetReputerLossBundlesAtBlockResponse, error)
	GetStakeReputerAuthority(context.Context, *GetStakeReputerAuthorityRequest) (*GetStakeReputerAuthorityResponse, error)
	GetDelegateStakePlacement(context.Context, *GetDelegateStakePlacementRequest) (*GetDelegateStakePlacementResponse, error)
	GetDelegateStakeUponReputer(context.Context, *GetDelegateStakeUponReputerRequest) (*GetDelegateStakeUponReputerResponse, error)
	GetDelegateRewardPerShare(context.Context, *GetDelegateRewardPerShareRequest) (*GetDelegateRewardPerShareResponse, error)
	GetStakeRemovalForReputerAndTopicId(context.Context, *GetStakeRemovalForReputerAndTopicIdRequest) (*GetStakeRemovalForReputerAndTopicIdResponse, error)
	GetDelegateStakeRemoval(context.Context, *GetDelegateStakeRemovalRequest) (*GetDelegateStakeRemovalResponse, error)
	GetPreviousTopicWeight(context.Context, *GetPreviousTopicWeightRequest) (*GetPreviousTopicWeightResponse, error)
	GetTotalSumPreviousTopicWeights(context.Context, *GetTotalSumPreviousTopicWeightsRequest) (*GetTotalSumPreviousTopicWeightsResponse, error)
	TopicExists(context.Context, *TopicExistsRequest) (*TopicExistsResponse, error)
	IsTopicActive(context.Context, *IsTopicActiveRequest) (*IsTopicActiveResponse, error)
	GetTopicFeeRevenue(context.Context, *GetTopicFeeRevenueRequest) (*GetTopicFeeRevenueResponse, error)
	GetInfererScoreEma(context.Context, *GetInfererScoreEmaRequest) (*GetInfererScoreEmaResponse, error)
	GetForecasterScoreEma(context.Context, *GetForecasterScoreEmaRequest) (*GetForecasterScoreEmaResponse, error)
	GetReputerScoreEma(context.Context, *GetReputerScoreEmaRequest) (*GetReputerScoreEmaResponse, error)
	GetInferenceScoresUntilBlock(context.Context, *GetInferenceScoresUntilBlockRequest) (*GetInferenceScoresUntilBlockResponse, error)
	GetPreviousTopicQuantileForecasterScoreEma(context.Context, *GetPreviousTopicQuantileForecasterScoreEmaRequest) (*GetPreviousTopicQuantileForecasterScoreEmaResponse, error)
	GetPreviousTopicQuantileInfererScoreEma(context.Context, *GetPreviousTopicQuantileInfererScoreEmaRequest) (*GetPreviousTopicQuantileInfererScoreEmaResponse, error)
	GetPreviousTopicQuantileReputerScoreEma(context.Context, *GetPreviousTopicQuantileReputerScoreEmaRequest) (*GetPreviousTopicQuantileReputerScoreEmaResponse, error)
	GetWorkerInferenceScoresAtBlock(context.Context, *GetWorkerInferenceScoresAtBlockRequest) (*GetWorkerInferenceScoresAtBlockResponse, error)
	GetCurrentLowestInfererScore(context.Context, *GetCurrentLowestInfererScoreRequest) (*GetCurrentLowestInfererScoreResponse, error)
	GetForecastScoresUntilBlock(context.Context, *GetForecastScoresUntilBlockRequest) (*GetForecastScoresUntilBlockResponse, error)
	GetWorkerForecastScoresAtBlock(context.Context, *GetWorkerForecastScoresAtBlockRequest) (*GetWorkerForecastScoresAtBlockResponse, error)
	GetCurrentLowestForecasterScore(context.Context, *GetCurrentLowestForecasterScoreRequest) (*GetCurrentLowestForecasterScoreResponse, error)
	GetReputersScoresAtBlock(context.Context, *GetReputersScoresAtBlockRequest) (*GetReputersScoresAtBlockResponse, error)
	GetCurrentLowestReputerScore(context.Context, *GetCurrentLowestReputerScoreRequest) (*GetCurrentLowestReputerScoreResponse, error)
	GetListeningCoefficient(context.Context, *GetListeningCoefficientRequest) (*GetListeningCoefficientResponse, error)
	GetPreviousReputerRewardFraction(context.Context, *GetPreviousReputerRewardFractionRequest) (*GetPreviousReputerRewardFractionResponse, error)
	GetPreviousInferenceRewardFraction(context.Context, *GetPreviousInferenceRewardFractionRequest) (*GetPreviousInferenceRewardFractionResponse, error)
	GetPreviousForecastRewardFraction(context.Context, *GetPreviousForecastRewardFractionRequest) (*GetPreviousForecastRewardFractionResponse, error)
	GetPreviousPercentageRewardToStakedReputers(context.Context, *GetPreviousPercentageRewardToStakedReputersRequest) (*GetPreviousPercentageRewardToStakedReputersResponse, error)
	GetTotalRewardToDistribute(context.Context, *GetTotalRewardToDistributeRequest) (*GetTotalRewardToDistributeResponse, error)
	GetNaiveInfererNetworkRegret(context.Context, *GetNaiveInfererNetworkRegretRequest) (*GetNaiveInfererNetworkRegretResponse, error)
	GetOneOutInfererInfererNetworkRegret(context.Context, *GetOneOutInfererInfererNetworkRegretRequest) (*GetOneOutInfererInfererNetworkRegretResponse, error)
	GetOneOutInfererForecasterNetworkRegret(context.Context, *GetOneOutInfererForecasterNetworkRegretRequest) (*GetOneOutInfererForecasterNetworkRegretResponse, error)
	GetOneOutForecasterInfererNetworkRegret(context.Context, *GetOneOutForecasterInfererNetworkRegretRequest) (*GetOneOutForecasterInfererNetworkRegretResponse, error)
	GetOneOutForecasterForecasterNetworkRegret(context.Context, *GetOneOutForecasterForecasterNetworkRegretRequest) (*GetOneOutForecasterForecasterNetworkRegretResponse, error)
	GetActiveTopicsAtBlock(context.Context, *GetActiveTopicsAtBlockRequest) (*GetActiveTopicsAtBlockResponse, error)
	GetNextChurningBlockByTopicId(context.Context, *GetNextChurningBlockByTopicIdRequest) (*GetNextChurningBlockByTopicIdResponse, error)
	GetCountInfererInclusionsInTopic(context.Context, *GetCountInfererInclusionsInTopicRequest) (*GetCountInfererInclusionsInTopicResponse, error)
	GetCountForecasterInclusionsInTopic(context.Context, *GetCountForecasterInclusionsInTopicRequest) (*GetCountForecasterInclusionsInTopicResponse, error)
	GetActiveReputersForTopic(context.Context, *GetActiveReputersForTopicRequest) (*GetActiveReputersForTopicResponse, error)
	GetActiveForecastersForTopic(context.Context, *GetActiveForecastersForTopicRequest) (*GetActiveForecastersForTopicResponse, error)
	GetActiveInferersForTopic(context.Context, *GetActiveInferersForTopicRequest) (*GetActiveInferersForTopicResponse, error)
	IsWhitelistedGlobalWorker(context.Context, *IsWhitelistedGlobalWorkerRequest) (*IsWhitelistedGlobalWorkerResponse, error)
	IsWhitelistedGlobalReputer(context.Context, *IsWhitelistedGlobalReputerRequest) (*IsWhitelistedGlobalReputerResponse, error)
	IsWhitelistedGlobalAdmin(context.Context, *IsWhitelistedGlobalAdminRequest) (*IsWhitelistedGlobalAdminResponse, error)
	IsTopicWorkerWhitelistEnabled(context.Context, *IsTopicWorkerWhitelistEnabledRequest) (*IsTopicWorkerWhitelistEnabledResponse, error)
	IsTopicReputerWhitelistEnabled(context.Context, *IsTopicReputerWhitelistEnabledRequest) (*IsTopicReputerWhitelistEnabledResponse, error)
	IsWhitelistedTopicCreator(context.Context, *IsWhitelistedTopicCreatorRequest) (*IsWhitelistedTopicCreatorResponse, error)
	IsWhitelistedGlobalActor(context.Context, *IsWhitelistedGlobalActorRequest) (*IsWhitelistedGlobalActorResponse, error)
	IsWhitelistedTopicWorker(context.Context, *IsWhitelistedTopicWorkerRequest) (*IsWhitelistedTopicWorkerResponse, error)
	IsWhitelistedTopicReputer(context.Context, *IsWhitelistedTopicReputerRequest) (*IsWhitelistedTopicReputerResponse, error)
	CanUpdateAllGlobalWhitelists(context.Context, *CanUpdateAllGlobalWhitelistsRequest) (*CanUpdateAllGlobalWhitelistsResponse, error)
	CanUpdateGlobalWorkerWhitelist(context.Context, *CanUpdateGlobalWorkerWhitelistRequest) (*CanUpdateGlobalWorkerWhitelistResponse, error)
	CanUpdateGlobalReputerWhitelist(context.Context, *CanUpdateGlobalReputerWhitelistRequest) (*CanUpdateGlobalReputerWhitelistResponse, error)
	CanUpdateParams(context.Context, *CanUpdateParamsRequest) (*CanUpdateParamsResponse, error)
	CanUpdateTopicWhitelist(context.Context, *CanUpdateTopicWhitelistRequest) (*CanUpdateTopicWhitelistResponse, error)
	CanCreateTopic(context.Context, *CanCreateTopicRequest) (*CanCreateTopicResponse, error)
	CanSubmitWorkerPayload(context.Context, *CanSubmitWorkerPayloadRequest) (*CanSubmitWorkerPayloadResponse, error)
	CanSubmitReputerPayload(context.Context, *CanSubmitReputerPayloadRequest) (*CanSubmitReputerPayloadResponse, error)
	// GetTopicInitialInfererEmaScore returns the initial EMA score for inferers in a topic
	GetTopicInitialInfererEmaScore(context.Context, *GetTopicInitialInfererEmaScoreRequest) (*GetTopicInitialInfererEmaScoreResponse, error)
	// GetTopicInitialForecasterEmaScore returns the initial EMA score for forecasters in a topic
	GetTopicInitialForecasterEmaScore(context.Context, *GetTopicInitialForecasterEmaScoreRequest) (*GetTopicInitialForecasterEmaScoreResponse, error)
	// GetTopicInitialReputerEmaScore returns the initial EMA score for reputers in a topic
	GetTopicInitialReputerEmaScore(context.Context, *GetTopicInitialReputerEmaScoreRequest) (*GetTopicInitialReputerEmaScoreResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) GetParams(ctx context.Context, req *GetParamsRequest) (*GetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (*UnimplementedQueryServiceServer) GetNextTopicId(ctx context.Context, req *GetNextTopicIdRequest) (*GetNextTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextTopicId not implemented")
}
func (*UnimplementedQueryServiceServer) GetTopic(ctx context.Context, req *GetTopicRequest) (*GetTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (*UnimplementedQueryServiceServer) GetWorkerLatestInferenceByTopicId(ctx context.Context, req *GetWorkerLatestInferenceByTopicIdRequest) (*GetWorkerLatestInferenceByTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerLatestInferenceByTopicId not implemented")
}
func (*UnimplementedQueryServiceServer) GetInferencesAtBlock(ctx context.Context, req *GetInferencesAtBlockRequest) (*GetInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferencesAtBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetLatestTopicInferences(ctx context.Context, req *GetLatestTopicInferencesRequest) (*GetLatestTopicInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTopicInferences not implemented")
}
func (*UnimplementedQueryServiceServer) GetForecastsAtBlock(ctx context.Context, req *GetForecastsAtBlockRequest) (*GetForecastsAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastsAtBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetNetworkLossBundleAtBlock(ctx context.Context, req *GetNetworkLossBundleAtBlockRequest) (*GetNetworkLossBundleAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkLossBundleAtBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetTotalStake(ctx context.Context, req *GetTotalStakeRequest) (*GetTotalStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalStake not implemented")
}
func (*UnimplementedQueryServiceServer) GetReputerStakeInTopic(ctx context.Context, req *GetReputerStakeInTopicRequest) (*GetReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerStakeInTopic not implemented")
}
func (*UnimplementedQueryServiceServer) GetMultiReputerStakeInTopic(ctx context.Context, req *GetMultiReputerStakeInTopicRequest) (*GetMultiReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiReputerStakeInTopic not implemented")
}
func (*UnimplementedQueryServiceServer) GetStakeFromReputerInTopicInSelf(ctx context.Context, req *GetStakeFromReputerInTopicInSelfRequest) (*GetStakeFromReputerInTopicInSelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromReputerInTopicInSelf not implemented")
}
func (*UnimplementedQueryServiceServer) GetDelegateStakeInTopicInReputer(ctx context.Context, req *GetDelegateStakeInTopicInReputerRequest) (*GetDelegateStakeInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeInTopicInReputer not implemented")
}
func (*UnimplementedQueryServiceServer) GetStakeFromDelegatorInTopicInReputer(ctx context.Context, req *GetStakeFromDelegatorInTopicInReputerRequest) (*GetStakeFromDelegatorInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopicInReputer not implemented")
}
func (*UnimplementedQueryServiceServer) GetStakeFromDelegatorInTopic(ctx context.Context, req *GetStakeFromDelegatorInTopicRequest) (*GetStakeFromDelegatorInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopic not implemented")
}
func (*UnimplementedQueryServiceServer) GetTopicStake(ctx context.Context, req *GetTopicStakeRequest) (*GetTopicStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicStake not implemented")
}
func (*UnimplementedQueryServiceServer) GetStakeRemovalsUpUntilBlock(ctx context.Context, req *GetStakeRemovalsUpUntilBlockRequest) (*GetStakeRemovalsUpUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalsUpUntilBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, req *GetDelegateStakeRemovalsUpUntilBlockRequest) (*GetDelegateStakeRemovalsUpUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalsUpUntilBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetStakeRemovalInfo(ctx context.Context, req *GetStakeRemovalInfoRequest) (*GetStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalInfo not implemented")
}
func (*UnimplementedQueryServiceServer) GetDelegateStakeRemovalInfo(ctx context.Context, req *GetDelegateStakeRemovalInfoRequest) (*GetDelegateStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalInfo not implemented")
}
func (*UnimplementedQueryServiceServer) GetWorkerNodeInfo(ctx context.Context, req *GetWorkerNodeInfoRequest) (*GetWorkerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerNodeInfo not implemented")
}
func (*UnimplementedQueryServiceServer) GetReputerNodeInfo(ctx context.Context, req *GetReputerNodeInfoRequest) (*GetReputerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerNodeInfo not implemented")
}
func (*UnimplementedQueryServiceServer) IsWorkerRegisteredInTopicId(ctx context.Context, req *IsWorkerRegisteredInTopicIdRequest) (*IsWorkerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerRegisteredInTopicId not implemented")
}
func (*UnimplementedQueryServiceServer) IsReputerRegisteredInTopicId(ctx context.Context, req *IsReputerRegisteredInTopicIdRequest) (*IsReputerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReputerRegisteredInTopicId not implemented")
}
func (*UnimplementedQueryServiceServer) GetNetworkInferencesAtBlock(ctx context.Context, req *GetNetworkInferencesAtBlockRequest) (*GetNetworkInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInferencesAtBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetNetworkInferencesAtBlockOutlierResistant(ctx context.Context, req *GetNetworkInferencesAtBlockOutlierResistantRequest) (*GetNetworkInferencesAtBlockOutlierResistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInferencesAtBlockOutlierResistant not implemented")
}
func (*UnimplementedQueryServiceServer) GetLatestNetworkInferences(ctx context.Context, req *GetLatestNetworkInferencesRequest) (*GetLatestNetworkInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestNetworkInferences not implemented")
}
func (*UnimplementedQueryServiceServer) GetLatestNetworkInferencesOutlierResistant(ctx context.Context, req *GetLatestNetworkInferencesOutlierResistantRequest) (*GetLatestNetworkInferencesOutlierResistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestNetworkInferencesOutlierResistant not implemented")
}
func (*UnimplementedQueryServiceServer) GetLatestAvailableNetworkInferences(ctx context.Context, req *GetLatestAvailableNetworkInferencesRequest) (*GetLatestAvailableNetworkInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAvailableNetworkInferences not implemented")
}
func (*UnimplementedQueryServiceServer) GetLatestAvailableNetworkInferencesOutlierResistant(ctx context.Context, req *GetLatestAvailableNetworkInferencesOutlierResistantRequest) (*GetLatestAvailableNetworkInferencesOutlierResistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAvailableNetworkInferencesOutlierResistant not implemented")
}
func (*UnimplementedQueryServiceServer) IsWorkerNonceUnfulfilled(ctx context.Context, req *IsWorkerNonceUnfulfilledRequest) (*IsWorkerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerNonceUnfulfilled not implemented")
}
func (*UnimplementedQueryServiceServer) IsReputerNonceUnfulfilled(ctx context.Context, req *IsReputerNonceUnfulfilledRequest) (*IsReputerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReputerNonceUnfulfilled not implemented")
}
func (*UnimplementedQueryServiceServer) GetUnfulfilledWorkerNonces(ctx context.Context, req *GetUnfulfilledWorkerNoncesRequest) (*GetUnfulfilledWorkerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledWorkerNonces not implemented")
}
func (*UnimplementedQueryServiceServer) GetUnfulfilledReputerNonces(ctx context.Context, req *GetUnfulfilledReputerNoncesRequest) (*GetUnfulfilledReputerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledReputerNonces not implemented")
}
func (*UnimplementedQueryServiceServer) GetInfererNetworkRegret(ctx context.Context, req *GetInfererNetworkRegretRequest) (*GetInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfererNetworkRegret not implemented")
}
func (*UnimplementedQueryServiceServer) GetForecasterNetworkRegret(ctx context.Context, req *GetForecasterNetworkRegretRequest) (*GetForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecasterNetworkRegret not implemented")
}
func (*UnimplementedQueryServiceServer) GetOneInForecasterNetworkRegret(ctx context.Context, req *GetOneInForecasterNetworkRegretRequest) (*GetOneInForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneInForecasterNetworkRegret not implemented")
}
func (*UnimplementedQueryServiceServer) IsWhitelistAdmin(ctx context.Context, req *IsWhitelistAdminRequest) (*IsWhitelistAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistAdmin not implemented")
}
func (*UnimplementedQueryServiceServer) GetTopicLastWorkerCommitInfo(ctx context.Context, req *GetTopicLastWorkerCommitInfoRequest) (*GetTopicLastWorkerCommitInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastWorkerCommitInfo not implemented")
}
func (*UnimplementedQueryServiceServer) GetTopicLastReputerCommitInfo(ctx context.Context, req *GetTopicLastReputerCommitInfoRequest) (*GetTopicLastReputerCommitInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastReputerCommitInfo not implemented")
}
func (*UnimplementedQueryServiceServer) GetTopicRewardNonce(ctx context.Context, req *GetTopicRewardNonceRequest) (*GetTopicRewardNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicRewardNonce not implemented")
}
func (*UnimplementedQueryServiceServer) GetReputerLossBundlesAtBlock(ctx context.Context, req *GetReputerLossBundlesAtBlockRequest) (*GetReputerLossBundlesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerLossBundlesAtBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetStakeReputerAuthority(ctx context.Context, req *GetStakeReputerAuthorityRequest) (*GetStakeReputerAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeReputerAuthority not implemented")
}
func (*UnimplementedQueryServiceServer) GetDelegateStakePlacement(ctx context.Context, req *GetDelegateStakePlacementRequest) (*GetDelegateStakePlacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakePlacement not implemented")
}
func (*UnimplementedQueryServiceServer) GetDelegateStakeUponReputer(ctx context.Context, req *GetDelegateStakeUponReputerRequest) (*GetDelegateStakeUponReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeUponReputer not implemented")
}
func (*UnimplementedQueryServiceServer) GetDelegateRewardPerShare(ctx context.Context, req *GetDelegateRewardPerShareRequest) (*GetDelegateRewardPerShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateRewardPerShare not implemented")
}
func (*UnimplementedQueryServiceServer) GetStakeRemovalForReputerAndTopicId(ctx context.Context, req *GetStakeRemovalForReputerAndTopicIdRequest) (*GetStakeRemovalForReputerAndTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalForReputerAndTopicId not implemented")
}
func (*UnimplementedQueryServiceServer) GetDelegateStakeRemoval(ctx context.Context, req *GetDelegateStakeRemovalRequest) (*GetDelegateStakeRemovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemoval not implemented")
}
func (*UnimplementedQueryServiceServer) GetPreviousTopicWeight(ctx context.Context, req *GetPreviousTopicWeightRequest) (*GetPreviousTopicWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicWeight not implemented")
}
func (*UnimplementedQueryServiceServer) GetTotalSumPreviousTopicWeights(ctx context.Context, req *GetTotalSumPreviousTopicWeightsRequest) (*GetTotalSumPreviousTopicWeightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalSumPreviousTopicWeights not implemented")
}
func (*UnimplementedQueryServiceServer) TopicExists(ctx context.Context, req *TopicExistsRequest) (*TopicExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicExists not implemented")
}
func (*UnimplementedQueryServiceServer) IsTopicActive(ctx context.Context, req *IsTopicActiveRequest) (*IsTopicActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTopicActive not implemented")
}
func (*UnimplementedQueryServiceServer) GetTopicFeeRevenue(ctx context.Context, req *GetTopicFeeRevenueRequest) (*GetTopicFeeRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicFeeRevenue not implemented")
}
func (*UnimplementedQueryServiceServer) GetInfererScoreEma(ctx context.Context, req *GetInfererScoreEmaRequest) (*GetInfererScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfererScoreEma not implemented")
}
func (*UnimplementedQueryServiceServer) GetForecasterScoreEma(ctx context.Context, req *GetForecasterScoreEmaRequest) (*GetForecasterScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecasterScoreEma not implemented")
}
func (*UnimplementedQueryServiceServer) GetReputerScoreEma(ctx context.Context, req *GetReputerScoreEmaRequest) (*GetReputerScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerScoreEma not implemented")
}
func (*UnimplementedQueryServiceServer) GetInferenceScoresUntilBlock(ctx context.Context, req *GetInferenceScoresUntilBlockRequest) (*GetInferenceScoresUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferenceScoresUntilBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetPreviousTopicQuantileForecasterScoreEma(ctx context.Context, req *GetPreviousTopicQuantileForecasterScoreEmaRequest) (*GetPreviousTopicQuantileForecasterScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicQuantileForecasterScoreEma not implemented")
}
func (*UnimplementedQueryServiceServer) GetPreviousTopicQuantileInfererScoreEma(ctx context.Context, req *GetPreviousTopicQuantileInfererScoreEmaRequest) (*GetPreviousTopicQuantileInfererScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicQuantileInfererScoreEma not implemented")
}
func (*UnimplementedQueryServiceServer) GetPreviousTopicQuantileReputerScoreEma(ctx context.Context, req *GetPreviousTopicQuantileReputerScoreEmaRequest) (*GetPreviousTopicQuantileReputerScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicQuantileReputerScoreEma not implemented")
}
func (*UnimplementedQueryServiceServer) GetWorkerInferenceScoresAtBlock(ctx context.Context, req *GetWorkerInferenceScoresAtBlockRequest) (*GetWorkerInferenceScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerInferenceScoresAtBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetCurrentLowestInfererScore(ctx context.Context, req *GetCurrentLowestInfererScoreRequest) (*GetCurrentLowestInfererScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLowestInfererScore not implemented")
}
func (*UnimplementedQueryServiceServer) GetForecastScoresUntilBlock(ctx context.Context, req *GetForecastScoresUntilBlockRequest) (*GetForecastScoresUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastScoresUntilBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetWorkerForecastScoresAtBlock(ctx context.Context, req *GetWorkerForecastScoresAtBlockRequest) (*GetWorkerForecastScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerForecastScoresAtBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetCurrentLowestForecasterScore(ctx context.Context, req *GetCurrentLowestForecasterScoreRequest) (*GetCurrentLowestForecasterScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLowestForecasterScore not implemented")
}
func (*UnimplementedQueryServiceServer) GetReputersScoresAtBlock(ctx context.Context, req *GetReputersScoresAtBlockRequest) (*GetReputersScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputersScoresAtBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetCurrentLowestReputerScore(ctx context.Context, req *GetCurrentLowestReputerScoreRequest) (*GetCurrentLowestReputerScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLowestReputerScore not implemented")
}
func (*UnimplementedQueryServiceServer) GetListeningCoefficient(ctx context.Context, req *GetListeningCoefficientRequest) (*GetListeningCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeningCoefficient not implemented")
}
func (*UnimplementedQueryServiceServer) GetPreviousReputerRewardFraction(ctx context.Context, req *GetPreviousReputerRewardFractionRequest) (*GetPreviousReputerRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousReputerRewardFraction not implemented")
}
func (*UnimplementedQueryServiceServer) GetPreviousInferenceRewardFraction(ctx context.Context, req *GetPreviousInferenceRewardFractionRequest) (*GetPreviousInferenceRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousInferenceRewardFraction not implemented")
}
func (*UnimplementedQueryServiceServer) GetPreviousForecastRewardFraction(ctx context.Context, req *GetPreviousForecastRewardFractionRequest) (*GetPreviousForecastRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousForecastRewardFraction not implemented")
}
func (*UnimplementedQueryServiceServer) GetPreviousPercentageRewardToStakedReputers(ctx context.Context, req *GetPreviousPercentageRewardToStakedReputersRequest) (*GetPreviousPercentageRewardToStakedReputersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousPercentageRewardToStakedReputers not implemented")
}
func (*UnimplementedQueryServiceServer) GetTotalRewardToDistribute(ctx context.Context, req *GetTotalRewardToDistributeRequest) (*GetTotalRewardToDistributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalRewardToDistribute not implemented")
}
func (*UnimplementedQueryServiceServer) GetNaiveInfererNetworkRegret(ctx context.Context, req *GetNaiveInfererNetworkRegretRequest) (*GetNaiveInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNaiveInfererNetworkRegret not implemented")
}
func (*UnimplementedQueryServiceServer) GetOneOutInfererInfererNetworkRegret(ctx context.Context, req *GetOneOutInfererInfererNetworkRegretRequest) (*GetOneOutInfererInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutInfererInfererNetworkRegret not implemented")
}
func (*UnimplementedQueryServiceServer) GetOneOutInfererForecasterNetworkRegret(ctx context.Context, req *GetOneOutInfererForecasterNetworkRegretRequest) (*GetOneOutInfererForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutInfererForecasterNetworkRegret not implemented")
}
func (*UnimplementedQueryServiceServer) GetOneOutForecasterInfererNetworkRegret(ctx context.Context, req *GetOneOutForecasterInfererNetworkRegretRequest) (*GetOneOutForecasterInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutForecasterInfererNetworkRegret not implemented")
}
func (*UnimplementedQueryServiceServer) GetOneOutForecasterForecasterNetworkRegret(ctx context.Context, req *GetOneOutForecasterForecasterNetworkRegretRequest) (*GetOneOutForecasterForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutForecasterForecasterNetworkRegret not implemented")
}
func (*UnimplementedQueryServiceServer) GetActiveTopicsAtBlock(ctx context.Context, req *GetActiveTopicsAtBlockRequest) (*GetActiveTopicsAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTopicsAtBlock not implemented")
}
func (*UnimplementedQueryServiceServer) GetNextChurningBlockByTopicId(ctx context.Context, req *GetNextChurningBlockByTopicIdRequest) (*GetNextChurningBlockByTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextChurningBlockByTopicId not implemented")
}
func (*UnimplementedQueryServiceServer) GetCountInfererInclusionsInTopic(ctx context.Context, req *GetCountInfererInclusionsInTopicRequest) (*GetCountInfererInclusionsInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountInfererInclusionsInTopic not implemented")
}
func (*UnimplementedQueryServiceServer) GetCountForecasterInclusionsInTopic(ctx context.Context, req *GetCountForecasterInclusionsInTopicRequest) (*GetCountForecasterInclusionsInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountForecasterInclusionsInTopic not implemented")
}
func (*UnimplementedQueryServiceServer) GetActiveReputersForTopic(ctx context.Context, req *GetActiveReputersForTopicRequest) (*GetActiveReputersForTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveReputersForTopic not implemented")
}
func (*UnimplementedQueryServiceServer) GetActiveForecastersForTopic(ctx context.Context, req *GetActiveForecastersForTopicRequest) (*GetActiveForecastersForTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveForecastersForTopic not implemented")
}
func (*UnimplementedQueryServiceServer) GetActiveInferersForTopic(ctx context.Context, req *GetActiveInferersForTopicRequest) (*GetActiveInferersForTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveInferersForTopic not implemented")
}
func (*UnimplementedQueryServiceServer) IsWhitelistedGlobalWorker(ctx context.Context, req *IsWhitelistedGlobalWorkerRequest) (*IsWhitelistedGlobalWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistedGlobalWorker not implemented")
}
func (*UnimplementedQueryServiceServer) IsWhitelistedGlobalReputer(ctx context.Context, req *IsWhitelistedGlobalReputerRequest) (*IsWhitelistedGlobalReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistedGlobalReputer not implemented")
}
func (*UnimplementedQueryServiceServer) IsWhitelistedGlobalAdmin(ctx context.Context, req *IsWhitelistedGlobalAdminRequest) (*IsWhitelistedGlobalAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistedGlobalAdmin not implemented")
}
func (*UnimplementedQueryServiceServer) IsTopicWorkerWhitelistEnabled(ctx context.Context, req *IsTopicWorkerWhitelistEnabledRequest) (*IsTopicWorkerWhitelistEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTopicWorkerWhitelistEnabled not implemented")
}
func (*UnimplementedQueryServiceServer) IsTopicReputerWhitelistEnabled(ctx context.Context, req *IsTopicReputerWhitelistEnabledRequest) (*IsTopicReputerWhitelistEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTopicReputerWhitelistEnabled not implemented")
}
func (*UnimplementedQueryServiceServer) IsWhitelistedTopicCreator(ctx context.Context, req *IsWhitelistedTopicCreatorRequest) (*IsWhitelistedTopicCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistedTopicCreator not implemented")
}
func (*UnimplementedQueryServiceServer) IsWhitelistedGlobalActor(ctx context.Context, req *IsWhitelistedGlobalActorRequest) (*IsWhitelistedGlobalActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistedGlobalActor not implemented")
}
func (*UnimplementedQueryServiceServer) IsWhitelistedTopicWorker(ctx context.Context, req *IsWhitelistedTopicWorkerRequest) (*IsWhitelistedTopicWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistedTopicWorker not implemented")
}
func (*UnimplementedQueryServiceServer) IsWhitelistedTopicReputer(ctx context.Context, req *IsWhitelistedTopicReputerRequest) (*IsWhitelistedTopicReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistedTopicReputer not implemented")
}
func (*UnimplementedQueryServiceServer) CanUpdateAllGlobalWhitelists(ctx context.Context, req *CanUpdateAllGlobalWhitelistsRequest) (*CanUpdateAllGlobalWhitelistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpdateAllGlobalWhitelists not implemented")
}
func (*UnimplementedQueryServiceServer) CanUpdateGlobalWorkerWhitelist(ctx context.Context, req *CanUpdateGlobalWorkerWhitelistRequest) (*CanUpdateGlobalWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpdateGlobalWorkerWhitelist not implemented")
}
func (*UnimplementedQueryServiceServer) CanUpdateGlobalReputerWhitelist(ctx context.Context, req *CanUpdateGlobalReputerWhitelistRequest) (*CanUpdateGlobalReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpdateGlobalReputerWhitelist not implemented")
}
func (*UnimplementedQueryServiceServer) CanUpdateParams(ctx context.Context, req *CanUpdateParamsRequest) (*CanUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpdateParams not implemented")
}
func (*UnimplementedQueryServiceServer) CanUpdateTopicWhitelist(ctx context.Context, req *CanUpdateTopicWhitelistRequest) (*CanUpdateTopicWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpdateTopicWhitelist not implemented")
}
func (*UnimplementedQueryServiceServer) CanCreateTopic(ctx context.Context, req *CanCreateTopicRequest) (*CanCreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanCreateTopic not implemented")
}
func (*UnimplementedQueryServiceServer) CanSubmitWorkerPayload(ctx context.Context, req *CanSubmitWorkerPayloadRequest) (*CanSubmitWorkerPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanSubmitWorkerPayload not implemented")
}
func (*UnimplementedQueryServiceServer) CanSubmitReputerPayload(ctx context.Context, req *CanSubmitReputerPayloadRequest) (*CanSubmitReputerPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanSubmitReputerPayload not implemented")
}
func (*UnimplementedQueryServiceServer) GetTopicInitialInfererEmaScore(ctx context.Context, req *GetTopicInitialInfererEmaScoreRequest) (*GetTopicInitialInfererEmaScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicInitialInfererEmaScore not implemented")
}
func (*UnimplementedQueryServiceServer) GetTopicInitialForecasterEmaScore(ctx context.Context, req *GetTopicInitialForecasterEmaScoreRequest) (*GetTopicInitialForecasterEmaScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicInitialForecasterEmaScore not implemented")
}
func (*UnimplementedQueryServiceServer) GetTopicInitialReputerEmaScore(ctx context.Context, req *GetTopicInitialReputerEmaScoreRequest) (*GetTopicInitialReputerEmaScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicInitialReputerEmaScore not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetParams(ctx, req.(*GetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNextTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNextTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetNextTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNextTopicId(ctx, req.(*GetNextTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopic(ctx, req.(*GetTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetWorkerLatestInferenceByTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerLatestInferenceByTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetWorkerLatestInferenceByTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetWorkerLatestInferenceByTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetWorkerLatestInferenceByTopicId(ctx, req.(*GetWorkerLatestInferenceByTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetInferencesAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetInferencesAtBlock(ctx, req.(*GetInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetLatestTopicInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestTopicInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetLatestTopicInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetLatestTopicInferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetLatestTopicInferences(ctx, req.(*GetLatestTopicInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForecastsAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastsAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForecastsAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetForecastsAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForecastsAtBlock(ctx, req.(*GetForecastsAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNetworkLossBundleAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkLossBundleAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNetworkLossBundleAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetNetworkLossBundleAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNetworkLossBundleAtBlock(ctx, req.(*GetNetworkLossBundleAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTotalStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTotalStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTotalStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTotalStake(ctx, req.(*GetTotalStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetReputerStakeInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputerStakeInTopic(ctx, req.(*GetReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetMultiReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetMultiReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetMultiReputerStakeInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetMultiReputerStakeInTopic(ctx, req.(*GetMultiReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeFromReputerInTopicInSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeFromReputerInTopicInSelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeFromReputerInTopicInSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetStakeFromReputerInTopicInSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeFromReputerInTopicInSelf(ctx, req.(*GetStakeFromReputerInTopicInSelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetDelegateStakeInTopicInReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeInTopicInReputer(ctx, req.(*GetDelegateStakeInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeFromDelegatorInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeFromDelegatorInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeFromDelegatorInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetStakeFromDelegatorInTopicInReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeFromDelegatorInTopicInReputer(ctx, req.(*GetStakeFromDelegatorInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeFromDelegatorInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeFromDelegatorInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeFromDelegatorInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetStakeFromDelegatorInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeFromDelegatorInTopic(ctx, req.(*GetStakeFromDelegatorInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTopicStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicStake(ctx, req.(*GetTopicStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeRemovalsUpUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeRemovalsUpUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeRemovalsUpUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetStakeRemovalsUpUntilBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeRemovalsUpUntilBlock(ctx, req.(*GetStakeRemovalsUpUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeRemovalsUpUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeRemovalsUpUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeRemovalsUpUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetDelegateStakeRemovalsUpUntilBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeRemovalsUpUntilBlock(ctx, req.(*GetDelegateStakeRemovalsUpUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetStakeRemovalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeRemovalInfo(ctx, req.(*GetStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetDelegateStakeRemovalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeRemovalInfo(ctx, req.(*GetDelegateStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetWorkerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetWorkerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetWorkerNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetWorkerNodeInfo(ctx, req.(*GetWorkerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetReputerNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputerNodeInfo(ctx, req.(*GetReputerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWorkerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWorkerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWorkerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWorkerRegisteredInTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWorkerRegisteredInTopicId(ctx, req.(*IsWorkerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsReputerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReputerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsReputerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsReputerRegisteredInTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsReputerRegisteredInTopicId(ctx, req.(*IsReputerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNetworkInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNetworkInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetNetworkInferencesAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNetworkInferencesAtBlock(ctx, req.(*GetNetworkInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNetworkInferencesAtBlockOutlierResistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkInferencesAtBlockOutlierResistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNetworkInferencesAtBlockOutlierResistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetNetworkInferencesAtBlockOutlierResistant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNetworkInferencesAtBlockOutlierResistant(ctx, req.(*GetNetworkInferencesAtBlockOutlierResistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetLatestNetworkInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestNetworkInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetLatestNetworkInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetLatestNetworkInferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetLatestNetworkInferences(ctx, req.(*GetLatestNetworkInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetLatestNetworkInferencesOutlierResistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestNetworkInferencesOutlierResistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetLatestNetworkInferencesOutlierResistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetLatestNetworkInferencesOutlierResistant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetLatestNetworkInferencesOutlierResistant(ctx, req.(*GetLatestNetworkInferencesOutlierResistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetLatestAvailableNetworkInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestAvailableNetworkInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetLatestAvailableNetworkInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetLatestAvailableNetworkInferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetLatestAvailableNetworkInferences(ctx, req.(*GetLatestAvailableNetworkInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetLatestAvailableNetworkInferencesOutlierResistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestAvailableNetworkInferencesOutlierResistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetLatestAvailableNetworkInferencesOutlierResistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetLatestAvailableNetworkInferencesOutlierResistant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetLatestAvailableNetworkInferencesOutlierResistant(ctx, req.(*GetLatestAvailableNetworkInferencesOutlierResistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWorkerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWorkerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWorkerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWorkerNonceUnfulfilled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWorkerNonceUnfulfilled(ctx, req.(*IsWorkerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsReputerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReputerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsReputerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsReputerNonceUnfulfilled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsReputerNonceUnfulfilled(ctx, req.(*IsReputerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetUnfulfilledWorkerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnfulfilledWorkerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetUnfulfilledWorkerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetUnfulfilledWorkerNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetUnfulfilledWorkerNonces(ctx, req.(*GetUnfulfilledWorkerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetUnfulfilledReputerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnfulfilledReputerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetUnfulfilledReputerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetUnfulfilledReputerNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetUnfulfilledReputerNonces(ctx, req.(*GetUnfulfilledReputerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetInfererNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetInfererNetworkRegret(ctx, req.(*GetInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetForecasterNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForecasterNetworkRegret(ctx, req.(*GetForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneInForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneInForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneInForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetOneInForecasterNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneInForecasterNetworkRegret(ctx, req.(*GetOneInForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWhitelistAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWhitelistAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWhitelistAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWhitelistAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWhitelistAdmin(ctx, req.(*IsWhitelistAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicLastWorkerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicLastWorkerCommitInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicLastWorkerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTopicLastWorkerCommitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicLastWorkerCommitInfo(ctx, req.(*GetTopicLastWorkerCommitInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicLastReputerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicLastReputerCommitInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicLastReputerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTopicLastReputerCommitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicLastReputerCommitInfo(ctx, req.(*GetTopicLastReputerCommitInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicRewardNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicRewardNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicRewardNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTopicRewardNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicRewardNonce(ctx, req.(*GetTopicRewardNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputerLossBundlesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputerLossBundlesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputerLossBundlesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetReputerLossBundlesAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputerLossBundlesAtBlock(ctx, req.(*GetReputerLossBundlesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeReputerAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeReputerAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeReputerAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetStakeReputerAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeReputerAuthority(ctx, req.(*GetStakeReputerAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakePlacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakePlacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakePlacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetDelegateStakePlacement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakePlacement(ctx, req.(*GetDelegateStakePlacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeUponReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeUponReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeUponReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetDelegateStakeUponReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeUponReputer(ctx, req.(*GetDelegateStakeUponReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateRewardPerShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateRewardPerShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateRewardPerShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetDelegateRewardPerShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateRewardPerShare(ctx, req.(*GetDelegateRewardPerShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeRemovalForReputerAndTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeRemovalForReputerAndTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeRemovalForReputerAndTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetStakeRemovalForReputerAndTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeRemovalForReputerAndTopicId(ctx, req.(*GetStakeRemovalForReputerAndTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeRemoval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeRemovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeRemoval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetDelegateStakeRemoval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeRemoval(ctx, req.(*GetDelegateStakeRemovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousTopicWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousTopicWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousTopicWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetPreviousTopicWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousTopicWeight(ctx, req.(*GetPreviousTopicWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTotalSumPreviousTopicWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalSumPreviousTopicWeightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTotalSumPreviousTopicWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTotalSumPreviousTopicWeights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTotalSumPreviousTopicWeights(ctx, req.(*GetTotalSumPreviousTopicWeightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TopicExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TopicExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/TopicExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TopicExists(ctx, req.(*TopicExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsTopicActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTopicActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsTopicActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsTopicActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsTopicActive(ctx, req.(*IsTopicActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicFeeRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicFeeRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicFeeRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTopicFeeRevenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicFeeRevenue(ctx, req.(*GetTopicFeeRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetInfererScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfererScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetInfererScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetInfererScoreEma",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetInfererScoreEma(ctx, req.(*GetInfererScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForecasterScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecasterScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForecasterScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetForecasterScoreEma",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForecasterScoreEma(ctx, req.(*GetForecasterScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputerScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputerScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputerScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetReputerScoreEma",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputerScoreEma(ctx, req.(*GetReputerScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetInferenceScoresUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInferenceScoresUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetInferenceScoresUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetInferenceScoresUntilBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetInferenceScoresUntilBlock(ctx, req.(*GetInferenceScoresUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousTopicQuantileForecasterScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousTopicQuantileForecasterScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileForecasterScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetPreviousTopicQuantileForecasterScoreEma",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileForecasterScoreEma(ctx, req.(*GetPreviousTopicQuantileForecasterScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousTopicQuantileInfererScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousTopicQuantileInfererScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileInfererScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetPreviousTopicQuantileInfererScoreEma",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileInfererScoreEma(ctx, req.(*GetPreviousTopicQuantileInfererScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousTopicQuantileReputerScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousTopicQuantileReputerScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileReputerScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetPreviousTopicQuantileReputerScoreEma",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileReputerScoreEma(ctx, req.(*GetPreviousTopicQuantileReputerScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetWorkerInferenceScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerInferenceScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetWorkerInferenceScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetWorkerInferenceScoresAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetWorkerInferenceScoresAtBlock(ctx, req.(*GetWorkerInferenceScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCurrentLowestInfererScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentLowestInfererScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCurrentLowestInfererScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetCurrentLowestInfererScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCurrentLowestInfererScore(ctx, req.(*GetCurrentLowestInfererScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForecastScoresUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastScoresUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForecastScoresUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetForecastScoresUntilBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForecastScoresUntilBlock(ctx, req.(*GetForecastScoresUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetWorkerForecastScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerForecastScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetWorkerForecastScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetWorkerForecastScoresAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetWorkerForecastScoresAtBlock(ctx, req.(*GetWorkerForecastScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCurrentLowestForecasterScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentLowestForecasterScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCurrentLowestForecasterScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetCurrentLowestForecasterScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCurrentLowestForecasterScore(ctx, req.(*GetCurrentLowestForecasterScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputersScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputersScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputersScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetReputersScoresAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputersScoresAtBlock(ctx, req.(*GetReputersScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCurrentLowestReputerScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentLowestReputerScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCurrentLowestReputerScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetCurrentLowestReputerScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCurrentLowestReputerScore(ctx, req.(*GetCurrentLowestReputerScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetListeningCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListeningCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetListeningCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetListeningCoefficient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetListeningCoefficient(ctx, req.(*GetListeningCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousReputerRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousReputerRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousReputerRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetPreviousReputerRewardFraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousReputerRewardFraction(ctx, req.(*GetPreviousReputerRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousInferenceRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousInferenceRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousInferenceRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetPreviousInferenceRewardFraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousInferenceRewardFraction(ctx, req.(*GetPreviousInferenceRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousForecastRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousForecastRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousForecastRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetPreviousForecastRewardFraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousForecastRewardFraction(ctx, req.(*GetPreviousForecastRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousPercentageRewardToStakedReputers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousPercentageRewardToStakedReputersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousPercentageRewardToStakedReputers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetPreviousPercentageRewardToStakedReputers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousPercentageRewardToStakedReputers(ctx, req.(*GetPreviousPercentageRewardToStakedReputersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTotalRewardToDistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalRewardToDistributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTotalRewardToDistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTotalRewardToDistribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTotalRewardToDistribute(ctx, req.(*GetTotalRewardToDistributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNaiveInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNaiveInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNaiveInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetNaiveInfererNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNaiveInfererNetworkRegret(ctx, req.(*GetNaiveInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneOutInfererInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneOutInfererInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneOutInfererInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetOneOutInfererInfererNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneOutInfererInfererNetworkRegret(ctx, req.(*GetOneOutInfererInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneOutInfererForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneOutInfererForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneOutInfererForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetOneOutInfererForecasterNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneOutInfererForecasterNetworkRegret(ctx, req.(*GetOneOutInfererForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneOutForecasterInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneOutForecasterInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneOutForecasterInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetOneOutForecasterInfererNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneOutForecasterInfererNetworkRegret(ctx, req.(*GetOneOutForecasterInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneOutForecasterForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneOutForecasterForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneOutForecasterForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetOneOutForecasterForecasterNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneOutForecasterForecasterNetworkRegret(ctx, req.(*GetOneOutForecasterForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetActiveTopicsAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveTopicsAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetActiveTopicsAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetActiveTopicsAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetActiveTopicsAtBlock(ctx, req.(*GetActiveTopicsAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNextChurningBlockByTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextChurningBlockByTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNextChurningBlockByTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetNextChurningBlockByTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNextChurningBlockByTopicId(ctx, req.(*GetNextChurningBlockByTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCountInfererInclusionsInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountInfererInclusionsInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCountInfererInclusionsInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetCountInfererInclusionsInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCountInfererInclusionsInTopic(ctx, req.(*GetCountInfererInclusionsInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCountForecasterInclusionsInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountForecasterInclusionsInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCountForecasterInclusionsInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetCountForecasterInclusionsInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCountForecasterInclusionsInTopic(ctx, req.(*GetCountForecasterInclusionsInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetActiveReputersForTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveReputersForTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetActiveReputersForTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetActiveReputersForTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetActiveReputersForTopic(ctx, req.(*GetActiveReputersForTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetActiveForecastersForTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveForecastersForTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetActiveForecastersForTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetActiveForecastersForTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetActiveForecastersForTopic(ctx, req.(*GetActiveForecastersForTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetActiveInferersForTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveInferersForTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetActiveInferersForTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetActiveInferersForTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetActiveInferersForTopic(ctx, req.(*GetActiveInferersForTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWhitelistedGlobalWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWhitelistedGlobalWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWhitelistedGlobalWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWhitelistedGlobalWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWhitelistedGlobalWorker(ctx, req.(*IsWhitelistedGlobalWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWhitelistedGlobalReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWhitelistedGlobalReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWhitelistedGlobalReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWhitelistedGlobalReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWhitelistedGlobalReputer(ctx, req.(*IsWhitelistedGlobalReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWhitelistedGlobalAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWhitelistedGlobalAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWhitelistedGlobalAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWhitelistedGlobalAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWhitelistedGlobalAdmin(ctx, req.(*IsWhitelistedGlobalAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsTopicWorkerWhitelistEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTopicWorkerWhitelistEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsTopicWorkerWhitelistEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsTopicWorkerWhitelistEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsTopicWorkerWhitelistEnabled(ctx, req.(*IsTopicWorkerWhitelistEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsTopicReputerWhitelistEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTopicReputerWhitelistEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsTopicReputerWhitelistEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsTopicReputerWhitelistEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsTopicReputerWhitelistEnabled(ctx, req.(*IsTopicReputerWhitelistEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWhitelistedTopicCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWhitelistedTopicCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWhitelistedTopicCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWhitelistedTopicCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWhitelistedTopicCreator(ctx, req.(*IsWhitelistedTopicCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWhitelistedGlobalActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWhitelistedGlobalActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWhitelistedGlobalActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWhitelistedGlobalActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWhitelistedGlobalActor(ctx, req.(*IsWhitelistedGlobalActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWhitelistedTopicWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWhitelistedTopicWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWhitelistedTopicWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWhitelistedTopicWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWhitelistedTopicWorker(ctx, req.(*IsWhitelistedTopicWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWhitelistedTopicReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWhitelistedTopicReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWhitelistedTopicReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/IsWhitelistedTopicReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWhitelistedTopicReputer(ctx, req.(*IsWhitelistedTopicReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CanUpdateAllGlobalWhitelists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpdateAllGlobalWhitelistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CanUpdateAllGlobalWhitelists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/CanUpdateAllGlobalWhitelists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CanUpdateAllGlobalWhitelists(ctx, req.(*CanUpdateAllGlobalWhitelistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CanUpdateGlobalWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpdateGlobalWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CanUpdateGlobalWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/CanUpdateGlobalWorkerWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CanUpdateGlobalWorkerWhitelist(ctx, req.(*CanUpdateGlobalWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CanUpdateGlobalReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpdateGlobalReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CanUpdateGlobalReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/CanUpdateGlobalReputerWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CanUpdateGlobalReputerWhitelist(ctx, req.(*CanUpdateGlobalReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CanUpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpdateParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CanUpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/CanUpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CanUpdateParams(ctx, req.(*CanUpdateParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CanUpdateTopicWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpdateTopicWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CanUpdateTopicWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/CanUpdateTopicWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CanUpdateTopicWhitelist(ctx, req.(*CanUpdateTopicWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CanCreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanCreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CanCreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/CanCreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CanCreateTopic(ctx, req.(*CanCreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CanSubmitWorkerPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanSubmitWorkerPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CanSubmitWorkerPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/CanSubmitWorkerPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CanSubmitWorkerPayload(ctx, req.(*CanSubmitWorkerPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CanSubmitReputerPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanSubmitReputerPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CanSubmitReputerPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/CanSubmitReputerPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CanSubmitReputerPayload(ctx, req.(*CanSubmitReputerPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicInitialInfererEmaScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicInitialInfererEmaScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicInitialInfererEmaScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTopicInitialInfererEmaScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicInitialInfererEmaScore(ctx, req.(*GetTopicInitialInfererEmaScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicInitialForecasterEmaScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicInitialForecasterEmaScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicInitialForecasterEmaScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTopicInitialForecasterEmaScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicInitialForecasterEmaScore(ctx, req.(*GetTopicInitialForecasterEmaScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicInitialReputerEmaScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicInitialReputerEmaScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicInitialReputerEmaScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v7.QueryService/GetTopicInitialReputerEmaScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicInitialReputerEmaScore(ctx, req.(*GetTopicInitialReputerEmaScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var QueryService_serviceDesc = _QueryService_serviceDesc
var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emissions.v7.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParams",
			Handler:    _QueryService_GetParams_Handler,
		},
		{
			MethodName: "GetNextTopicId",
			Handler:    _QueryService_GetNextTopicId_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _QueryService_GetTopic_Handler,
		},
		{
			MethodName: "GetWorkerLatestInferenceByTopicId",
			Handler:    _QueryService_GetWorkerLatestInferenceByTopicId_Handler,
		},
		{
			MethodName: "GetInferencesAtBlock",
			Handler:    _QueryService_GetInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetLatestTopicInferences",
			Handler:    _QueryService_GetLatestTopicInferences_Handler,
		},
		{
			MethodName: "GetForecastsAtBlock",
			Handler:    _QueryService_GetForecastsAtBlock_Handler,
		},
		{
			MethodName: "GetNetworkLossBundleAtBlock",
			Handler:    _QueryService_GetNetworkLossBundleAtBlock_Handler,
		},
		{
			MethodName: "GetTotalStake",
			Handler:    _QueryService_GetTotalStake_Handler,
		},
		{
			MethodName: "GetReputerStakeInTopic",
			Handler:    _QueryService_GetReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetMultiReputerStakeInTopic",
			Handler:    _QueryService_GetMultiReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetStakeFromReputerInTopicInSelf",
			Handler:    _QueryService_GetStakeFromReputerInTopicInSelf_Handler,
		},
		{
			MethodName: "GetDelegateStakeInTopicInReputer",
			Handler:    _QueryService_GetDelegateStakeInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopicInReputer",
			Handler:    _QueryService_GetStakeFromDelegatorInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopic",
			Handler:    _QueryService_GetStakeFromDelegatorInTopic_Handler,
		},
		{
			MethodName: "GetTopicStake",
			Handler:    _QueryService_GetTopicStake_Handler,
		},
		{
			MethodName: "GetStakeRemovalsUpUntilBlock",
			Handler:    _QueryService_GetStakeRemovalsUpUntilBlock_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalsUpUntilBlock",
			Handler:    _QueryService_GetDelegateStakeRemovalsUpUntilBlock_Handler,
		},
		{
			MethodName: "GetStakeRemovalInfo",
			Handler:    _QueryService_GetStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalInfo",
			Handler:    _QueryService_GetDelegateStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetWorkerNodeInfo",
			Handler:    _QueryService_GetWorkerNodeInfo_Handler,
		},
		{
			MethodName: "GetReputerNodeInfo",
			Handler:    _QueryService_GetReputerNodeInfo_Handler,
		},
		{
			MethodName: "IsWorkerRegisteredInTopicId",
			Handler:    _QueryService_IsWorkerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "IsReputerRegisteredInTopicId",
			Handler:    _QueryService_IsReputerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "GetNetworkInferencesAtBlock",
			Handler:    _QueryService_GetNetworkInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetNetworkInferencesAtBlockOutlierResistant",
			Handler:    _QueryService_GetNetworkInferencesAtBlockOutlierResistant_Handler,
		},
		{
			MethodName: "GetLatestNetworkInferences",
			Handler:    _QueryService_GetLatestNetworkInferences_Handler,
		},
		{
			MethodName: "GetLatestNetworkInferencesOutlierResistant",
			Handler:    _QueryService_GetLatestNetworkInferencesOutlierResistant_Handler,
		},
		{
			MethodName: "GetLatestAvailableNetworkInferences",
			Handler:    _QueryService_GetLatestAvailableNetworkInferences_Handler,
		},
		{
			MethodName: "GetLatestAvailableNetworkInferencesOutlierResistant",
			Handler:    _QueryService_GetLatestAvailableNetworkInferencesOutlierResistant_Handler,
		},
		{
			MethodName: "IsWorkerNonceUnfulfilled",
			Handler:    _QueryService_IsWorkerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "IsReputerNonceUnfulfilled",
			Handler:    _QueryService_IsReputerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "GetUnfulfilledWorkerNonces",
			Handler:    _QueryService_GetUnfulfilledWorkerNonces_Handler,
		},
		{
			MethodName: "GetUnfulfilledReputerNonces",
			Handler:    _QueryService_GetUnfulfilledReputerNonces_Handler,
		},
		{
			MethodName: "GetInfererNetworkRegret",
			Handler:    _QueryService_GetInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetForecasterNetworkRegret",
			Handler:    _QueryService_GetForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneInForecasterNetworkRegret",
			Handler:    _QueryService_GetOneInForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "IsWhitelistAdmin",
			Handler:    _QueryService_IsWhitelistAdmin_Handler,
		},
		{
			MethodName: "GetTopicLastWorkerCommitInfo",
			Handler:    _QueryService_GetTopicLastWorkerCommitInfo_Handler,
		},
		{
			MethodName: "GetTopicLastReputerCommitInfo",
			Handler:    _QueryService_GetTopicLastReputerCommitInfo_Handler,
		},
		{
			MethodName: "GetTopicRewardNonce",
			Handler:    _QueryService_GetTopicRewardNonce_Handler,
		},
		{
			MethodName: "GetReputerLossBundlesAtBlock",
			Handler:    _QueryService_GetReputerLossBundlesAtBlock_Handler,
		},
		{
			MethodName: "GetStakeReputerAuthority",
			Handler:    _QueryService_GetStakeReputerAuthority_Handler,
		},
		{
			MethodName: "GetDelegateStakePlacement",
			Handler:    _QueryService_GetDelegateStakePlacement_Handler,
		},
		{
			MethodName: "GetDelegateStakeUponReputer",
			Handler:    _QueryService_GetDelegateStakeUponReputer_Handler,
		},
		{
			MethodName: "GetDelegateRewardPerShare",
			Handler:    _QueryService_GetDelegateRewardPerShare_Handler,
		},
		{
			MethodName: "GetStakeRemovalForReputerAndTopicId",
			Handler:    _QueryService_GetStakeRemovalForReputerAndTopicId_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemoval",
			Handler:    _QueryService_GetDelegateStakeRemoval_Handler,
		},
		{
			MethodName: "GetPreviousTopicWeight",
			Handler:    _QueryService_GetPreviousTopicWeight_Handler,
		},
		{
			MethodName: "GetTotalSumPreviousTopicWeights",
			Handler:    _QueryService_GetTotalSumPreviousTopicWeights_Handler,
		},
		{
			MethodName: "TopicExists",
			Handler:    _QueryService_TopicExists_Handler,
		},
		{
			MethodName: "IsTopicActive",
			Handler:    _QueryService_IsTopicActive_Handler,
		},
		{
			MethodName: "GetTopicFeeRevenue",
			Handler:    _QueryService_GetTopicFeeRevenue_Handler,
		},
		{
			MethodName: "GetInfererScoreEma",
			Handler:    _QueryService_GetInfererScoreEma_Handler,
		},
		{
			MethodName: "GetForecasterScoreEma",
			Handler:    _QueryService_GetForecasterScoreEma_Handler,
		},
		{
			MethodName: "GetReputerScoreEma",
			Handler:    _QueryService_GetReputerScoreEma_Handler,
		},
		{
			MethodName: "GetInferenceScoresUntilBlock",
			Handler:    _QueryService_GetInferenceScoresUntilBlock_Handler,
		},
		{
			MethodName: "GetPreviousTopicQuantileForecasterScoreEma",
			Handler:    _QueryService_GetPreviousTopicQuantileForecasterScoreEma_Handler,
		},
		{
			MethodName: "GetPreviousTopicQuantileInfererScoreEma",
			Handler:    _QueryService_GetPreviousTopicQuantileInfererScoreEma_Handler,
		},
		{
			MethodName: "GetPreviousTopicQuantileReputerScoreEma",
			Handler:    _QueryService_GetPreviousTopicQuantileReputerScoreEma_Handler,
		},
		{
			MethodName: "GetWorkerInferenceScoresAtBlock",
			Handler:    _QueryService_GetWorkerInferenceScoresAtBlock_Handler,
		},
		{
			MethodName: "GetCurrentLowestInfererScore",
			Handler:    _QueryService_GetCurrentLowestInfererScore_Handler,
		},
		{
			MethodName: "GetForecastScoresUntilBlock",
			Handler:    _QueryService_GetForecastScoresUntilBlock_Handler,
		},
		{
			MethodName: "GetWorkerForecastScoresAtBlock",
			Handler:    _QueryService_GetWorkerForecastScoresAtBlock_Handler,
		},
		{
			MethodName: "GetCurrentLowestForecasterScore",
			Handler:    _QueryService_GetCurrentLowestForecasterScore_Handler,
		},
		{
			MethodName: "GetReputersScoresAtBlock",
			Handler:    _QueryService_GetReputersScoresAtBlock_Handler,
		},
		{
			MethodName: "GetCurrentLowestReputerScore",
			Handler:    _QueryService_GetCurrentLowestReputerScore_Handler,
		},
		{
			MethodName: "GetListeningCoefficient",
			Handler:    _QueryService_GetListeningCoefficient_Handler,
		},
		{
			MethodName: "GetPreviousReputerRewardFraction",
			Handler:    _QueryService_GetPreviousReputerRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousInferenceRewardFraction",
			Handler:    _QueryService_GetPreviousInferenceRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousForecastRewardFraction",
			Handler:    _QueryService_GetPreviousForecastRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousPercentageRewardToStakedReputers",
			Handler:    _QueryService_GetPreviousPercentageRewardToStakedReputers_Handler,
		},
		{
			MethodName: "GetTotalRewardToDistribute",
			Handler:    _QueryService_GetTotalRewardToDistribute_Handler,
		},
		{
			MethodName: "GetNaiveInfererNetworkRegret",
			Handler:    _QueryService_GetNaiveInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutInfererInfererNetworkRegret",
			Handler:    _QueryService_GetOneOutInfererInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutInfererForecasterNetworkRegret",
			Handler:    _QueryService_GetOneOutInfererForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutForecasterInfererNetworkRegret",
			Handler:    _QueryService_GetOneOutForecasterInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutForecasterForecasterNetworkRegret",
			Handler:    _QueryService_GetOneOutForecasterForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetActiveTopicsAtBlock",
			Handler:    _QueryService_GetActiveTopicsAtBlock_Handler,
		},
		{
			MethodName: "GetNextChurningBlockByTopicId",
			Handler:    _QueryService_GetNextChurningBlockByTopicId_Handler,
		},
		{
			MethodName: "GetCountInfererInclusionsInTopic",
			Handler:    _QueryService_GetCountInfererInclusionsInTopic_Handler,
		},
		{
			MethodName: "GetCountForecasterInclusionsInTopic",
			Handler:    _QueryService_GetCountForecasterInclusionsInTopic_Handler,
		},
		{
			MethodName: "GetActiveReputersForTopic",
			Handler:    _QueryService_GetActiveReputersForTopic_Handler,
		},
		{
			MethodName: "GetActiveForecastersForTopic",
			Handler:    _QueryService_GetActiveForecastersForTopic_Handler,
		},
		{
			MethodName: "GetActiveInferersForTopic",
			Handler:    _QueryService_GetActiveInferersForTopic_Handler,
		},
		{
			MethodName: "IsWhitelistedGlobalWorker",
			Handler:    _QueryService_IsWhitelistedGlobalWorker_Handler,
		},
		{
			MethodName: "IsWhitelistedGlobalReputer",
			Handler:    _QueryService_IsWhitelistedGlobalReputer_Handler,
		},
		{
			MethodName: "IsWhitelistedGlobalAdmin",
			Handler:    _QueryService_IsWhitelistedGlobalAdmin_Handler,
		},
		{
			MethodName: "IsTopicWorkerWhitelistEnabled",
			Handler:    _QueryService_IsTopicWorkerWhitelistEnabled_Handler,
		},
		{
			MethodName: "IsTopicReputerWhitelistEnabled",
			Handler:    _QueryService_IsTopicReputerWhitelistEnabled_Handler,
		},
		{
			MethodName: "IsWhitelistedTopicCreator",
			Handler:    _QueryService_IsWhitelistedTopicCreator_Handler,
		},
		{
			MethodName: "IsWhitelistedGlobalActor",
			Handler:    _QueryService_IsWhitelistedGlobalActor_Handler,
		},
		{
			MethodName: "IsWhitelistedTopicWorker",
			Handler:    _QueryService_IsWhitelistedTopicWorker_Handler,
		},
		{
			MethodName: "IsWhitelistedTopicReputer",
			Handler:    _QueryService_IsWhitelistedTopicReputer_Handler,
		},
		{
			MethodName: "CanUpdateAllGlobalWhitelists",
			Handler:    _QueryService_CanUpdateAllGlobalWhitelists_Handler,
		},
		{
			MethodName: "CanUpdateGlobalWorkerWhitelist",
			Handler:    _QueryService_CanUpdateGlobalWorkerWhitelist_Handler,
		},
		{
			MethodName: "CanUpdateGlobalReputerWhitelist",
			Handler:    _QueryService_CanUpdateGlobalReputerWhitelist_Handler,
		},
		{
			MethodName: "CanUpdateParams",
			Handler:    _QueryService_CanUpdateParams_Handler,
		},
		{
			MethodName: "CanUpdateTopicWhitelist",
			Handler:    _QueryService_CanUpdateTopicWhitelist_Handler,
		},
		{
			MethodName: "CanCreateTopic",
			Handler:    _QueryService_CanCreateTopic_Handler,
		},
		{
			MethodName: "CanSubmitWorkerPayload",
			Handler:    _QueryService_CanSubmitWorkerPayload_Handler,
		},
		{
			MethodName: "CanSubmitReputerPayload",
			Handler:    _QueryService_CanSubmitReputerPayload_Handler,
		},
		{
			MethodName: "GetTopicInitialInfererEmaScore",
			Handler:    _QueryService_GetTopicInitialInfererEmaScore_Handler,
		},
		{
			MethodName: "GetTopicInitialForecasterEmaScore",
			Handler:    _QueryService_GetTopicInitialForecasterEmaScore_Handler,
		},
		{
			MethodName: "GetTopicInitialReputerEmaScore",
			Handler:    _QueryService_GetTopicInitialReputerEmaScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emissions/v7/query.proto",
}

func (m *IsWhitelistedGlobalWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedGlobalWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedGlobalWorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedGlobalWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedGlobalWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedGlobalWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWhitelistedGlobalWorker {
		i--
		if m.IsWhitelistedGlobalWorker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedGlobalReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedGlobalReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedGlobalReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedGlobalReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedGlobalReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedGlobalReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWhitelistedGlobalReputer {
		i--
		if m.IsWhitelistedGlobalReputer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedGlobalAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedGlobalAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedGlobalAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedGlobalAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedGlobalAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedGlobalAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWhitelistedGlobalAdmin {
		i--
		if m.IsWhitelistedGlobalAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsTopicWorkerWhitelistEnabledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTopicWorkerWhitelistEnabledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTopicWorkerWhitelistEnabledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsTopicWorkerWhitelistEnabledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTopicWorkerWhitelistEnabledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTopicWorkerWhitelistEnabledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsTopicWorkerWhitelistEnabled {
		i--
		if m.IsTopicWorkerWhitelistEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsTopicReputerWhitelistEnabledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTopicReputerWhitelistEnabledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTopicReputerWhitelistEnabledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsTopicReputerWhitelistEnabledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTopicReputerWhitelistEnabledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTopicReputerWhitelistEnabledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsTopicReputerWhitelistEnabled {
		i--
		if m.IsTopicReputerWhitelistEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedTopicCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedTopicCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedTopicCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedTopicCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedTopicCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedTopicCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWhitelistedTopicCreator {
		i--
		if m.IsWhitelistedTopicCreator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedGlobalActorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedGlobalActorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedGlobalActorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedGlobalActorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedGlobalActorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedGlobalActorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWhitelistedGlobalActor {
		i--
		if m.IsWhitelistedGlobalActor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedTopicWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedTopicWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedTopicWorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedTopicWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedTopicWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedTopicWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWhitelistedTopicWorker {
		i--
		if m.IsWhitelistedTopicWorker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedTopicReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedTopicReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedTopicReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistedTopicReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistedTopicReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistedTopicReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWhitelistedTopicReputer {
		i--
		if m.IsWhitelistedTopicReputer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateAllGlobalWhitelistsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateAllGlobalWhitelistsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateAllGlobalWhitelistsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateAllGlobalWhitelistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateAllGlobalWhitelistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateAllGlobalWhitelistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanUpdateAllGlobalWhitelists {
		i--
		if m.CanUpdateAllGlobalWhitelists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateGlobalWorkerWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateGlobalWorkerWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateGlobalWorkerWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateGlobalWorkerWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateGlobalWorkerWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateGlobalWorkerWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanUpdateGlobalWorkerWhitelist {
		i--
		if m.CanUpdateGlobalWorkerWhitelist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateGlobalReputerWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateGlobalReputerWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateGlobalReputerWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateGlobalReputerWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateGlobalReputerWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateGlobalReputerWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanUpdateGlobalReputerWhitelist {
		i--
		if m.CanUpdateGlobalReputerWhitelist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanUpdateParams {
		i--
		if m.CanUpdateParams {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateTopicWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateTopicWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateTopicWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpdateTopicWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpdateTopicWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpdateTopicWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanUpdateTopicWhitelist {
		i--
		if m.CanUpdateTopicWhitelist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanCreateTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanCreateTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanCreateTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CanCreateTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanCreateTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanCreateTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanCreateTopic {
		i--
		if m.CanCreateTopic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanSubmitWorkerPayloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanSubmitWorkerPayloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanSubmitWorkerPayloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanSubmitWorkerPayloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanSubmitWorkerPayloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanSubmitWorkerPayloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanSubmitWorkerPayload {
		i--
		if m.CanSubmitWorkerPayload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanSubmitReputerPayloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanSubmitReputerPayloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanSubmitReputerPayloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanSubmitReputerPayloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanSubmitReputerPayloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanSubmitReputerPayloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanSubmitReputerPayload {
		i--
		if m.CanSubmitReputerPayload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCountInfererInclusionsInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCountInfererInclusionsInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCountInfererInclusionsInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCountInfererInclusionsInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCountInfererInclusionsInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCountInfererInclusionsInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCountForecasterInclusionsInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCountForecasterInclusionsInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCountForecasterInclusionsInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCountForecasterInclusionsInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCountForecasterInclusionsInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCountForecasterInclusionsInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNaiveInfererNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNaiveInfererNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNaiveInfererNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNaiveInfererNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNaiveInfererNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNaiveInfererNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOneOutInfererInfererNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneOutInfererInfererNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneOutInfererInfererNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OneOutInferer) > 0 {
		i -= len(m.OneOutInferer)
		copy(dAtA[i:], m.OneOutInferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OneOutInferer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOneOutInfererInfererNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneOutInfererInfererNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneOutInfererInfererNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOneOutInfererForecasterNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneOutInfererForecasterNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneOutInfererForecasterNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OneOutInferer) > 0 {
		i -= len(m.OneOutInferer)
		copy(dAtA[i:], m.OneOutInferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OneOutInferer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOneOutInfererForecasterNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneOutInfererForecasterNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneOutInfererForecasterNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOneOutForecasterInfererNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneOutForecasterInfererNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneOutForecasterInfererNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OneOutForecaster) > 0 {
		i -= len(m.OneOutForecaster)
		copy(dAtA[i:], m.OneOutForecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OneOutForecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOneOutForecasterInfererNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneOutForecasterInfererNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneOutForecasterInfererNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOneOutForecasterForecasterNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneOutForecasterForecasterNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneOutForecasterForecasterNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OneOutForecaster) > 0 {
		i -= len(m.OneOutForecaster)
		copy(dAtA[i:], m.OneOutForecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OneOutForecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOneOutForecasterForecasterNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneOutForecasterForecasterNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneOutForecasterForecasterNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTotalStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTotalStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetReputerStakeInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputerStakeInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputerStakeInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReputerStakeInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputerStakeInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputerStakeInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetMultiReputerStakeInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiReputerStakeInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMultiReputerStakeInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetMultiReputerStakeInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiReputerStakeInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMultiReputerStakeInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeFromReputerInTopicInSelfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeFromReputerInTopicInSelfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeFromReputerInTopicInSelfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReputerAddress) > 0 {
		i -= len(m.ReputerAddress)
		copy(dAtA[i:], m.ReputerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReputerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeFromReputerInTopicInSelfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeFromReputerInTopicInSelfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeFromReputerInTopicInSelfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeInTopicInReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeInTopicInReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeInTopicInReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReputerAddress) > 0 {
		i -= len(m.ReputerAddress)
		copy(dAtA[i:], m.ReputerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReputerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeInTopicInReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeInTopicInReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeInTopicInReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetStakeFromDelegatorInTopicInReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeFromDelegatorInTopicInReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeFromDelegatorInTopicInReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReputerAddress) > 0 {
		i -= len(m.ReputerAddress)
		copy(dAtA[i:], m.ReputerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReputerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeFromDelegatorInTopicInReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeFromDelegatorInTopicInReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeFromDelegatorInTopicInReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetStakeFromDelegatorInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeFromDelegatorInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeFromDelegatorInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeFromDelegatorInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeFromDelegatorInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeFromDelegatorInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTopicStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetNetworkLossBundleAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkLossBundleAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNetworkLossBundleAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNetworkLossBundleAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkLossBundleAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNetworkLossBundleAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LossBundle != nil {
		{
			size, err := m.LossBundle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNextTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNextTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNextTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetNextTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNextTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNextTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextTopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextTopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EffectiveRevenue) > 0 {
		i -= len(m.EffectiveRevenue)
		copy(dAtA[i:], m.EffectiveRevenue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EffectiveRevenue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x12
	}
	if m.Topic != nil {
		{
			size, err := m.Topic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveTopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveTopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveTopicsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveTopicsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetInferencesAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInferencesAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInferencesAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInferencesAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInferencesAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInferencesAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inferences != nil {
		{
			size, err := m.Inferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestTopicInferencesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestTopicInferencesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestTopicInferencesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestTopicInferencesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestTopicInferencesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestTopicInferencesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Inferences != nil {
		{
			size, err := m.Inferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetForecastsAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForecastsAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetForecastsAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetForecastsAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForecastsAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetForecastsAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forecasts != nil {
		{
			size, err := m.Forecasts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkerLatestInferenceByTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerLatestInferenceByTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerLatestInferenceByTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerAddress) > 0 {
		i -= len(m.WorkerAddress)
		copy(dAtA[i:], m.WorkerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WorkerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkerLatestInferenceByTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerLatestInferenceByTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerLatestInferenceByTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestInference != nil {
		{
			size, err := m.LatestInference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkerNodeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerNodeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerNodeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkerNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerNodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReputerNodeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputerNodeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputerNodeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *GetReputerNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputerNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputerNodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNetworkInferencesAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkInferencesAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNetworkInferencesAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeightLastInference != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeightLastInference))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeightLastInference != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeightLastInference))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestNetworkInferencesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestNetworkInferencesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestNetworkInferencesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestNetworkInferencesOutlierResistantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestNetworkInferencesOutlierResistantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestNetworkInferencesOutlierResistantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestAvailableNetworkInferencesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestAvailableNetworkInferencesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestAvailableNetworkInferencesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWorkerNonceUnfulfilledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWorkerNonceUnfulfilledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWorkerNonceUnfulfilledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWorkerNonceUnfulfilledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWorkerNonceUnfulfilledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWorkerNonceUnfulfilledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWorkerNonceUnfulfilled {
		i--
		if m.IsWorkerNonceUnfulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUnfulfilledReputerNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUnfulfilledReputerNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUnfulfilledReputerNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUnfulfilledReputerNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUnfulfilledReputerNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUnfulfilledReputerNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonces != nil {
		{
			size, err := m.Nonces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUnfulfilledWorkerNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUnfulfilledWorkerNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUnfulfilledWorkerNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUnfulfilledWorkerNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUnfulfilledWorkerNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUnfulfilledWorkerNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonces != nil {
		{
			size, err := m.Nonces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetInfererNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfererNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfererNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActorId) > 0 {
		i -= len(m.ActorId)
		copy(dAtA[i:], m.ActorId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ActorId)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInfererNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfererNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfererNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetForecasterNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForecasterNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetForecasterNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetForecasterNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForecasterNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetForecasterNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOneInForecasterNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneInForecasterNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneInForecasterNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOneInForecasterNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOneInForecasterNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOneInForecasterNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsReputerNonceUnfulfilledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsReputerNonceUnfulfilledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsReputerNonceUnfulfilledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsReputerNonceUnfulfilledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsReputerNonceUnfulfilledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsReputerNonceUnfulfilledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReputerNonceUnfulfilled {
		i--
		if m.IsReputerNonceUnfulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNetworkInferencesAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkInferencesAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNetworkInferencesAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestNetworkInferencesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestNetworkInferencesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestNetworkInferencesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfidenceIntervalValues) > 0 {
		for iNdEx := len(m.ConfidenceIntervalValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalValues[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalValues[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for iNdEx := len(m.ConfidenceIntervalRawPercentiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalRawPercentiles[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalRawPercentiles[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.LossBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LossBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.InferenceBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InferenceBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ForecasterWeights) > 0 {
		for iNdEx := len(m.ForecasterWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecasterWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InfererWeights) > 0 {
		for iNdEx := len(m.InfererWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfererWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestNetworkInferencesOutlierResistantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestNetworkInferencesOutlierResistantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestNetworkInferencesOutlierResistantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfidenceIntervalValues) > 0 {
		for iNdEx := len(m.ConfidenceIntervalValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalValues[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalValues[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for iNdEx := len(m.ConfidenceIntervalRawPercentiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalRawPercentiles[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalRawPercentiles[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.LossBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LossBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.InferenceBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InferenceBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ForecasterWeights) > 0 {
		for iNdEx := len(m.ForecasterWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecasterWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InfererWeights) > 0 {
		for iNdEx := len(m.InfererWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfererWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestAvailableNetworkInferencesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestAvailableNetworkInferencesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestAvailableNetworkInferencesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfidenceIntervalValues) > 0 {
		for iNdEx := len(m.ConfidenceIntervalValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalValues[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalValues[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for iNdEx := len(m.ConfidenceIntervalRawPercentiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalRawPercentiles[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalRawPercentiles[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.LossBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LossBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.InferenceBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InferenceBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ForecasterWeights) > 0 {
		for iNdEx := len(m.ForecasterWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecasterWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InfererWeights) > 0 {
		for iNdEx := len(m.InfererWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfererWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfidenceIntervalValues) > 0 {
		for iNdEx := len(m.ConfidenceIntervalValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalValues[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalValues[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for iNdEx := len(m.ConfidenceIntervalRawPercentiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalRawPercentiles[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalRawPercentiles[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.LossBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LossBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.InferenceBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InferenceBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ForecasterWeights) > 0 {
		for iNdEx := len(m.ForecasterWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecasterWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InfererWeights) > 0 {
		for iNdEx := len(m.InfererWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfererWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsWorkerRegisteredInTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWorkerRegisteredInTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWorkerRegisteredInTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWorkerRegisteredInTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWorkerRegisteredInTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWorkerRegisteredInTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsReputerRegisteredInTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsReputerRegisteredInTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsReputerRegisteredInTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsReputerRegisteredInTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsReputerRegisteredInTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsReputerRegisteredInTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsWhitelistAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsWhitelistAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsWhitelistAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAdmin {
		i--
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeRemovalsUpUntilBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeRemovalsUpUntilBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeRemovalsUpUntilBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeRemovalsUpUntilBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeRemovalsUpUntilBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeRemovalsUpUntilBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for iNdEx := len(m.Removals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for iNdEx := len(m.Removals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeRemovalInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeRemovalInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeRemovalInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeRemovalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeRemovalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeRemovalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removal != nil {
		{
			size, err := m.Removal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeRemovalInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeRemovalInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeRemovalInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeRemovalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeRemovalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeRemovalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removal != nil {
		{
			size, err := m.Removal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicLastWorkerCommitInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicLastWorkerCommitInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicLastWorkerCommitInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicLastWorkerCommitInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicLastWorkerCommitInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicLastWorkerCommitInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommit != nil {
		{
			size, err := m.LastCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicLastReputerCommitInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicLastReputerCommitInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicLastReputerCommitInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicLastReputerCommitInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicLastReputerCommitInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicLastReputerCommitInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommit != nil {
		{
			size, err := m.LastCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicRewardNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicRewardNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicRewardNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicRewardNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicRewardNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicRewardNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReputerLossBundlesAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputerLossBundlesAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputerLossBundlesAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReputerLossBundlesAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputerLossBundlesAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputerLossBundlesAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LossBundles != nil {
		{
			size, err := m.LossBundles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeReputerAuthorityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeReputerAuthorityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeReputerAuthorityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeReputerAuthorityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeReputerAuthorityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeReputerAuthorityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Authority.Size()
		i -= size
		if _, err := m.Authority.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakePlacementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakePlacementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakePlacementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakePlacementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakePlacementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakePlacementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelegatorInfo != nil {
		{
			size, err := m.DelegatorInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeUponReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeUponReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeUponReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeUponReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeUponReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeUponReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Stake.Size()
		i -= size
		if _, err := m.Stake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetDelegateRewardPerShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateRewardPerShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateRewardPerShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateRewardPerShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateRewardPerShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateRewardPerShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardPerShare.Size()
		i -= size
		if _, err := m.RewardPerShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetStakeRemovalForReputerAndTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeRemovalForReputerAndTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeRemovalForReputerAndTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStakeRemovalForReputerAndTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStakeRemovalForReputerAndTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStakeRemovalForReputerAndTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRemovalInfo != nil {
		{
			size, err := m.StakeRemovalInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeRemovalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeRemovalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeRemovalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDelegateStakeRemovalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelegateStakeRemovalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelegateStakeRemovalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRemovalInfo != nil {
		{
			size, err := m.StakeRemovalInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousTopicWeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousTopicWeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousTopicWeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousTopicWeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousTopicWeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousTopicWeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotFound {
		i--
		if m.NotFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTotalSumPreviousTopicWeightsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalSumPreviousTopicWeightsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalSumPreviousTopicWeightsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTotalSumPreviousTopicWeightsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalSumPreviousTopicWeightsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalSumPreviousTopicWeightsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TopicExistsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicExistsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicExistsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicExistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicExistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicExistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsTopicActiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTopicActiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTopicActiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsTopicActiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsTopicActiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsTopicActiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicFeeRevenueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicFeeRevenueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicFeeRevenueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicFeeRevenueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicFeeRevenueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicFeeRevenueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeRevenue.Size()
		i -= size
		if _, err := m.FeeRevenue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetInfererScoreEmaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfererScoreEmaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfererScoreEmaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInfererScoreEmaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfererScoreEmaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfererScoreEmaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetForecasterScoreEmaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForecasterScoreEmaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetForecasterScoreEmaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetForecasterScoreEmaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForecasterScoreEmaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetForecasterScoreEmaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReputerScoreEmaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputerScoreEmaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputerScoreEmaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReputerScoreEmaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputerScoreEmaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputerScoreEmaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetInferenceScoresUntilBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInferenceScoresUntilBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInferenceScoresUntilBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInferenceScoresUntilBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInferenceScoresUntilBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInferenceScoresUntilBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetWorkerInferenceScoresAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerInferenceScoresAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerInferenceScoresAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkerInferenceScoresAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerInferenceScoresAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerInferenceScoresAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scores != nil {
		{
			size, err := m.Scores.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentLowestInfererScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentLowestInfererScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentLowestInfererScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentLowestInfererScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentLowestInfererScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentLowestInfererScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetForecastScoresUntilBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForecastScoresUntilBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetForecastScoresUntilBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetForecastScoresUntilBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetForecastScoresUntilBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetForecastScoresUntilBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkerForecastScoresAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerForecastScoresAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerForecastScoresAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkerForecastScoresAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerForecastScoresAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerForecastScoresAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scores != nil {
		{
			size, err := m.Scores.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentLowestForecasterScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentLowestForecasterScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentLowestForecasterScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentLowestForecasterScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentLowestForecasterScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentLowestForecasterScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReputersScoresAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputersScoresAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputersScoresAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReputersScoresAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReputersScoresAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReputersScoresAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scores != nil {
		{
			size, err := m.Scores.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentLowestReputerScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentLowestReputerScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentLowestReputerScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentLowestReputerScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentLowestReputerScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentLowestReputerScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetListeningCoefficientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListeningCoefficientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetListeningCoefficientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetListeningCoefficientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListeningCoefficientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetListeningCoefficientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ListeningCoefficient != nil {
		{
			size, err := m.ListeningCoefficient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousReputerRewardFractionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousReputerRewardFractionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousReputerRewardFractionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousReputerRewardFractionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousReputerRewardFractionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousReputerRewardFractionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotFound {
		i--
		if m.NotFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.RewardFraction.Size()
		i -= size
		if _, err := m.RewardFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetPreviousInferenceRewardFractionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousInferenceRewardFractionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousInferenceRewardFractionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousInferenceRewardFractionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousInferenceRewardFractionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousInferenceRewardFractionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotFound {
		i--
		if m.NotFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.RewardFraction.Size()
		i -= size
		if _, err := m.RewardFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetPreviousForecastRewardFractionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousForecastRewardFractionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousForecastRewardFractionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPreviousForecastRewardFractionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousForecastRewardFractionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousForecastRewardFractionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotFound {
		i--
		if m.NotFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.RewardFraction.Size()
		i -= size
		if _, err := m.RewardFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetPreviousPercentageRewardToStakedReputersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousPercentageRewardToStakedReputersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousPercentageRewardToStakedReputersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPreviousPercentageRewardToStakedReputersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreviousPercentageRewardToStakedReputersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreviousPercentageRewardToStakedReputersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PercentageReward.Size()
		i -= size
		if _, err := m.PercentageReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTotalRewardToDistributeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalRewardToDistributeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalRewardToDistributeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTotalRewardToDistributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalRewardToDistributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalRewardToDistributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalReward.Size()
		i -= size
		if _, err := m.TotalReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetActiveTopicsAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveTopicsAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveTopicsAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveTopicsAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveTopicsAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveTopicsAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNextChurningBlockByTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNextChurningBlockByTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNextChurningBlockByTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNextChurningBlockByTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNextChurningBlockByTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNextChurningBlockByTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveReputersForTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveReputersForTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveReputersForTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveReputersForTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveReputersForTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveReputersForTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputers) > 0 {
		for iNdEx := len(m.Reputers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Reputers[iNdEx])
			copy(dAtA[i:], m.Reputers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveForecastersForTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveForecastersForTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveForecastersForTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveForecastersForTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveForecastersForTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveForecastersForTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecasters) > 0 {
		for iNdEx := len(m.Forecasters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Forecasters[iNdEx])
			copy(dAtA[i:], m.Forecasters[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Forecasters[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveInferersForTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveInferersForTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveInferersForTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActiveInferersForTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveInferersForTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActiveInferersForTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferers) > 0 {
		for iNdEx := len(m.Inferers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Inferers[iNdEx])
			copy(dAtA[i:], m.Inferers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Inferers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicInitialInfererEmaScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicInitialInfererEmaScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicInitialInfererEmaScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicInitialInfererEmaScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicInitialInfererEmaScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicInitialInfererEmaScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Score.Size()
		i -= size
		if _, err := m.Score.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTopicInitialForecasterEmaScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicInitialForecasterEmaScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicInitialForecasterEmaScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicInitialForecasterEmaScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicInitialForecasterEmaScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicInitialForecasterEmaScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Score.Size()
		i -= size
		if _, err := m.Score.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTopicInitialReputerEmaScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicInitialReputerEmaScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicInitialReputerEmaScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTopicInitialReputerEmaScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTopicInitialReputerEmaScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTopicInitialReputerEmaScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Score.Size()
		i -= size
		if _, err := m.Score.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IsWhitelistedGlobalWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsWhitelistedGlobalWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWhitelistedGlobalWorker {
		n += 2
	}
	return n
}

func (m *IsWhitelistedGlobalReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsWhitelistedGlobalReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWhitelistedGlobalReputer {
		n += 2
	}
	return n
}

func (m *IsWhitelistedGlobalAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsWhitelistedGlobalAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWhitelistedGlobalAdmin {
		n += 2
	}
	return n
}

func (m *IsTopicWorkerWhitelistEnabledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *IsTopicWorkerWhitelistEnabledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsTopicWorkerWhitelistEnabled {
		n += 2
	}
	return n
}

func (m *IsTopicReputerWhitelistEnabledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *IsTopicReputerWhitelistEnabledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsTopicReputerWhitelistEnabled {
		n += 2
	}
	return n
}

func (m *IsWhitelistedTopicCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsWhitelistedTopicCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWhitelistedTopicCreator {
		n += 2
	}
	return n
}

func (m *IsWhitelistedGlobalActorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsWhitelistedGlobalActorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWhitelistedGlobalActor {
		n += 2
	}
	return n
}

func (m *IsWhitelistedTopicWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsWhitelistedTopicWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWhitelistedTopicWorker {
		n += 2
	}
	return n
}

func (m *IsWhitelistedTopicReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsWhitelistedTopicReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWhitelistedTopicReputer {
		n += 2
	}
	return n
}

func (m *CanUpdateAllGlobalWhitelistsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CanUpdateAllGlobalWhitelistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanUpdateAllGlobalWhitelists {
		n += 2
	}
	return n
}

func (m *CanUpdateGlobalWorkerWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CanUpdateGlobalWorkerWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanUpdateGlobalWorkerWhitelist {
		n += 2
	}
	return n
}

func (m *CanUpdateGlobalReputerWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CanUpdateGlobalReputerWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanUpdateGlobalReputerWhitelist {
		n += 2
	}
	return n
}

func (m *CanUpdateParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CanUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanUpdateParams {
		n += 2
	}
	return n
}

func (m *CanUpdateTopicWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CanUpdateTopicWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanUpdateTopicWhitelist {
		n += 2
	}
	return n
}

func (m *CanCreateTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CanCreateTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanCreateTopic {
		n += 2
	}
	return n
}

func (m *CanSubmitWorkerPayloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CanSubmitWorkerPayloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanSubmitWorkerPayload {
		n += 2
	}
	return n
}

func (m *CanSubmitReputerPayloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CanSubmitReputerPayloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanSubmitReputerPayload {
		n += 2
	}
	return n
}

func (m *GetCountInfererInclusionsInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCountInfererInclusionsInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *GetCountForecasterInclusionsInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCountForecasterInclusionsInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *GetNaiveInfererNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetNaiveInfererNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneOutInfererInfererNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.OneOutInferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneOutInfererInfererNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneOutInfererForecasterNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.OneOutInferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneOutInfererForecasterNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneOutForecasterInfererNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.OneOutForecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneOutForecasterInfererNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneOutForecasterForecasterNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.OneOutForecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneOutForecasterForecasterNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetTotalStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTotalStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetReputerStakeInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetReputerStakeInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetMultiReputerStakeInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetMultiReputerStakeInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetStakeFromReputerInTopicInSelfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReputerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetStakeFromReputerInTopicInSelfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetDelegateStakeInTopicInReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReputerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetDelegateStakeInTopicInReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetStakeFromDelegatorInTopicInReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ReputerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetStakeFromDelegatorInTopicInReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetStakeFromDelegatorInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetStakeFromDelegatorInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetTopicStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetTopicStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetNetworkLossBundleAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetNetworkLossBundleAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LossBundle != nil {
		l = m.LossBundle.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetNextTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetNextTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextTopicId != 0 {
		n += 1 + sovQuery(uint64(m.NextTopicId))
	}
	return n
}

func (m *GetTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EffectiveRevenue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetActiveTopicsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetActiveTopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetInferencesAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetInferencesAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inferences != nil {
		l = m.Inferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetLatestTopicInferencesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetLatestTopicInferencesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inferences != nil {
		l = m.Inferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetForecastsAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetForecastsAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Forecasts != nil {
		l = m.Forecasts.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetWorkerLatestInferenceByTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.WorkerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetWorkerLatestInferenceByTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestInference != nil {
		l = m.LatestInference.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetWorkerNodeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetWorkerNodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetReputerNodeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetReputerNodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetNetworkInferencesAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeightLastInference != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeightLastInference))
	}
	return n
}

func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeightLastInference != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeightLastInference))
	}
	return n
}

func (m *GetLatestNetworkInferencesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetLatestNetworkInferencesOutlierResistantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetLatestAvailableNetworkInferencesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *IsWorkerNonceUnfulfilledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *IsWorkerNonceUnfulfilledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWorkerNonceUnfulfilled {
		n += 2
	}
	return n
}

func (m *GetUnfulfilledReputerNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetUnfulfilledReputerNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonces != nil {
		l = m.Nonces.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetUnfulfilledWorkerNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetUnfulfilledWorkerNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonces != nil {
		l = m.Nonces.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetInfererNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.ActorId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetInfererNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetForecasterNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetForecasterNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneInForecasterNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetOneInForecasterNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsReputerNonceUnfulfilledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *IsReputerNonceUnfulfilledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsReputerNonceUnfulfilled {
		n += 2
	}
	return n
}

func (m *GetNetworkInferencesAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetLatestNetworkInferencesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.InfererWeights) > 0 {
		for _, e := range m.InfererWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ForecasterWeights) > 0 {
		for _, e := range m.ForecasterWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.InferenceBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.InferenceBlockHeight))
	}
	if m.LossBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.LossBlockHeight))
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for _, e := range m.ConfidenceIntervalRawPercentiles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ConfidenceIntervalValues) > 0 {
		for _, e := range m.ConfidenceIntervalValues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetLatestNetworkInferencesOutlierResistantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.InfererWeights) > 0 {
		for _, e := range m.InfererWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ForecasterWeights) > 0 {
		for _, e := range m.ForecasterWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.InferenceBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.InferenceBlockHeight))
	}
	if m.LossBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.LossBlockHeight))
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for _, e := range m.ConfidenceIntervalRawPercentiles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ConfidenceIntervalValues) > 0 {
		for _, e := range m.ConfidenceIntervalValues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetLatestAvailableNetworkInferencesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.InfererWeights) > 0 {
		for _, e := range m.InfererWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ForecasterWeights) > 0 {
		for _, e := range m.ForecasterWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.InferenceBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.InferenceBlockHeight))
	}
	if m.LossBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.LossBlockHeight))
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for _, e := range m.ConfidenceIntervalRawPercentiles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ConfidenceIntervalValues) > 0 {
		for _, e := range m.ConfidenceIntervalValues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.InfererWeights) > 0 {
		for _, e := range m.InfererWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ForecasterWeights) > 0 {
		for _, e := range m.ForecasterWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.InferenceBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.InferenceBlockHeight))
	}
	if m.LossBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.LossBlockHeight))
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for _, e := range m.ConfidenceIntervalRawPercentiles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ConfidenceIntervalValues) > 0 {
		for _, e := range m.ConfidenceIntervalValues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *IsWorkerRegisteredInTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsWorkerRegisteredInTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *IsReputerRegisteredInTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsReputerRegisteredInTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *IsWhitelistAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IsWhitelistAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAdmin {
		n += 2
	}
	return n
}

func (m *GetStakeRemovalsUpUntilBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetStakeRemovalsUpUntilBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for _, e := range m.Removals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for _, e := range m.Removals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetStakeRemovalInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetStakeRemovalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Removal != nil {
		l = m.Removal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDelegateStakeRemovalInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDelegateStakeRemovalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Removal != nil {
		l = m.Removal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetTopicLastWorkerCommitInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetTopicLastWorkerCommitInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastCommit != nil {
		l = m.LastCommit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetTopicLastReputerCommitInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetTopicLastReputerCommitInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastCommit != nil {
		l = m.LastCommit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetTopicRewardNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetTopicRewardNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *GetReputerLossBundlesAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetReputerLossBundlesAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LossBundles != nil {
		l = m.LossBundles.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetStakeReputerAuthorityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetStakeReputerAuthorityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Authority.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetDelegateStakePlacementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDelegateStakePlacementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegatorInfo != nil {
		l = m.DelegatorInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDelegateStakeUponReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDelegateStakeUponReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stake.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetDelegateRewardPerShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDelegateRewardPerShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardPerShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetStakeRemovalForReputerAndTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetStakeRemovalForReputerAndTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeRemovalInfo != nil {
		l = m.StakeRemovalInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDelegateStakeRemovalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDelegateStakeRemovalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeRemovalInfo != nil {
		l = m.StakeRemovalInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetPreviousTopicWeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetPreviousTopicWeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Weight.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.NotFound {
		n += 2
	}
	return n
}

func (m *GetTotalSumPreviousTopicWeightsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTotalSumPreviousTopicWeightsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Weight.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *TopicExistsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *TopicExistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	return n
}

func (m *IsTopicActiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *IsTopicActiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *GetTopicFeeRevenueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetTopicFeeRevenueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeRevenue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetInfererScoreEmaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetInfererScoreEmaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetForecasterScoreEmaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetForecasterScoreEmaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetReputerScoreEmaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetReputerScoreEmaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetInferenceScoresUntilBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetInferenceScoresUntilBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetWorkerInferenceScoresAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetWorkerInferenceScoresAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scores != nil {
		l = m.Scores.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCurrentLowestInfererScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetCurrentLowestInfererScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetForecastScoresUntilBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetForecastScoresUntilBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetWorkerForecastScoresAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetWorkerForecastScoresAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scores != nil {
		l = m.Scores.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCurrentLowestForecasterScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetCurrentLowestForecasterScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetReputersScoresAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetReputersScoresAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scores != nil {
		l = m.Scores.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCurrentLowestReputerScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetCurrentLowestReputerScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetListeningCoefficientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetListeningCoefficientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListeningCoefficient != nil {
		l = m.ListeningCoefficient.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetPreviousReputerRewardFractionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetPreviousReputerRewardFractionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardFraction.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.NotFound {
		n += 2
	}
	return n
}

func (m *GetPreviousInferenceRewardFractionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetPreviousInferenceRewardFractionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardFraction.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.NotFound {
		n += 2
	}
	return n
}

func (m *GetPreviousForecastRewardFractionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetPreviousForecastRewardFractionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardFraction.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.NotFound {
		n += 2
	}
	return n
}

func (m *GetPreviousPercentageRewardToStakedReputersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPreviousPercentageRewardToStakedReputersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PercentageReward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetTotalRewardToDistributeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTotalRewardToDistributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalReward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetActiveTopicsAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetActiveTopicsAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetNextChurningBlockByTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetNextChurningBlockByTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *GetActiveReputersForTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetActiveReputersForTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reputers) > 0 {
		for _, s := range m.Reputers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetActiveForecastersForTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetActiveForecastersForTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forecasters) > 0 {
		for _, s := range m.Forecasters {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetActiveInferersForTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetActiveInferersForTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inferers) > 0 {
		for _, s := range m.Inferers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetTopicInitialInfererEmaScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetTopicInitialInfererEmaScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Score.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetTopicInitialForecasterEmaScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetTopicInitialForecasterEmaScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Score.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetTopicInitialReputerEmaScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *GetTopicInitialReputerEmaScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Score.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IsWhitelistedGlobalWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedGlobalWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedGlobalWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedGlobalWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedGlobalWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedGlobalWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWhitelistedGlobalWorker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWhitelistedGlobalWorker = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedGlobalReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedGlobalReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedGlobalReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedGlobalReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedGlobalReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedGlobalReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWhitelistedGlobalReputer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWhitelistedGlobalReputer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedGlobalAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedGlobalAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedGlobalAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedGlobalAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedGlobalAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedGlobalAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWhitelistedGlobalAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWhitelistedGlobalAdmin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTopicWorkerWhitelistEnabledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsTopicWorkerWhitelistEnabledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsTopicWorkerWhitelistEnabledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTopicWorkerWhitelistEnabledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsTopicWorkerWhitelistEnabledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsTopicWorkerWhitelistEnabledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTopicWorkerWhitelistEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTopicWorkerWhitelistEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTopicReputerWhitelistEnabledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsTopicReputerWhitelistEnabledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsTopicReputerWhitelistEnabledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTopicReputerWhitelistEnabledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsTopicReputerWhitelistEnabledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsTopicReputerWhitelistEnabledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTopicReputerWhitelistEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTopicReputerWhitelistEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedTopicCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedTopicCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedTopicCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedTopicCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedTopicCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedTopicCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWhitelistedTopicCreator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWhitelistedTopicCreator = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedGlobalActorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedGlobalActorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedGlobalActorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedGlobalActorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedGlobalActorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedGlobalActorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWhitelistedGlobalActor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWhitelistedGlobalActor = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedTopicWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedTopicWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedTopicWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedTopicWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedTopicWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedTopicWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWhitelistedTopicWorker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWhitelistedTopicWorker = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedTopicReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedTopicReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedTopicReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistedTopicReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistedTopicReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistedTopicReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWhitelistedTopicReputer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWhitelistedTopicReputer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateAllGlobalWhitelistsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateAllGlobalWhitelistsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateAllGlobalWhitelistsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateAllGlobalWhitelistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateAllGlobalWhitelistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateAllGlobalWhitelistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateAllGlobalWhitelists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanUpdateAllGlobalWhitelists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateGlobalWorkerWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateGlobalWorkerWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateGlobalWorkerWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateGlobalWorkerWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateGlobalWorkerWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateGlobalWorkerWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateGlobalWorkerWhitelist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanUpdateGlobalWorkerWhitelist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateGlobalReputerWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateGlobalReputerWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateGlobalReputerWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateGlobalReputerWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateGlobalReputerWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateGlobalReputerWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateGlobalReputerWhitelist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanUpdateGlobalReputerWhitelist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateParams", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanUpdateParams = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateTopicWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateTopicWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateTopicWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpdateTopicWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpdateTopicWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpdateTopicWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUpdateTopicWhitelist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanUpdateTopicWhitelist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanCreateTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanCreateTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanCreateTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanCreateTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanCreateTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanCreateTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanCreateTopic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanCreateTopic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanSubmitWorkerPayloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanSubmitWorkerPayloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanSubmitWorkerPayloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanSubmitWorkerPayloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanSubmitWorkerPayloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanSubmitWorkerPayloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSubmitWorkerPayload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSubmitWorkerPayload = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanSubmitReputerPayloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanSubmitReputerPayloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanSubmitReputerPayloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanSubmitReputerPayloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanSubmitReputerPayloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanSubmitReputerPayloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSubmitReputerPayload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSubmitReputerPayload = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCountInfererInclusionsInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCountInfererInclusionsInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCountInfererInclusionsInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCountInfererInclusionsInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCountInfererInclusionsInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCountInfererInclusionsInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCountForecasterInclusionsInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCountForecasterInclusionsInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCountForecasterInclusionsInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCountForecasterInclusionsInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCountForecasterInclusionsInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCountForecasterInclusionsInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNaiveInfererNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNaiveInfererNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNaiveInfererNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNaiveInfererNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNaiveInfererNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNaiveInfererNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneOutInfererInfererNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneOutInfererInfererNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneOutInfererInfererNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutInferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutInferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneOutInfererInfererNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneOutInfererInfererNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneOutInfererInfererNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneOutInfererForecasterNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneOutInfererForecasterNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneOutInfererForecasterNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutInferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutInferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneOutInfererForecasterNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneOutInfererForecasterNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneOutInfererForecasterNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneOutForecasterInfererNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneOutForecasterInfererNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneOutForecasterInfererNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutForecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutForecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneOutForecasterInfererNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneOutForecasterInfererNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneOutForecasterInfererNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneOutForecasterForecasterNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneOutForecasterForecasterNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneOutForecasterForecasterNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutForecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutForecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneOutForecasterForecasterNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneOutForecasterForecasterNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneOutForecasterForecasterNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputerStakeInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputerStakeInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputerStakeInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputerStakeInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputerStakeInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputerStakeInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiReputerStakeInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiReputerStakeInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiReputerStakeInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiReputerStakeInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiReputerStakeInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiReputerStakeInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, &StakeInfo{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeFromReputerInTopicInSelfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeFromReputerInTopicInSelfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeFromReputerInTopicInSelfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeFromReputerInTopicInSelfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeFromReputerInTopicInSelfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeFromReputerInTopicInSelfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeInTopicInReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeInTopicInReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeInTopicInReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeInTopicInReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeInTopicInReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeInTopicInReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeFromDelegatorInTopicInReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeFromDelegatorInTopicInReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeFromDelegatorInTopicInReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeFromDelegatorInTopicInReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeFromDelegatorInTopicInReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeFromDelegatorInTopicInReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeFromDelegatorInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeFromDelegatorInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeFromDelegatorInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeFromDelegatorInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeFromDelegatorInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeFromDelegatorInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkLossBundleAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkLossBundleAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkLossBundleAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkLossBundleAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkLossBundleAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkLossBundleAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBundle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LossBundle == nil {
				m.LossBundle = &ValueBundle{}
			}
			if err := m.LossBundle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNextTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNextTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNextTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNextTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNextTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNextTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTopicId", wireType)
			}
			m.NextTopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveRevenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveRevenue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveTopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveTopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveTopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &SimpleCursorPaginationRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &SimpleCursorPaginationResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInferencesAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInferencesAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInferencesAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInferencesAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInferencesAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInferencesAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inferences == nil {
				m.Inferences = &Inferences{}
			}
			if err := m.Inferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestTopicInferencesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestTopicInferencesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestTopicInferencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestTopicInferencesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestTopicInferencesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestTopicInferencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inferences == nil {
				m.Inferences = &Inferences{}
			}
			if err := m.Inferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForecastsAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForecastsAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForecastsAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForecastsAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForecastsAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForecastsAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forecasts == nil {
				m.Forecasts = &Forecasts{}
			}
			if err := m.Forecasts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerLatestInferenceByTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerLatestInferenceByTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerLatestInferenceByTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerLatestInferenceByTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerLatestInferenceByTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerLatestInferenceByTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestInference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestInference == nil {
				m.LatestInference = &Inference{}
			}
			if err := m.LatestInference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerNodeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerNodeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerNodeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeInfo == nil {
				m.NodeInfo = &OffchainNode{}
			}
			if err := m.NodeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputerNodeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputerNodeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputerNodeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputerNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputerNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputerNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeInfo == nil {
				m.NodeInfo = &OffchainNode{}
			}
			if err := m.NodeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkInferencesAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkInferencesAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkInferencesAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightLastInference", wireType)
			}
			m.BlockHeightLastInference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightLastInference |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkInferencesAtBlockOutlierResistantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkInferencesAtBlockOutlierResistantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkInferencesAtBlockOutlierResistantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightLastInference", wireType)
			}
			m.BlockHeightLastInference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightLastInference |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestNetworkInferencesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestNetworkInferencesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestNetworkInferencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestNetworkInferencesOutlierResistantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestNetworkInferencesOutlierResistantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestNetworkInferencesOutlierResistantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestAvailableNetworkInferencesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestAvailableNetworkInferencesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestAvailableNetworkInferencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestAvailableNetworkInferencesOutlierResistantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestAvailableNetworkInferencesOutlierResistantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWorkerNonceUnfulfilledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWorkerNonceUnfulfilledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWorkerNonceUnfulfilledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWorkerNonceUnfulfilledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWorkerNonceUnfulfilledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWorkerNonceUnfulfilledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWorkerNonceUnfulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWorkerNonceUnfulfilled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUnfulfilledReputerNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUnfulfilledReputerNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUnfulfilledReputerNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUnfulfilledReputerNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUnfulfilledReputerNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUnfulfilledReputerNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nonces == nil {
				m.Nonces = &ReputerRequestNonces{}
			}
			if err := m.Nonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUnfulfilledWorkerNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUnfulfilledWorkerNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUnfulfilledWorkerNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUnfulfilledWorkerNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUnfulfilledWorkerNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUnfulfilledWorkerNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nonces == nil {
				m.Nonces = &Nonces{}
			}
			if err := m.Nonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfererNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfererNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfererNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfererNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfererNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfererNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForecasterNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForecasterNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForecasterNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForecasterNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForecasterNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForecasterNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneInForecasterNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneInForecasterNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneInForecasterNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOneInForecasterNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOneInForecasterNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOneInForecasterNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsReputerNonceUnfulfilledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsReputerNonceUnfulfilledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsReputerNonceUnfulfilledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsReputerNonceUnfulfilledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsReputerNonceUnfulfilledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsReputerNonceUnfulfilledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReputerNonceUnfulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReputerNonceUnfulfilled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkInferencesAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkInferencesAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkInferencesAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkInferencesAtBlockOutlierResistantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkInferencesAtBlockOutlierResistantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkInferencesAtBlockOutlierResistantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestNetworkInferencesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestNetworkInferencesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestNetworkInferencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfererWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfererWeights = append(m.InfererWeights, &RegretInformedWeight{})
			if err := m.InfererWeights[len(m.InfererWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecasterWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecasterWeights = append(m.ForecasterWeights, &RegretInformedWeight{})
			if err := m.ForecasterWeights[len(m.ForecasterWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceBlockHeight", wireType)
			}
			m.InferenceBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBlockHeight", wireType)
			}
			m.LossBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LossBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalRawPercentiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalRawPercentiles = append(m.ConfidenceIntervalRawPercentiles, v)
			if err := m.ConfidenceIntervalRawPercentiles[len(m.ConfidenceIntervalRawPercentiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalValues = append(m.ConfidenceIntervalValues, v)
			if err := m.ConfidenceIntervalValues[len(m.ConfidenceIntervalValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestNetworkInferencesOutlierResistantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestNetworkInferencesOutlierResistantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestNetworkInferencesOutlierResistantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfererWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfererWeights = append(m.InfererWeights, &RegretInformedWeight{})
			if err := m.InfererWeights[len(m.InfererWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecasterWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecasterWeights = append(m.ForecasterWeights, &RegretInformedWeight{})
			if err := m.ForecasterWeights[len(m.ForecasterWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceBlockHeight", wireType)
			}
			m.InferenceBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBlockHeight", wireType)
			}
			m.LossBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LossBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalRawPercentiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalRawPercentiles = append(m.ConfidenceIntervalRawPercentiles, v)
			if err := m.ConfidenceIntervalRawPercentiles[len(m.ConfidenceIntervalRawPercentiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalValues = append(m.ConfidenceIntervalValues, v)
			if err := m.ConfidenceIntervalValues[len(m.ConfidenceIntervalValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestAvailableNetworkInferencesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestAvailableNetworkInferencesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestAvailableNetworkInferencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfererWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfererWeights = append(m.InfererWeights, &RegretInformedWeight{})
			if err := m.InfererWeights[len(m.InfererWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecasterWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecasterWeights = append(m.ForecasterWeights, &RegretInformedWeight{})
			if err := m.ForecasterWeights[len(m.ForecasterWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceBlockHeight", wireType)
			}
			m.InferenceBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBlockHeight", wireType)
			}
			m.LossBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LossBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalRawPercentiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalRawPercentiles = append(m.ConfidenceIntervalRawPercentiles, v)
			if err := m.ConfidenceIntervalRawPercentiles[len(m.ConfidenceIntervalRawPercentiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalValues = append(m.ConfidenceIntervalValues, v)
			if err := m.ConfidenceIntervalValues[len(m.ConfidenceIntervalValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestAvailableNetworkInferencesOutlierResistantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestAvailableNetworkInferencesOutlierResistantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestAvailableNetworkInferencesOutlierResistantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfererWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfererWeights = append(m.InfererWeights, &RegretInformedWeight{})
			if err := m.InfererWeights[len(m.InfererWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecasterWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecasterWeights = append(m.ForecasterWeights, &RegretInformedWeight{})
			if err := m.ForecasterWeights[len(m.ForecasterWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceBlockHeight", wireType)
			}
			m.InferenceBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBlockHeight", wireType)
			}
			m.LossBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LossBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalRawPercentiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalRawPercentiles = append(m.ConfidenceIntervalRawPercentiles, v)
			if err := m.ConfidenceIntervalRawPercentiles[len(m.ConfidenceIntervalRawPercentiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalValues = append(m.ConfidenceIntervalValues, v)
			if err := m.ConfidenceIntervalValues[len(m.ConfidenceIntervalValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWorkerRegisteredInTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWorkerRegisteredInTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWorkerRegisteredInTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWorkerRegisteredInTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWorkerRegisteredInTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWorkerRegisteredInTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsReputerRegisteredInTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsReputerRegisteredInTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsReputerRegisteredInTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsReputerRegisteredInTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsReputerRegisteredInTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsReputerRegisteredInTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsWhitelistAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsWhitelistAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsWhitelistAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeRemovalsUpUntilBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeRemovalsUpUntilBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeRemovalsUpUntilBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeRemovalsUpUntilBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeRemovalsUpUntilBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeRemovalsUpUntilBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Removals = append(m.Removals, &StakeRemovalInfo{})
			if err := m.Removals[len(m.Removals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeRemovalsUpUntilBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalsUpUntilBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalsUpUntilBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeRemovalsUpUntilBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalsUpUntilBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalsUpUntilBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Removals = append(m.Removals, &DelegateStakeRemovalInfo{})
			if err := m.Removals[len(m.Removals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeRemovalInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeRemovalInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeRemovalInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeRemovalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeRemovalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeRemovalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Removal == nil {
				m.Removal = &StakeRemovalInfo{}
			}
			if err := m.Removal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeRemovalInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeRemovalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Removal == nil {
				m.Removal = &DelegateStakeRemovalInfo{}
			}
			if err := m.Removal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicLastWorkerCommitInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicLastWorkerCommitInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicLastWorkerCommitInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicLastWorkerCommitInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicLastWorkerCommitInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicLastWorkerCommitInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCommit == nil {
				m.LastCommit = &TimestampedActorNonce{}
			}
			if err := m.LastCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicLastReputerCommitInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicLastReputerCommitInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicLastReputerCommitInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicLastReputerCommitInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicLastReputerCommitInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicLastReputerCommitInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCommit == nil {
				m.LastCommit = &TimestampedActorNonce{}
			}
			if err := m.LastCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicRewardNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicRewardNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicRewardNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicRewardNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicRewardNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicRewardNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputerLossBundlesAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputerLossBundlesAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputerLossBundlesAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputerLossBundlesAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputerLossBundlesAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputerLossBundlesAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LossBundles == nil {
				m.LossBundles = &ReputerValueBundles{}
			}
			if err := m.LossBundles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeReputerAuthorityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeReputerAuthorityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeReputerAuthorityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeReputerAuthorityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeReputerAuthorityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeReputerAuthorityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Authority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakePlacementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakePlacementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakePlacementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakePlacementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakePlacementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakePlacementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegatorInfo == nil {
				m.DelegatorInfo = &DelegatorInfo{}
			}
			if err := m.DelegatorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeUponReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeUponReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeUponReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeUponReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeUponReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeUponReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateRewardPerShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateRewardPerShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateRewardPerShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateRewardPerShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateRewardPerShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateRewardPerShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeRemovalForReputerAndTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeRemovalForReputerAndTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeRemovalForReputerAndTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStakeRemovalForReputerAndTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStakeRemovalForReputerAndTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStakeRemovalForReputerAndTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRemovalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeRemovalInfo == nil {
				m.StakeRemovalInfo = &StakeRemovalInfo{}
			}
			if err := m.StakeRemovalInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeRemovalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelegateStakeRemovalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelegateStakeRemovalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRemovalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeRemovalInfo == nil {
				m.StakeRemovalInfo = &DelegateStakeRemovalInfo{}
			}
			if err := m.StakeRemovalInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousTopicWeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousTopicWeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousTopicWeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousTopicWeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousTopicWeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousTopicWeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalSumPreviousTopicWeightsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalSumPreviousTopicWeightsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalSumPreviousTopicWeightsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalSumPreviousTopicWeightsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalSumPreviousTopicWeightsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalSumPreviousTopicWeightsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicExistsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicExistsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicExistsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicExistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicExistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicExistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTopicActiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsTopicActiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsTopicActiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsTopicActiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsTopicActiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsTopicActiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicFeeRevenueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicFeeRevenueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicFeeRevenueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicFeeRevenueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicFeeRevenueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicFeeRevenueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRevenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRevenue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfererScoreEmaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfererScoreEmaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfererScoreEmaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfererScoreEmaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfererScoreEmaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfererScoreEmaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForecasterScoreEmaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForecasterScoreEmaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForecasterScoreEmaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForecasterScoreEmaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForecasterScoreEmaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForecasterScoreEmaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputerScoreEmaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputerScoreEmaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputerScoreEmaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputerScoreEmaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputerScoreEmaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputerScoreEmaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInferenceScoresUntilBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInferenceScoresUntilBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInferenceScoresUntilBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInferenceScoresUntilBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInferenceScoresUntilBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInferenceScoresUntilBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &Score{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileForecasterScoreEmaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileForecasterScoreEmaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousTopicQuantileForecasterScoreEmaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileForecasterScoreEmaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileForecasterScoreEmaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousTopicQuantileInfererScoreEmaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileInfererScoreEmaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileInfererScoreEmaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousTopicQuantileInfererScoreEmaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileInfererScoreEmaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileInfererScoreEmaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousTopicQuantileReputerScoreEmaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileReputerScoreEmaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileReputerScoreEmaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousTopicQuantileReputerScoreEmaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileReputerScoreEmaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousTopicQuantileReputerScoreEmaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerInferenceScoresAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerInferenceScoresAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerInferenceScoresAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerInferenceScoresAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerInferenceScoresAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerInferenceScoresAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = &Scores{}
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentLowestInfererScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentLowestInfererScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentLowestInfererScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentLowestInfererScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentLowestInfererScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentLowestInfererScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForecastScoresUntilBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForecastScoresUntilBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForecastScoresUntilBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetForecastScoresUntilBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetForecastScoresUntilBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetForecastScoresUntilBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &Score{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerForecastScoresAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerForecastScoresAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerForecastScoresAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerForecastScoresAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerForecastScoresAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerForecastScoresAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = &Scores{}
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentLowestForecasterScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentLowestForecasterScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentLowestForecasterScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentLowestForecasterScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentLowestForecasterScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentLowestForecasterScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputersScoresAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputersScoresAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputersScoresAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReputersScoresAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReputersScoresAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReputersScoresAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = &Scores{}
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentLowestReputerScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentLowestReputerScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentLowestReputerScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentLowestReputerScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentLowestReputerScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentLowestReputerScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetListeningCoefficientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListeningCoefficientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListeningCoefficientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetListeningCoefficientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListeningCoefficientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListeningCoefficientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListeningCoefficient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListeningCoefficient == nil {
				m.ListeningCoefficient = &ListeningCoefficient{}
			}
			if err := m.ListeningCoefficient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousReputerRewardFractionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousReputerRewardFractionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousReputerRewardFractionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousReputerRewardFractionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousReputerRewardFractionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousReputerRewardFractionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousInferenceRewardFractionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousInferenceRewardFractionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousInferenceRewardFractionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousInferenceRewardFractionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousInferenceRewardFractionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousInferenceRewardFractionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousForecastRewardFractionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousForecastRewardFractionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousForecastRewardFractionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousForecastRewardFractionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousForecastRewardFractionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousForecastRewardFractionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousPercentageRewardToStakedReputersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousPercentageRewardToStakedReputersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousPercentageRewardToStakedReputersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreviousPercentageRewardToStakedReputersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreviousPercentageRewardToStakedReputersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreviousPercentageRewardToStakedReputersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PercentageReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalRewardToDistributeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalRewardToDistributeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalRewardToDistributeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalRewardToDistributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalRewardToDistributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalRewardToDistributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveTopicsAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveTopicsAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveTopicsAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveTopicsAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveTopicsAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveTopicsAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &SimpleCursorPaginationResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNextChurningBlockByTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNextChurningBlockByTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNextChurningBlockByTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNextChurningBlockByTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNextChurningBlockByTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNextChurningBlockByTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveReputersForTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveReputersForTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveReputersForTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveReputersForTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveReputersForTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveReputersForTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputers = append(m.Reputers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveForecastersForTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveForecastersForTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveForecastersForTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveForecastersForTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveForecastersForTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveForecastersForTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecasters = append(m.Forecasters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveInferersForTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveInferersForTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveInferersForTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveInferersForTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveInferersForTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveInferersForTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferers = append(m.Inferers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicInitialInfererEmaScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicInitialInfererEmaScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicInitialInfererEmaScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicInitialInfererEmaScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicInitialInfererEmaScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicInitialInfererEmaScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicInitialForecasterEmaScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicInitialForecasterEmaScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicInitialForecasterEmaScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicInitialForecasterEmaScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicInitialForecasterEmaScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicInitialForecasterEmaScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicInitialReputerEmaScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicInitialReputerEmaScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicInitialReputerEmaScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTopicInitialReputerEmaScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopicInitialReputerEmaScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopicInitialReputerEmaScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
