// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mint/v5/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryServiceParamsRequest is the request type for the Query/Params RPC method.
type QueryServiceParamsRequest struct {
}

func (m *QueryServiceParamsRequest) Reset()         { *m = QueryServiceParamsRequest{} }
func (m *QueryServiceParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceParamsRequest) ProtoMessage()    {}
func (*QueryServiceParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_609b75d3316005ba, []int{0}
}
func (m *QueryServiceParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceParamsRequest.Merge(m, src)
}
func (m *QueryServiceParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceParamsRequest proto.InternalMessageInfo

// QueryServiceParamsResponse is the response type for the Query/Params RPC method.
type QueryServiceParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryServiceParamsResponse) Reset()         { *m = QueryServiceParamsResponse{} }
func (m *QueryServiceParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceParamsResponse) ProtoMessage()    {}
func (*QueryServiceParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_609b75d3316005ba, []int{1}
}
func (m *QueryServiceParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceParamsResponse.Merge(m, src)
}
func (m *QueryServiceParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceParamsResponse proto.InternalMessageInfo

func (m *QueryServiceParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryServiceInflationRequest is the request type for the Query/Inflation RPC method.
type QueryServiceInflationRequest struct {
}

func (m *QueryServiceInflationRequest) Reset()         { *m = QueryServiceInflationRequest{} }
func (m *QueryServiceInflationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceInflationRequest) ProtoMessage()    {}
func (*QueryServiceInflationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_609b75d3316005ba, []int{2}
}
func (m *QueryServiceInflationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceInflationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceInflationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceInflationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceInflationRequest.Merge(m, src)
}
func (m *QueryServiceInflationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceInflationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceInflationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceInflationRequest proto.InternalMessageInfo

// QueryServiceInflationResponse is the response type for the Query/Inflation RPC
// method.
type QueryServiceInflationResponse struct {
	// inflation is the current minting inflation value.
	Inflation cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=inflation,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"inflation"`
}

func (m *QueryServiceInflationResponse) Reset()         { *m = QueryServiceInflationResponse{} }
func (m *QueryServiceInflationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceInflationResponse) ProtoMessage()    {}
func (*QueryServiceInflationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_609b75d3316005ba, []int{3}
}
func (m *QueryServiceInflationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceInflationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceInflationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceInflationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceInflationResponse.Merge(m, src)
}
func (m *QueryServiceInflationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceInflationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceInflationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceInflationResponse proto.InternalMessageInfo

// query for a big dump of mint module info
type QueryServiceEmissionInfoRequest struct {
}

func (m *QueryServiceEmissionInfoRequest) Reset()         { *m = QueryServiceEmissionInfoRequest{} }
func (m *QueryServiceEmissionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceEmissionInfoRequest) ProtoMessage()    {}
func (*QueryServiceEmissionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_609b75d3316005ba, []int{4}
}
func (m *QueryServiceEmissionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceEmissionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceEmissionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceEmissionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceEmissionInfoRequest.Merge(m, src)
}
func (m *QueryServiceEmissionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceEmissionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceEmissionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceEmissionInfoRequest proto.InternalMessageInfo

// return information about the emissions rate on query
type QueryServiceEmissionInfoResponse struct {
	Params                                   Params                      `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	EcosystemBalance                         cosmossdk_io_math.Int       `protobuf:"bytes,2,opt,name=ecosystem_balance,json=ecosystemBalance,proto3,customtype=cosmossdk.io/math.Int" json:"ecosystem_balance"`
	PreviousBlockEmission                    cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=previous_block_emission,json=previousBlockEmission,proto3,customtype=cosmossdk.io/math.Int" json:"previous_block_emission"`
	EcosystemMintSupplyRemaining             cosmossdk_io_math.Int       `protobuf:"bytes,4,opt,name=ecosystem_mint_supply_remaining,json=ecosystemMintSupplyRemaining,proto3,customtype=cosmossdk.io/math.Int" json:"ecosystem_mint_supply_remaining"`
	BlocksPerMonth                           uint64                      `protobuf:"varint,5,opt,name=blocks_per_month,json=blocksPerMonth,proto3" json:"blocks_per_month,omitempty"`
	BlockHeightTargetEILastCalculated        uint64                      `protobuf:"varint,6,opt,name=block_height_target_e_i_last_calculated,json=blockHeightTargetEILastCalculated,proto3" json:"block_height_target_e_i_last_calculated,omitempty"`
	BlockHeightTargetEINextCalculated        uint64                      `protobuf:"varint,7,opt,name=block_height_target_e_i_next_calculated,json=blockHeightTargetEINextCalculated,proto3" json:"block_height_target_e_i_next_calculated,omitempty"`
	NetworkStakedTokens                      cosmossdk_io_math.Int       `protobuf:"bytes,8,opt,name=network_staked_tokens,json=networkStakedTokens,proto3,customtype=cosmossdk.io/math.Int" json:"network_staked_tokens"`
	LockedVestingTokensTotal                 cosmossdk_io_math.Int       `protobuf:"bytes,9,opt,name=locked_vesting_tokens_total,json=lockedVestingTokensTotal,proto3,customtype=cosmossdk.io/math.Int" json:"locked_vesting_tokens_total"`
	LockedVestingTokensInvestorsPreseed      cosmossdk_io_math.Int       `protobuf:"bytes,10,opt,name=locked_vesting_tokens_investors_preseed,json=lockedVestingTokensInvestorsPreseed,proto3,customtype=cosmossdk.io/math.Int" json:"locked_vesting_tokens_investors_preseed"`
	LockedVestingTokensInvestorsSeed         cosmossdk_io_math.Int       `protobuf:"bytes,11,opt,name=locked_vesting_tokens_investors_seed,json=lockedVestingTokensInvestorsSeed,proto3,customtype=cosmossdk.io/math.Int" json:"locked_vesting_tokens_investors_seed"`
	LockedVestingTokensTeam                  cosmossdk_io_math.Int       `protobuf:"bytes,12,opt,name=locked_vesting_tokens_team,json=lockedVestingTokensTeam,proto3,customtype=cosmossdk.io/math.Int" json:"locked_vesting_tokens_team"`
	EcosystemLocked                          cosmossdk_io_math.Int       `protobuf:"bytes,13,opt,name=ecosystem_locked,json=ecosystemLocked,proto3,customtype=cosmossdk.io/math.Int" json:"ecosystem_locked"`
	CirculatingSupply                        cosmossdk_io_math.Int       `protobuf:"bytes,14,opt,name=circulating_supply,json=circulatingSupply,proto3,customtype=cosmossdk.io/math.Int" json:"circulating_supply"`
	MaxSupply                                cosmossdk_io_math.Int       `protobuf:"bytes,15,opt,name=max_supply,json=maxSupply,proto3,customtype=cosmossdk.io/math.Int" json:"max_supply"`
	TargetEmissionRatePerUnitStakedToken     cosmossdk_io_math.LegacyDec `protobuf:"bytes,16,opt,name=target_emission_rate_per_unit_staked_token,json=targetEmissionRatePerUnitStakedToken,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"target_emission_rate_per_unit_staked_token"`
	ReputersPercent                          cosmossdk_io_math.LegacyDec `protobuf:"bytes,17,opt,name=reputers_percent,json=reputersPercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reputers_percent"`
	ValidatorsPercent                        cosmossdk_io_math.LegacyDec `protobuf:"bytes,18,opt,name=validators_percent,json=validatorsPercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"validators_percent"`
	MaximumMonthlyEmissionPerUnitStakedToken cosmossdk_io_math.LegacyDec `protobuf:"bytes,19,opt,name=maximum_monthly_emission_per_unit_staked_token,json=maximumMonthlyEmissionPerUnitStakedToken,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maximum_monthly_emission_per_unit_staked_token"`
	TargetRewardEmissionPerUnitStakedToken   cosmossdk_io_math.LegacyDec `protobuf:"bytes,20,opt,name=target_reward_emission_per_unit_staked_token,json=targetRewardEmissionPerUnitStakedToken,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"target_reward_emission_per_unit_staked_token"`
	EmissionPerUnitStakedToken               cosmossdk_io_math.LegacyDec `protobuf:"bytes,21,opt,name=emission_per_unit_staked_token,json=emissionPerUnitStakedToken,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"emission_per_unit_staked_token"`
	EmissionPerMonth                         cosmossdk_io_math.Int       `protobuf:"bytes,22,opt,name=emission_per_month,json=emissionPerMonth,proto3,customtype=cosmossdk.io/math.Int" json:"emission_per_month"`
	BlockEmission                            cosmossdk_io_math.Int       `protobuf:"bytes,23,opt,name=block_emission,json=blockEmission,proto3,customtype=cosmossdk.io/math.Int" json:"block_emission"`
	ValidatorCut                             cosmossdk_io_math.Int       `protobuf:"bytes,24,opt,name=validator_cut,json=validatorCut,proto3,customtype=cosmossdk.io/math.Int" json:"validator_cut"`
	AlloraRewardsCut                         cosmossdk_io_math.Int       `protobuf:"bytes,25,opt,name=allora_rewards_cut,json=alloraRewardsCut,proto3,customtype=cosmossdk.io/math.Int" json:"allora_rewards_cut"`
	PreviousRewardEmissionPerUnitStakedToken cosmossdk_io_math.LegacyDec `protobuf:"bytes,26,opt,name=previous_reward_emission_per_unit_staked_token,json=previousRewardEmissionPerUnitStakedToken,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"previous_reward_emission_per_unit_staked_token"`
	MonthsAlreadyUnlocked                    cosmossdk_io_math.Int       `protobuf:"bytes,27,opt,name=months_already_unlocked,json=monthsAlreadyUnlocked,proto3,customtype=cosmossdk.io/math.Int" json:"months_already_unlocked"`
	UpdatedMonthsUnlocked                    cosmossdk_io_math.Int       `protobuf:"bytes,28,opt,name=updated_months_unlocked,json=updatedMonthsUnlocked,proto3,customtype=cosmossdk.io/math.Int" json:"updated_months_unlocked"`
}

func (m *QueryServiceEmissionInfoResponse) Reset()         { *m = QueryServiceEmissionInfoResponse{} }
func (m *QueryServiceEmissionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceEmissionInfoResponse) ProtoMessage()    {}
func (*QueryServiceEmissionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_609b75d3316005ba, []int{5}
}
func (m *QueryServiceEmissionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceEmissionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceEmissionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceEmissionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceEmissionInfoResponse.Merge(m, src)
}
func (m *QueryServiceEmissionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceEmissionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceEmissionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceEmissionInfoResponse proto.InternalMessageInfo

func (m *QueryServiceEmissionInfoResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *QueryServiceEmissionInfoResponse) GetBlocksPerMonth() uint64 {
	if m != nil {
		return m.BlocksPerMonth
	}
	return 0
}

func (m *QueryServiceEmissionInfoResponse) GetBlockHeightTargetEILastCalculated() uint64 {
	if m != nil {
		return m.BlockHeightTargetEILastCalculated
	}
	return 0
}

func (m *QueryServiceEmissionInfoResponse) GetBlockHeightTargetEINextCalculated() uint64 {
	if m != nil {
		return m.BlockHeightTargetEINextCalculated
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryServiceParamsRequest)(nil), "mint.v5.QueryServiceParamsRequest")
	proto.RegisterType((*QueryServiceParamsResponse)(nil), "mint.v5.QueryServiceParamsResponse")
	proto.RegisterType((*QueryServiceInflationRequest)(nil), "mint.v5.QueryServiceInflationRequest")
	proto.RegisterType((*QueryServiceInflationResponse)(nil), "mint.v5.QueryServiceInflationResponse")
	proto.RegisterType((*QueryServiceEmissionInfoRequest)(nil), "mint.v5.QueryServiceEmissionInfoRequest")
	proto.RegisterType((*QueryServiceEmissionInfoResponse)(nil), "mint.v5.QueryServiceEmissionInfoResponse")
}

func init() { proto.RegisterFile("mint/v5/query.proto", fileDescriptor_609b75d3316005ba) }

var fileDescriptor_609b75d3316005ba = []byte{
	// 1149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x97, 0x41, 0x6f, 0x1b, 0xc5,
	0x17, 0xc0, 0xb3, 0xfd, 0xf7, 0x9f, 0xe2, 0x69, 0xda, 0xc4, 0xd3, 0xa6, 0xde, 0x3a, 0xc1, 0x49,
	0xdd, 0xd2, 0x9a, 0x8a, 0xda, 0x28, 0x55, 0xb9, 0xe3, 0xb6, 0x12, 0x96, 0x12, 0x30, 0x4e, 0x02,
	0x12, 0x08, 0x46, 0x93, 0xf5, 0x8b, 0x3d, 0x64, 0x77, 0xc6, 0xdd, 0x99, 0x75, 0x6c, 0x4e, 0x08,
	0x24, 0xce, 0x95, 0xe0, 0xc0, 0x47, 0xe0, 0xc8, 0x01, 0xbe, 0x43, 0x8f, 0x15, 0x5c, 0x10, 0x87,
	0x0a, 0x25, 0x48, 0x7c, 0x05, 0x8e, 0x68, 0x67, 0x66, 0xd7, 0x4e, 0xb1, 0x93, 0x6a, 0x7d, 0xa9,
	0xba, 0xb3, 0x2f, 0xbf, 0xdf, 0x9b, 0xe7, 0x99, 0xd9, 0x37, 0xe8, 0x4a, 0xc0, 0xb8, 0xaa, 0xf5,
	0x1f, 0xd4, 0x9e, 0x44, 0x10, 0x0e, 0xab, 0xbd, 0x50, 0x28, 0x81, 0x2f, 0xc4, 0x83, 0xd5, 0xfe,
	0x83, 0x62, 0x9e, 0x06, 0x8c, 0x8b, 0x9a, 0xfe, 0xd7, 0xbc, 0x2b, 0x5e, 0xf7, 0x84, 0x0c, 0x84,
	0x24, 0xfa, 0xa9, 0x66, 0x1e, 0xec, 0xab, 0xab, 0x1d, 0xd1, 0x11, 0x66, 0x3c, 0xfe, 0x9f, 0x1d,
	0x5d, 0xed, 0x08, 0xd1, 0xf1, 0xa1, 0x46, 0x7b, 0xac, 0x46, 0x39, 0x17, 0x8a, 0x2a, 0x26, 0x78,
	0xf2, 0x37, 0xa9, 0x5f, 0x0d, 0x7b, 0x60, 0x07, 0xcb, 0x2b, 0xe8, 0xfa, 0x87, 0x71, 0x3a, 0xdb,
	0x10, 0xf6, 0x99, 0x07, 0x4d, 0x1a, 0xd2, 0x40, 0xb6, 0xe0, 0x49, 0x04, 0x52, 0x95, 0x9b, 0xa8,
	0x38, 0xe9, 0xa5, 0xec, 0x09, 0x2e, 0x01, 0x6f, 0xa0, 0xf9, 0x9e, 0x1e, 0x71, 0x9d, 0x75, 0xa7,
	0x72, 0x71, 0x63, 0xb1, 0x6a, 0xe7, 0x52, 0x35, 0x81, 0xf5, 0xdc, 0xb3, 0x17, 0x6b, 0x73, 0x3f,
	0xfe, 0xfd, 0xd3, 0x5d, 0xa7, 0x65, 0x23, 0xcb, 0x25, 0xb4, 0x3a, 0x4e, 0x6c, 0xf0, 0x7d, 0x5f,
	0xe7, 0x98, 0x18, 0x23, 0xf4, 0xfa, 0x94, 0xf7, 0x56, 0xba, 0x83, 0x72, 0x2c, 0x19, 0xd4, 0xde,
	0x85, 0xfa, 0x3b, 0xb1, 0xe6, 0x8f, 0x17, 0x6b, 0x2b, 0xa6, 0x42, 0xb2, 0x7d, 0x50, 0x65, 0xa2,
	0x16, 0x50, 0xd5, 0xad, 0x6e, 0x42, 0x87, 0x7a, 0xc3, 0x47, 0xe0, 0xfd, 0xfa, 0xf3, 0x3d, 0x64,
	0x0b, 0xf8, 0x08, 0x3c, 0x93, 0xd3, 0x08, 0x54, 0xbe, 0x81, 0xd6, 0xc6, 0xb5, 0x8f, 0x03, 0x26,
	0x25, 0x13, 0xbc, 0xc1, 0xf7, 0x45, 0x92, 0xd9, 0x2f, 0x05, 0xb4, 0x3e, 0x3d, 0x26, 0x7b, 0x49,
	0xf0, 0x67, 0x28, 0x0f, 0x9e, 0x90, 0x43, 0xa9, 0x20, 0x20, 0x7b, 0xd4, 0xa7, 0xdc, 0x03, 0xf7,
	0xdc, 0xba, 0x53, 0xc9, 0xd5, 0xdf, 0xb6, 0x33, 0x5b, 0xfe, 0xef, 0xcc, 0x1a, 0x5c, 0x8d, 0xcd,
	0xa9, 0xc1, 0x95, 0x81, 0x2e, 0xa5, 0xa8, 0xba, 0x21, 0xe1, 0x2e, 0x2a, 0xf4, 0x42, 0xe8, 0x33,
	0x11, 0x49, 0xb2, 0xe7, 0x0b, 0xef, 0x80, 0x80, 0xcd, 0xdc, 0xfd, 0x5f, 0x46, 0xc9, 0x72, 0x02,
	0xac, 0xc7, 0xbc, 0xa4, 0x10, 0xf8, 0x10, 0xad, 0x8d, 0x26, 0x12, 0xcf, 0x9b, 0xc8, 0xa8, 0xd7,
	0xf3, 0x87, 0x24, 0x84, 0x80, 0x32, 0xce, 0x78, 0xc7, 0x3d, 0x9f, 0xd1, 0xb8, 0x9a, 0x82, 0xb7,
	0x18, 0x57, 0xdb, 0x1a, 0xdb, 0x4a, 0xa8, 0xb8, 0x82, 0x96, 0xf4, 0xcc, 0x24, 0xe9, 0x41, 0x48,
	0x02, 0xc1, 0x55, 0xd7, 0xfd, 0xff, 0xba, 0x53, 0x39, 0xdf, 0xba, 0x6c, 0xc6, 0x9b, 0x10, 0x6e,
	0xc5, 0xa3, 0xb8, 0x85, 0xee, 0x98, 0x1a, 0x74, 0x81, 0x75, 0xba, 0x8a, 0x28, 0x1a, 0x76, 0x40,
	0x11, 0x20, 0x8c, 0xf8, 0x54, 0x2a, 0xe2, 0x51, 0xdf, 0x8b, 0x7c, 0xaa, 0xa0, 0xed, 0xce, 0x6b,
	0xc0, 0x0d, 0x1d, 0xfe, 0x9e, 0x8e, 0xde, 0xd1, 0xc1, 0x8f, 0x1b, 0x9b, 0x54, 0xaa, 0x87, 0x69,
	0xe0, 0x69, 0x4c, 0x0e, 0x83, 0x13, 0xcc, 0x0b, 0x53, 0x99, 0xef, 0xc3, 0x60, 0x9c, 0xd9, 0x46,
	0xcb, 0x1c, 0xd4, 0xa1, 0x08, 0x0f, 0x88, 0x54, 0xf4, 0x00, 0xda, 0x44, 0x89, 0x03, 0xe0, 0xd2,
	0x7d, 0x2d, 0x63, 0x01, 0xaf, 0x58, 0xdc, 0xb6, 0xa6, 0xed, 0x68, 0x18, 0x16, 0x68, 0x25, 0xce,
	0x04, 0xda, 0xa4, 0x0f, 0x52, 0x31, 0xde, 0xb1, 0x16, 0xa2, 0x84, 0xa2, 0xbe, 0x9b, 0xcb, 0xe8,
	0x72, 0x0d, 0xf4, 0x23, 0xc3, 0x34, 0xae, 0x9d, 0x98, 0x88, 0xbf, 0x75, 0xd0, 0x9d, 0xc9, 0x46,
	0xc6, 0xe3, 0x01, 0x11, 0xc6, 0x87, 0x1d, 0x48, 0x80, 0xb6, 0x8b, 0x32, 0xda, 0x6f, 0x4e, 0xb0,
	0x37, 0x12, 0x7a, 0xd3, 0xc0, 0xf1, 0x57, 0x0e, 0xba, 0x75, 0x56, 0x22, 0x3a, 0x8b, 0x8b, 0x19,
	0xb3, 0x58, 0x3f, 0x2d, 0x8b, 0xed, 0x38, 0x85, 0x00, 0x15, 0xa7, 0x14, 0x1f, 0x68, 0xe0, 0x2e,
	0x64, 0xf4, 0x16, 0x26, 0xd5, 0x1e, 0x68, 0x80, 0x3f, 0x45, 0xa3, 0xa3, 0x81, 0x98, 0x20, 0xf7,
	0x52, 0x46, 0xc9, 0x62, 0x4a, 0xda, 0xd4, 0x20, 0x4c, 0x10, 0xf6, 0x58, 0xa8, 0x17, 0x6f, 0x3c,
	0x11, 0xb3, 0xed, 0xdd, 0xcb, 0x19, 0xf1, 0xf9, 0x31, 0x96, 0xd9, 0xea, 0xf8, 0x03, 0x84, 0x02,
	0x3a, 0x48, 0xc0, 0x8b, 0x19, 0xc1, 0xb9, 0x80, 0x0e, 0x2c, 0xf0, 0xa9, 0x83, 0xee, 0x26, 0x1b,
	0xd5, 0x9e, 0x5f, 0x24, 0xa4, 0x0a, 0xf4, 0x09, 0x12, 0x71, 0xa6, 0x4e, 0xec, 0x3b, 0x77, 0x49,
	0x1b, 0xb3, 0x7e, 0x68, 0x6e, 0x19, 0x53, 0x72, 0x50, 0xb6, 0xa8, 0x82, 0x26, 0x84, 0xbb, 0x9c,
	0xa9, 0xb1, 0xed, 0x88, 0x29, 0x5a, 0x0a, 0xa1, 0x17, 0x29, 0x08, 0xf5, 0x39, 0xe6, 0x01, 0x57,
	0x6e, 0x7e, 0x26, 0xef, 0x62, 0xc2, 0x6b, 0x1a, 0x1c, 0x06, 0x84, 0xfb, 0xd4, 0x67, 0x6d, 0x6a,
	0x76, 0x9a, 0x95, 0xe0, 0x99, 0x24, 0xf9, 0x11, 0x31, 0xd1, 0xfc, 0xe0, 0xa0, 0x6a, 0x40, 0x07,
	0x2c, 0x88, 0x02, 0x73, 0x1a, 0xfb, 0xc3, 0x51, 0x95, 0x27, 0x17, 0xf8, 0xca, 0x4c, 0x39, 0x54,
	0xac, 0x6d, 0xcb, 0xc8, 0x92, 0x42, 0x4f, 0x28, 0xf2, 0xf7, 0x0e, 0x7a, 0xcb, 0xfe, 0xee, 0x21,
	0x1c, 0xd2, 0xb0, 0x7d, 0x56, 0x62, 0x57, 0x67, 0x4a, 0xec, 0xb6, 0x71, 0xb5, 0xb4, 0xea, 0x94,
	0xb4, 0xbe, 0x44, 0xa5, 0x33, 0xf2, 0x58, 0x9e, 0x29, 0x8f, 0x22, 0x4c, 0x77, 0x7f, 0x8e, 0xf0,
	0x09, 0xb7, 0xf9, 0x7e, 0x5e, 0xcb, 0xdc, 0x80, 0x8c, 0x4c, 0xe6, 0x9b, 0xfb, 0x31, 0xba, 0xfc,
	0x52, 0xdf, 0x51, 0xc8, 0xc8, 0xbe, 0xb4, 0x77, 0xa2, 0xdf, 0xd8, 0x45, 0x97, 0xd2, 0xb5, 0x47,
	0xbc, 0x48, 0xb9, 0x6e, 0x46, 0xee, 0x42, 0x8a, 0x79, 0x18, 0xa9, 0xb8, 0x1e, 0xd4, 0xf7, 0x45,
	0x48, 0xed, 0x0a, 0x91, 0x9a, 0x7d, 0x3d, 0x6b, 0x3d, 0x0c, 0xcb, 0xac, 0x00, 0x19, 0xf3, 0xe3,
	0xdd, 0x91, 0x76, 0x64, 0xaf, 0xb6, 0x08, 0x8b, 0xb3, 0xed, 0x8e, 0xc4, 0x76, 0xe6, 0x32, 0xec,
	0xa2, 0x82, 0xfe, 0xf5, 0x25, 0xa1, 0x7e, 0x08, 0xb4, 0x3d, 0x24, 0x11, 0xb7, 0xdf, 0x8a, 0x95,
	0xac, 0xbd, 0xa2, 0x01, 0xbe, 0x6b, 0x78, 0xbb, 0x16, 0x17, 0x9b, 0xa2, 0x5e, 0x3b, 0xee, 0x75,
	0x88, 0x35, 0xa6, 0xa6, 0xd5, 0xac, 0x26, 0x0b, 0xd4, 0xab, 0x4e, 0x26, 0xa6, 0x8d, 0x7f, 0xce,
	0xa1, 0x85, 0xf1, 0xbe, 0x1d, 0x7f, 0x81, 0xe6, 0x4d, 0x33, 0x8e, 0xcb, 0x69, 0x77, 0x3e, 0xf5,
	0x0a, 0x54, 0xbc, 0x79, 0x6a, 0x8c, 0x69, 0xfb, 0xcb, 0x85, 0xaf, 0x7f, 0xfb, 0xeb, 0xbb, 0x73,
	0x79, 0xbc, 0x58, 0x4b, 0xae, 0x58, 0xb6, 0xb7, 0xef, 0xa3, 0x5c, 0x7a, 0x85, 0xc1, 0x6f, 0x4c,
	0x44, 0xbd, 0x7c, 0x05, 0x2a, 0xde, 0x3e, 0x2b, 0xcc, 0x4a, 0x8b, 0x5a, 0x7a, 0x15, 0xe3, 0x54,
	0x9a, 0xde, 0x67, 0xf0, 0x37, 0x0e, 0x5a, 0x18, 0xbf, 0xa0, 0xe0, 0xca, 0x44, 0xe8, 0x84, 0x7b,
	0x4e, 0xf1, 0xcd, 0x57, 0x88, 0xb4, 0x19, 0x94, 0x74, 0x06, 0x2e, 0xbe, 0x96, 0x66, 0x90, 0xae,
	0x63, 0xc6, 0xf7, 0x45, 0x7d, 0xeb, 0xd9, 0x51, 0xc9, 0x79, 0x7e, 0x54, 0x72, 0xfe, 0x3c, 0x2a,
	0x39, 0x4f, 0x8f, 0x4b, 0x73, 0xcf, 0x8f, 0x4b, 0x73, 0xbf, 0x1f, 0x97, 0xe6, 0x3e, 0xb9, 0xdf,
	0x61, 0xaa, 0x1b, 0xed, 0x55, 0x3d, 0x11, 0xd4, 0xcc, 0x06, 0xb9, 0x67, 0x1b, 0xd4, 0xe4, 0xd1,
	0xeb, 0x52, 0xc6, 0x6b, 0x03, 0x43, 0xd6, 0x17, 0xd6, 0xbd, 0x79, 0x7d, 0x63, 0xbd, 0xff, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0x60, 0x55, 0xa1, 0x48, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Params returns the total set of minting parameters.
	Params(ctx context.Context, in *QueryServiceParamsRequest, opts ...grpc.CallOption) (*QueryServiceParamsResponse, error)
	// Inflation returns the current minting inflation value.
	Inflation(ctx context.Context, in *QueryServiceInflationRequest, opts ...grpc.CallOption) (*QueryServiceInflationResponse, error)
	EmissionInfo(ctx context.Context, in *QueryServiceEmissionInfoRequest, opts ...grpc.CallOption) (*QueryServiceEmissionInfoResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Params(ctx context.Context, in *QueryServiceParamsRequest, opts ...grpc.CallOption) (*QueryServiceParamsResponse, error) {
	out := new(QueryServiceParamsResponse)
	err := c.cc.Invoke(ctx, "/mint.v5.QueryService/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Inflation(ctx context.Context, in *QueryServiceInflationRequest, opts ...grpc.CallOption) (*QueryServiceInflationResponse, error) {
	out := new(QueryServiceInflationResponse)
	err := c.cc.Invoke(ctx, "/mint.v5.QueryService/Inflation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) EmissionInfo(ctx context.Context, in *QueryServiceEmissionInfoRequest, opts ...grpc.CallOption) (*QueryServiceEmissionInfoResponse, error) {
	out := new(QueryServiceEmissionInfoResponse)
	err := c.cc.Invoke(ctx, "/mint.v5.QueryService/EmissionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// Params returns the total set of minting parameters.
	Params(context.Context, *QueryServiceParamsRequest) (*QueryServiceParamsResponse, error)
	// Inflation returns the current minting inflation value.
	Inflation(context.Context, *QueryServiceInflationRequest) (*QueryServiceInflationResponse, error)
	EmissionInfo(context.Context, *QueryServiceEmissionInfoRequest) (*QueryServiceEmissionInfoResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) Params(ctx context.Context, req *QueryServiceParamsRequest) (*QueryServiceParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServiceServer) Inflation(ctx context.Context, req *QueryServiceInflationRequest) (*QueryServiceInflationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inflation not implemented")
}
func (*UnimplementedQueryServiceServer) EmissionInfo(ctx context.Context, req *QueryServiceEmissionInfoRequest) (*QueryServiceEmissionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmissionInfo not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mint.v5.QueryService/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Params(ctx, req.(*QueryServiceParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Inflation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceInflationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Inflation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mint.v5.QueryService/Inflation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Inflation(ctx, req.(*QueryServiceInflationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_EmissionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceEmissionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).EmissionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mint.v5.QueryService/EmissionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).EmissionInfo(ctx, req.(*QueryServiceEmissionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var QueryService_serviceDesc = _QueryService_serviceDesc
var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mint.v5.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _QueryService_Params_Handler,
		},
		{
			MethodName: "Inflation",
			Handler:    _QueryService_Inflation_Handler,
		},
		{
			MethodName: "EmissionInfo",
			Handler:    _QueryService_EmissionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mint/v5/query.proto",
}

func (m *QueryServiceParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryServiceParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryServiceInflationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceInflationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceInflationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryServiceInflationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceInflationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceInflationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Inflation.Size()
		i -= size
		if _, err := m.Inflation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryServiceEmissionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceEmissionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceEmissionInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryServiceEmissionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceEmissionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceEmissionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UpdatedMonthsUnlocked.Size()
		i -= size
		if _, err := m.UpdatedMonthsUnlocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	{
		size := m.MonthsAlreadyUnlocked.Size()
		i -= size
		if _, err := m.MonthsAlreadyUnlocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	{
		size := m.PreviousRewardEmissionPerUnitStakedToken.Size()
		i -= size
		if _, err := m.PreviousRewardEmissionPerUnitStakedToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	{
		size := m.AlloraRewardsCut.Size()
		i -= size
		if _, err := m.AlloraRewardsCut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	{
		size := m.ValidatorCut.Size()
		i -= size
		if _, err := m.ValidatorCut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	{
		size := m.BlockEmission.Size()
		i -= size
		if _, err := m.BlockEmission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size := m.EmissionPerMonth.Size()
		i -= size
		if _, err := m.EmissionPerMonth.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.EmissionPerUnitStakedToken.Size()
		i -= size
		if _, err := m.EmissionPerUnitStakedToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size := m.TargetRewardEmissionPerUnitStakedToken.Size()
		i -= size
		if _, err := m.TargetRewardEmissionPerUnitStakedToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size := m.MaximumMonthlyEmissionPerUnitStakedToken.Size()
		i -= size
		if _, err := m.MaximumMonthlyEmissionPerUnitStakedToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size := m.ValidatorsPercent.Size()
		i -= size
		if _, err := m.ValidatorsPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.ReputersPercent.Size()
		i -= size
		if _, err := m.ReputersPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.TargetEmissionRatePerUnitStakedToken.Size()
		i -= size
		if _, err := m.TargetEmissionRatePerUnitStakedToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.MaxSupply.Size()
		i -= size
		if _, err := m.MaxSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.CirculatingSupply.Size()
		i -= size
		if _, err := m.CirculatingSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.EcosystemLocked.Size()
		i -= size
		if _, err := m.EcosystemLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.LockedVestingTokensTeam.Size()
		i -= size
		if _, err := m.LockedVestingTokensTeam.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.LockedVestingTokensInvestorsSeed.Size()
		i -= size
		if _, err := m.LockedVestingTokensInvestorsSeed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.LockedVestingTokensInvestorsPreseed.Size()
		i -= size
		if _, err := m.LockedVestingTokensInvestorsPreseed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.LockedVestingTokensTotal.Size()
		i -= size
		if _, err := m.LockedVestingTokensTotal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.NetworkStakedTokens.Size()
		i -= size
		if _, err := m.NetworkStakedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.BlockHeightTargetEINextCalculated != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeightTargetEINextCalculated))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockHeightTargetEILastCalculated != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeightTargetEILastCalculated))
		i--
		dAtA[i] = 0x30
	}
	if m.BlocksPerMonth != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlocksPerMonth))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.EcosystemMintSupplyRemaining.Size()
		i -= size
		if _, err := m.EcosystemMintSupplyRemaining.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.PreviousBlockEmission.Size()
		i -= size
		if _, err := m.PreviousBlockEmission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.EcosystemBalance.Size()
		i -= size
		if _, err := m.EcosystemBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryServiceParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryServiceParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryServiceInflationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryServiceInflationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Inflation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryServiceEmissionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryServiceEmissionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EcosystemBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.PreviousBlockEmission.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EcosystemMintSupplyRemaining.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.BlocksPerMonth != 0 {
		n += 1 + sovQuery(uint64(m.BlocksPerMonth))
	}
	if m.BlockHeightTargetEILastCalculated != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeightTargetEILastCalculated))
	}
	if m.BlockHeightTargetEINextCalculated != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeightTargetEINextCalculated))
	}
	l = m.NetworkStakedTokens.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LockedVestingTokensTotal.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LockedVestingTokensInvestorsPreseed.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LockedVestingTokensInvestorsSeed.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LockedVestingTokensTeam.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EcosystemLocked.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CirculatingSupply.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MaxSupply.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TargetEmissionRatePerUnitStakedToken.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.ReputersPercent.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.ValidatorsPercent.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.MaximumMonthlyEmissionPerUnitStakedToken.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.TargetRewardEmissionPerUnitStakedToken.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.EmissionPerUnitStakedToken.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.EmissionPerMonth.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.BlockEmission.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.ValidatorCut.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.AlloraRewardsCut.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.PreviousRewardEmissionPerUnitStakedToken.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.MonthsAlreadyUnlocked.Size()
	n += 2 + l + sovQuery(uint64(l))
	l = m.UpdatedMonthsUnlocked.Size()
	n += 2 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryServiceParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceInflationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceInflationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceInflationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceInflationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceInflationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceInflationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inflation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Inflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceEmissionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceEmissionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceEmissionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceEmissionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceEmissionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceEmissionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcosystemBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EcosystemBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBlockEmission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousBlockEmission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcosystemMintSupplyRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EcosystemMintSupplyRemaining.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerMonth", wireType)
			}
			m.BlocksPerMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerMonth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightTargetEILastCalculated", wireType)
			}
			m.BlockHeightTargetEILastCalculated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightTargetEILastCalculated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightTargetEINextCalculated", wireType)
			}
			m.BlockHeightTargetEINextCalculated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightTargetEINextCalculated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkStakedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetworkStakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVestingTokensTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedVestingTokensTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVestingTokensInvestorsPreseed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedVestingTokensInvestorsPreseed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVestingTokensInvestorsSeed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedVestingTokensInvestorsSeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVestingTokensTeam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedVestingTokensTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcosystemLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EcosystemLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CirculatingSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CirculatingSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetEmissionRatePerUnitStakedToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetEmissionRatePerUnitStakedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputersPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReputersPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorsPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumMonthlyEmissionPerUnitStakedToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaximumMonthlyEmissionPerUnitStakedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetRewardEmissionPerUnitStakedToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetRewardEmissionPerUnitStakedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmissionPerUnitStakedToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EmissionPerUnitStakedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmissionPerMonth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EmissionPerMonth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockEmission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockEmission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorCut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlloraRewardsCut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AlloraRewardsCut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousRewardEmissionPerUnitStakedToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousRewardEmissionPerUnitStakedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthsAlreadyUnlocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MonthsAlreadyUnlocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedMonthsUnlocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedMonthsUnlocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
